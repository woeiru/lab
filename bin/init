#!/bin/bash

# Initialization System
# Dependencies: Only relies on verification module (ver) from ala folder for helper functions
# Purpose: Manages system initialization in two phases:
#   1. Module dependency initialization (working with mdc)
#   2. Runtime dependency initialization (working with rdc)

# Source runtime initialization constants
source "$DIR/../cfg/core/ric" || {
    echo "Failed to source runtime constants" >&2
    exit 1
}

# Source runtime dependency constants
source "$DIR/../cfg/core/rdc" || {
    echo "Failed to source dependency constants" >&2
    exit 1
}

# Source module dependency constants
source "$DIR/../cfg/core/mdc" || {
    echo "Failed to source dependency constants" >&2
    exit 1
}

# Source initialization module
source "$DIR/ini" || {
    echo "Failed to source initialization module" >&2
    exit 1
}

# Source verification module
source "$DIR/ver" || {
    echo "Failed to source verification module" >&2
    exit 1
}

###############################################
# Core initialization orchestrator
# Dependencies:
#   - ver (ala/ver) for all verification functions
###############################################
main_ini() {
    debug_log "Starting main initialization"

    # Verify that verification module is loaded
    if ! type verify_module &>/dev/null || ! type verify_path &>/dev/null; then
        echo "ERROR: Verification module not properly loaded" >&2
        return 1
    fi

    # Part 1: Module dependency initialization
    if ! init_module_system; then
        debug_log "ERROR: Module system initialization failed"
        return 1
    fi

    # Part 2: Runtime dependency initialization
    if ! init_runtime_system; then
        debug_log "ERROR: Runtime system initialization failed"
        return 1
    fi

    debug_log "Main initialization completed successfully"
    return 0
}

###########################################
# PART 1: Module Dependency Management
# Uses verification functions:
#   - verify_module() from ver
#   - verify_path() from ver
#   - validate_module() from ver
###########################################

init_module_system() {
    debug_log "Starting module system initialization"

    # Essential verification check from ver module
    if ! essential_check; then
        debug_log "ERROR: Essential system check failed"
        return 1
    fi

    # Initialize module requirements from mde
    if ! init_module_requirements; then
        debug_log "ERROR: Failed to initialize module requirements"
        return 1
    fi

    # Initialize directories using ver's verify_path
    if ! init_dirs; then
        debug_log "ERROR: Directory initialization failed"
        return 1
    fi

    # Load and verify modules using ver's validation functions
    if ! load_modules; then
        debug_log "ERROR: Module loading failed"
        return 1
    fi

    debug_log "Module system initialization completed"
    return 0
}

# Initialize directories using ver's verify_path
init_dirs() {
    debug_log "Starting directory initialization"

    local required_dirs=(
        "$LOG_DIR"
        "$TMP_DIR"
        "$BAS_DIR"
        "$CON_DIR"
    )

    # Using verify_path from ver module
    for dir in "${required_dirs[@]}"; do
        if ! verify_path "$dir" "dir" "true"; then
            debug_log "ERROR: Failed to verify/create directory: $dir"
            return 1
        fi
        chmod 700 "$dir" 2>/dev/null || debug_log "WARNING: Unable to set permissions for $dir"
    done

    return 0
}

# Load modules using ver's validation functions
load_modules() {
    debug_log "Starting module loading"

    local module_loaded=0
    local -a modules=(
        "$BAS_DIR/err"
        "$BAS_DIR/lo1"
        "$BAS_DIR/lo2"
        "$BAS_DIR/tme"
    )

    declare -A loaded_modules

    for module in "${modules[@]}"; do
        local module_name="$(basename "$module")"
        debug_log "Processing module: $module_name"

        # Using verify_module and validate_module from ver
        if ! verify_module "$module_name" || ! validate_module "$module"; then
            debug_log "ERROR: Module verification/validation failed for $module_name"
            continue
        fi

        if [[ -f "$module" ]] && [[ -r "$module" ]]; then
            if source "$module" 2> >(debug_log "Source error: $(cat)"); then
                debug_log "Successfully loaded module: $module_name"
                loaded_modules[$module_name]=1
                ((module_loaded++))
            else
                debug_log "ERROR: Failed to source module $module_name"
            fi
        fi
    done

    return $((module_loaded > 0 ? 0 : 1))
}

###########################################
# PART 2: Runtime Dependency Management
# Uses verification functions:
#   - verify_path() from ver
#   - verify_var() from ver
###########################################

init_runtime_system() {
    debug_log "Starting runtime system initialization"

    # Verify runtime dependency file exists using ver's verify_path
    if ! verify_path "$CON_DIR/rde" "file" "false"; then
        debug_log "ERROR: Runtime dependencies file not found"
        return 1
    fi

    # Load runtime dependencies
    if ! source "$CON_DIR/rde" 2>/dev/null; then
        debug_log "ERROR: Failed to load runtime dependencies"
        return 1
    fi

    # Process runtime configurations
    if ! process_runtime_config; then
        debug_log "ERROR: Failed to process runtime configuration"
        return 1
    fi

    # Initialize registered functions
    if ! init_registered_functions; then
        debug_log "ERROR: Failed to initialize registered functions"
        return 1
    fi

    debug_log "Runtime system initialization completed"
    return 0
}

# Process runtime configurations with ver validation
process_runtime_config() {
    debug_log "Processing runtime configuration"

    # Verify RC files exist using rc array keys
    local rc_modules=()
    for rc in "${!rc[@]}"; do
        if ! verify_path "$CON_DIR/$rc" "file" "false"; then
            debug_log "WARNING: RC file $rc not found"
        fi
    done

    # Source RC files
    if ! source_rc; then
        debug_log "ERROR: Failed to source RC files"
        return 1
    fi

    return 0
}

# Source RC files with validation
source_rc() {
    debug_log "Starting source_rc"
    local rc_modules=()
    # Iterate over the keys of the associative array 'rc'
    for rc in "${!rc[@]}"; do
        rc_modules+=("$rc")
    done
    local success_count=0

    for module in "${rc_modules[@]}"; do
        if [[ -r "$CON_DIR/$module" ]]; then
            debug_log "Processing RC module: $module"
            # Validate RC file using ver's validate_module
            if validate_module "$CON_DIR/$module"; then
                if source "$CON_DIR/$module" 2> >(debug_log "Source error: $(cat)"); then
                    ((success_count++))
                fi
            fi
        fi
    done

    return $((success_count > 0 ? 0 : 1))
}

# Initialize registered functions with verification
init_registered_functions() {
    debug_log "Initializing registered functions"

    # Verify REGISTERED_FUNCTIONS exists using ver's verify_var
    if ! verify_var "REGISTERED_FUNCTIONS"; then
        debug_log "No registered functions found"
        return 0
    fi

    local failed=0
    for func in "${REGISTERED_FUNCTIONS[@]}"; do
        if ! verify_function_dependencies "$func"; then
            debug_log "ERROR: Failed to verify dependencies for function: $func"
            ((failed++))
            continue
        fi

        if ! register_function "$func"; then
            debug_log "ERROR: Failed to register function: $func"
            ((failed++))
        fi
    done

    return $((failed > 0 ? 1 : 0))
}

# Setup minimal environment in case of failure
setup_minimal_environment() {
    local base_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$HOME/bin"
    export PATH="$PATH:$base_path"
    PS1="(minimal)[\u@\h \W]\$ "

    # Create essential directories
    for dir in "$LOG_DIR" "$TMP_DIR"; do
        mkdir -p "$dir" 2>/dev/null
    done
}

echo " ─── initializing"
# Execute initialization
main_ini
RC_STATUS=$?

if [ $RC_STATUS -ne 0 ]; then
    echo "Initialization failed with status $RC_STATUS. Check $LOG_DEBUG_FILE for details" >&2
    setup_minimal_environment
    exit 1
fi

# Export necessary functions
export -f main_ini
export -f init_dirs
export -f source_rc
export -f load_modules
