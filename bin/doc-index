#!/bin/bash
# Documentation Index Generator
# Automatically generates comprehensive documentation index with cross-references

set -euo pipefail

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
readonly DOC_DIR="$PROJECT_ROOT/doc"
readonly TMP_DIR="$PROJECT_ROOT/tmp"
readonly OUTPUT_FILE="$PROJECT_ROOT/DOCUMENTATION_INDEX.md"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $*"; }
success() { echo -e "${GREEN}‚úÖ${NC} $*"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è${NC} $*"; }
error() { echo -e "${RED}‚ùå${NC} $*"; }

# Function to get file metadata
get_file_info() {
    local file="$1"
    local lines word_count
    
    if [[ -f "$file" ]]; then
        lines=$(wc -l < "$file" 2>/dev/null || echo "0")
        word_count=$(wc -w < "$file" 2>/dev/null || echo "0")
        echo "$lines lines, $word_count words"
    else
        echo "File not found"
    fi
}

# Function to extract title from markdown file
get_title() {
    local file="$1"
    if [[ -f "$file" ]]; then
        grep -m1 '^# ' "$file" 2>/dev/null | sed 's/^# //' || basename "$file" .md
    else
        basename "$file" .md
    fi
}

# Function to extract description from markdown file
get_description() {
    local file="$1"
    if [[ -f "$file" ]]; then
        # Look for first paragraph after title
        awk '/^# /{flag=1; next} flag && /^[A-Za-z]/{print; exit}' "$file" 2>/dev/null || echo "No description available"
    else
        echo "No description available"
    fi
}

# Function to find cross-references
find_cross_references() {
    local file="$1"
    local basename_file
    basename_file=$(basename "$file" .md)
    
    if [[ -f "$file" ]]; then
        # Find files that reference this one
        grep -r "\[$basename_file\]" "$PROJECT_ROOT"/{doc,tmp,*.md} 2>/dev/null | \
            grep -v "$file" | \
            cut -d: -f1 | \
            sort -u | \
            head -5 || true
    fi
}

# Generate the documentation index
generate_index() {
    log "Generating documentation index..."
    
    cat > "$OUTPUT_FILE" << 'EOF'
# üìö Comprehensive Documentation Index

*Auto-generated documentation index with cross-references and metadata*

> **Last Updated**: $(date '+%Y-%m-%d %H:%M:%S')  
> **Generated By**: `bin/doc-index`  
> **Total Documents**: Calculated automatically

## üéØ Quick Navigation

### **By Audience**
- [üë®‚Äçüíª Developers](#-developer-documentation) - Technical guides and API references
- [üõ†Ô∏è System Administrators](#-system-administrator-documentation) - Operations and configuration
- [üèóÔ∏è Infrastructure Teams](#-infrastructure-as-code-documentation) - Deployment and automation
- [üì± End Users](#-command-line-interface-documentation) - User guides and interfaces

### **By Type**
- [üìñ Core Documentation](#-comprehensive-documentation) - Structured guides and manuals
- [üìã Working Documents](#-working-documentation) - Analysis and development logs
- [üîó Cross-References](#-cross-references-and-relationships) - Document relationships

---

EOF

    # Count total documents
    local total_docs
    total_docs=$(find "$PROJECT_ROOT" -name "*.md" | wc -l)
    
    # Update the total count in the file
    sed -i "s/Calculated automatically/$total_docs documents/" "$OUTPUT_FILE"
    sed -i "s/\$(date '+%Y-%m-%d %H:%M:%S')/$(date '+%Y-%m-%d %H:%M:%S')/" "$OUTPUT_FILE"
}

# Function to process documentation directory
process_doc_directory() {
    local category="$1"
    local dir="$2"
    local icon="$3"
    local description="$4"
    
    cat >> "$OUTPUT_FILE" << EOF

## $icon $category

**Purpose**: $description

EOF
    
    if [[ -d "$dir" ]]; then
        # Process README first if it exists
        if [[ -f "$dir/README.md" ]]; then
            local title desc info
            title=$(get_title "$dir/README.md")
            desc=$(get_description "$dir/README.md")
            info=$(get_file_info "$dir/README.md")
            
            cat >> "$OUTPUT_FILE" << EOF
### üìã Category Overview
- **[${title}](${dir#$PROJECT_ROOT/}/README.md)** - *($info)*
  
  $desc

### üìÑ Documents

EOF
        fi
        
        # Process all other markdown files
        find "$dir" -name "*.md" -not -name "README.md" | sort | while read -r file; do
            local title desc info rel_path
            title=$(get_title "$file")
            desc=$(get_description "$file")
            info=$(get_file_info "$file")
            rel_path="${file#$PROJECT_ROOT/}"
            
            cat >> "$OUTPUT_FILE" << EOF
#### **[$title]($rel_path)**
*($info)*

$desc

**File Location**: \`$rel_path\`

EOF
            
            # Add cross-references if found
            local refs
            refs=$(find_cross_references "$file")
            if [[ -n "$refs" ]]; then
                echo "**Referenced By**:" >> "$OUTPUT_FILE"
                echo "$refs" | while read -r ref; do
                    local ref_rel="${ref#$PROJECT_ROOT/}"
                    echo "- [\`$ref_rel\`]($ref_rel)" >> "$OUTPUT_FILE"
                done
                echo "" >> "$OUTPUT_FILE"
            fi
        done
    else
        echo "*Directory not found: $dir*" >> "$OUTPUT_FILE"
    fi
}

# Function to process working documentation
process_working_docs() {
    cat >> "$OUTPUT_FILE" << 'EOF'

## üìã Working Documentation

**Purpose**: Development logs, analysis reports, and operational documentation

EOF
    
    local subdirs=("ana:üîç:Analysis Reports and Infrastructure Studies"
                   "dev:üîß:Development Session Logs and Progress Tracking"
                   "fix:üõ†Ô∏è:Problem Resolution and Troubleshooting Guides"
                   "flo:üîÑ:Process Flows and Architectural Diagrams"
                   "how:üìã:How-To Guides and Procedures"
                   "net:üåê:Network Documentation and Configurations"
                   "pro:üìä:Project Documentation and Planning")
    
    for subdir_info in "${subdirs[@]}"; do
        IFS=':' read -r subdir icon desc <<< "$subdir_info"
        local full_path="$TMP_DIR/$subdir"
        
        if [[ -d "$full_path" ]]; then
            cat >> "$OUTPUT_FILE" << EOF

### $icon $desc (\`tmp/$subdir/\`)

EOF
            find "$full_path" -name "*.md" | sort | while read -r file; do
                local title desc info rel_path
                title=$(get_title "$file")
                desc=$(get_description "$file")
                info=$(get_file_info "$file")
                rel_path="${file#$PROJECT_ROOT/}"
                
                cat >> "$OUTPUT_FILE" << EOF
- **[$title]($rel_path)** - *($info)*
  
  $desc

EOF
            done
        fi
    done
}

# Function to generate cross-reference map
generate_cross_references() {
    cat >> "$OUTPUT_FILE" << 'EOF'

## üîó Cross-References and Relationships

This section shows how documents reference each other, helping you navigate related content.

EOF
    
    # Find documents with the most references
    log "Analyzing cross-references..."
    
    local temp_refs="/tmp/doc_refs_$$"
    find "$PROJECT_ROOT" -name "*.md" -exec grep -l '\[.*\](' {} \; > "$temp_refs" 2>/dev/null || true
    
    if [[ -s "$temp_refs" ]]; then
        cat >> "$OUTPUT_FILE" << 'EOF'
### üìä Most Referenced Documents

EOF
        
        # This is a simplified version - you could make it more sophisticated
        head -10 "$temp_refs" | while read -r file; do
            local rel_path="${file#$PROJECT_ROOT/}"
            local title
            title=$(get_title "$file")
            echo "- **[$title]($rel_path)**" >> "$OUTPUT_FILE"
        done
    fi
    
    rm -f "$temp_refs"
}

# Function to add footer
add_footer() {
    cat >> "$OUTPUT_FILE" << 'EOF'

---

## üîÑ Index Maintenance

This documentation index is automatically generated. To update:

```bash
# Regenerate the complete index
./bin/doc-index

# The index includes:
# - All markdown files in doc/ and tmp/
# - Cross-reference analysis
# - File metadata (lines, words)
# - Document relationships
```

**Navigation**: Return to [Main README](README.md) | [Documentation Hub](doc/README.md)

---

*This index was automatically generated by the Lab Environment Management System documentation tools.*
EOF
}

# Main execution
main() {
    log "Starting documentation index generation..."
    
    # Ensure output directory exists
    mkdir -p "$(dirname "$OUTPUT_FILE")"
    
    # Generate the index
    generate_index
    
    # Process main documentation categories
    process_doc_directory "Developer Documentation" "$DOC_DIR/dev" "üë®‚Äçüíª" "Technical guides, API references, and integration documentation"
    process_doc_directory "System Administrator Documentation" "$DOC_DIR/adm" "üõ†Ô∏è" "Operations, configuration, and system management guides"
    process_doc_directory "Infrastructure as Code Documentation" "$DOC_DIR/iac" "üèóÔ∏è" "Deployment patterns, automation, and infrastructure management"
    process_doc_directory "Command Line Interface Documentation" "$DOC_DIR/cli" "üì±" "User guides, command references, and interface documentation"
    
    # Process working documentation
    process_working_docs
    
    # Generate cross-references
    generate_cross_references
    
    # Add footer
    add_footer
    
    success "Documentation index generated: $OUTPUT_FILE"
    
    local total_lines
    total_lines=$(wc -l < "$OUTPUT_FILE")
    log "Generated $total_lines lines of documentation index"
}

# Execute if run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
