#!/bin/bash
#######################################################################
# Component Orchestrator
#######################################################################
# Purpose:
#   Provides functions to manage and execute a sequence of shell
#   script components during system or application initialization.
#   It handles sourcing environment/function files, executing setup
#   routines, and managing individual components with dependency
#   awareness (required vs. optional) and status tracking.
#
# Helper Functions:
#   - source_helper: Safely sources individual files.
#   - source_directory: Sources all files in a given directory.
#   - execute_component: Executes a single named component with status tracking.
#
# Component Functions (perform specific initialization tasks):
#   - source_cfg_env: Sources environment configuration files.
#   - source_lib_dep: Sources function library files.
#   - source_lib_aux: Sources auxiliary function files.
#   - source_lib_utl: Sources utility function files.
#   - source_cfg_ali: Sources alias configuration files.
#
# Main Orchestration Function:
#   - setup_components: Orchestrates the execution of all defined
#     components in the proper order with error handling.
#
# Usage:
#   This script is typically sourced by a main initialization script
#   (e.g., /home/es/lab/bin/init), and then its `setup_components`
#   function is called to perform the orchestrated setup.
#   It relies on the `lo1` module for logging and expects certain
#   environment variables like `BASE_DIR` and `ERROR_LOG` to be set,
#   and functions like `tme_start_timer`, `tme_end_timer`, `error_handler`,
#   `tme_print_timing_report`, `print_error_report` to be available.
#######################################################################

# Helper function to safely source files with improved error handling and logging
source_helper() {
    local file="$1"
    local description="${2:-$(basename "$file")}"
    local temp_dir="/tmp" # Consider making this configurable or using mktemp
    local temp_error="$temp_dir/source_error.$$"

    tme_start_timer "source_$description"

    # Verify the file exists
    if [[ ! -f "$file" ]]; then
        log "lvl" " Warning: File $description ($file) not found."
        handle_error "File not found: $file" "source_helper" "${ERROR_CODES[FILE_NOT_FOUND]}" "WARNING"
        tme_end_timer "source_$description"
        return 1
    fi

    # Verify the file is readable
    if [[ ! -r "$file" ]]; then
        log "lvl" " Warning: File $description ($file) is not readable."
        handle_error "File not readable: $file" "source_helper" "${ERROR_CODES[PERMISSION_DENIED]}" "WARNING"
        tme_end_timer "source_$description"
        return 1
    fi

    # Verify temp directory exists and is writable
    if [[ ! -d "$temp_dir" ]] || [[ ! -w "$temp_dir" ]]; then
        log "lvl" " Error: Temporary directory $temp_dir is not available or writable"
        error_handler "$LINENO" "${ERROR_CODES[PERMISSION_DENIED]}" "false"
        tme_end_timer "source_$description"
        return 1
    fi

    # Source the file and capture any errors
    if source "$file" 2>"$temp_error"; then
        log "lvl" "Successfully sourced: $description"
        tme_end_timer "source_$description" "success"
        rm -f "$temp_error"
        return 0
    else
        local error_output
        error_output=$(cat "$temp_error")
        log "lvl" "Error sourcing $description: $error_output"
        rm -f "$temp_error"
        error_handler "$LINENO" "${ERROR_CODES[SOURCE_ERROR]}" "false"
        tme_end_timer "source_$description" "error"
        return 1
    fi
}

# Function to source all files in a directory with consistent sorting and error handling
source_directory() {
    local dir="$1"
    local pattern="${2:-*}"
    local description="$3"
    local return_value=0

    tme_start_timer "dir_$description"
    log "lvl" "Sourcing $description: $dir"

    if [[ ! -d "$dir" ]]; then
        log "lvl" " Warning: Directory $dir not found. Skipping."
        tme_end_timer "dir_$description"
        return 1
    fi

    # Get all matching files in the directory
    local files=()
    while IFS= read -r -d '' file; do
        files+=("$file")
    done < <(find "$dir" -maxdepth 1 -type f -name "$pattern" -print0 | sort -z)

    if [[ ${#files[@]} -eq 0 ]]; then
        log "lvl" " Warning: No matching files found in $dir for pattern '$pattern'"
        tme_end_timer "dir_$description"
        return 1 # Or 0 if not finding files is acceptable
    fi

    # Source each file
    local success_count=0
    for file in "${files[@]}"; do
        if source_helper "$file" "$(basename "$file")"; then
            ((success_count++))
        fi
    done

    if ((success_count == 0 && ${#files[@]} > 0)); then # Only warn if files were found but none sourced
        log "lvl" " Warning: No files were successfully sourced from $dir"
        return_value=1
    else
        log "lvl" "Successfully sourced $success_count files from $dir"
        return_value=0
    fi

    tme_end_timer "dir_$description"
    return $return_value
}

# Component execution with status tracking
execute_component() {
    local func="$1"
    local component="$2"
    local required="${3:-1}"  # Default to required
    local success_var="${component}_SUCCESS"
    local return_value=0

    tme_start_timer "$component"
    log "lvl" " Executing component: $component ..."

    if ! type "$func" &>/dev/null; then
        log "lvl" " Error: Function $func not found for component $component"
        error_handler "$LINENO" "${ERROR_CODES[FUNCTION_NOT_FOUND]}" "$([[ $required -eq 0 ]] && echo true || echo false)"
        return_value=1
    elif "$func"; then
        export "$success_var=1"
        log "lvl" " Component $component completed successfully"
        return_value=0
    else
        unset "$success_var"
        local msg="Component $component failed"
        if ((required)); then
            log "lvl" " Error: $msg"
            error_handler "$LINENO" "${ERROR_CODES[EXECUTION_FAILED]}" "false"
            return_value=1
        else
            log "lvl" " Warning: $msg (optional component)"
            error_handler "$LINENO" "${ERROR_CODES[EXECUTION_FAILED]}" "true"
            return_value=0
        fi
    fi

    tme_end_timer "$component"
    return $return_value
}

# Source the environment files
source_cfg_env() {
    # Use CFG_ENV_DIR which is defined in ric
    source_directory "$CFG_ENV_DIR" "*" "environment configuration files"
    return $?
}

# Source the function files
source_lib_dep() {
    # Use LIB_OPS_DIR which is defined in ric
    source_directory "$LIB_OPS_DIR" "*" "function files"
    return $?
}

# Source the aux function files
source_lib_aux() {
    # Use LIB_AUX_DIR which is defined in ric
    source_directory "$LIB_AUX_DIR" "*" "auxiliary function files"
    return $?
}

# Source the util function files
source_lib_utl() {
    local dir_to_source="${LIB_UTL_DIR}"
    local description="utility function files"
    local pattern="*" # Or specific patterns like "*.sh"

    log "lvl" "Sourcing ${description} from ${dir_to_source}"
    if source_directory "${dir_to_source}" "${pattern}" "${description}"; then
        log "lvl" "Successfully sourced ${description}."
        return 0
    else
        log "lvl" "Failed to source ${description} from ${dir_to_source}."
        return 1
    fi
}

# Source the alias files
source_cfg_ali() {
    # Use CFG_ALI_DIR which is defined in ric
    source_directory "$CFG_ALI_DIR" "*" "alias configuration files"
    return $?
}

setup_components() {
    log "lvl" "Validating and executing component configuration..."
    log "lvl" "Initial RC_SOURCED value: ${RC_SOURCED:-unset}"
    
    # Check if required functions exist
    type tme_print_timing_report &>/dev/null || log "lvl" "WARNING: tme_print_timing_report function not found"
    type print_error_report &>/dev/null || log "lvl" "WARNING: print_error_report function not found"

    local components=(
        "source_cfg_ali:CFG_ALI:0"
        "source_cfg_env:CFG_ENV:0"

        "source_lib_aux:LIB_AUX:0"
        "source_lib_utl:LIB_UTL:0"
        "source_lib_dep:LIB_DEP:0"
    )

    log "lvl" "Executing component functions..."

    local failed_required=0
    for component_def in "${components[@]}"; do
        IFS=':' read -r func name required <<< "$component_def"
        if ! execute_component "$func" "$name" "$required"; then
            if ((required)); then
                failed_required=1
                log "lvl" " Required component $name ($func) failed. Halting further component setup."
                break
            fi
        fi
    done

    if ((failed_required)); then
        unset RC_SOURCED
        log "lvl" " RC initialization failed: required component(s) failed"
        log "lvl" " RC_SOURCED is now: ${RC_SOURCED:-unset}"
        type print_error_report &>/dev/null && print_error_report
        return 1
    else
        export RC_SOURCED=1
        log "lvl" " RC initialization completed successfully"
        log "lvl" " RC_SOURCED is now: ${RC_SOURCED:-unset}"
        type print_error_report &>/dev/null && print_error_report
        return 0
    fi
}

# Ensure this script can be sourced without executing setup_components automatically
# To use, source this file, then call setup_components if needed.
# Example:
# source /path/to/comp
# setup_components
