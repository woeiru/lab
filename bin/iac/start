#!/bin/bash

# ==============================================================================
# Script: IaC Deployment Launcher (bin/iac/start)
#
# Description:
#   This script serves as a self-sufficient frontend for executing deployment
#   scripts located in the 'src/set/' directory of the project. It provides
#   an interactive menu for selecting scripts and also allows for direct
#   invocation of these scripts and their specific tasks.
#
#   It is designed to be run from within the project structure and dynamically
#   determines the project root.
#
# ==============================================================================

# --- Configuration ---
# Determine the absolute path of the project root directory.
# This script is expected to be in 'PROJECT_ROOT/bin/iaac/start'.
SCRIPT_DIR_REAL="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR_REAL/../.." &>/dev/null && pwd)"

# Define the directory containing the target deployment scripts.
SET_SCRIPTS_DIR="$PROJECT_ROOT/src/set"

# Define the list of available deployment scripts.
# These should correspond to the executable files in the SET_SCRIPTS_DIR.
# Manually update this list if scripts are added or removed from src/set/.
AVAILABLE_SCRIPTS=("dsk" "nfs" "pbs" "pve" "smb")

# --- Helper Functions ---

# Prints a horizontal line matching the terminal width.
print_line() {
    printf '%*s
' "${COLUMNS:-$(tput cols 2>/dev/null || echo 80)}" '' | tr ' ' '-'
}

# Displays the usage information for this launcher script.
show_launcher_usage() {
    echo "IaC Deployment Launcher Usage:"
    echo "  $0 [options]"
    echo "  $0 <script_name> [script_specific_args...]"
    echo ""
    echo "This script acts as a frontend to the deployment scripts in '$PROJECT_ROOT/src/set/'."
    echo ""
    echo "Modes of Operation:"
    echo "  1. Interactive Mode (if no arguments are provided):"
    echo "     $0"
    echo "     Launches a menu to select and run a deployment script interactively."
    echo ""
    echo "  2. Direct Script Invocation:"
    echo "     $0 <script_name> [args...]"
    echo "     Invokes './src/set/<script_name>' with the given arguments."
    echo "     Examples:"
    echo "       $0 dsk -i                     # Run 'dsk' script in its interactive mode."
    echo "       $0 pve -x a_xall              # Execute 'a_xall' task in 'pve' script."
    echo "       $0 nfs                        # Show usage for the 'nfs' script."
    echo ""
    echo "Launcher Options:"
    echo "  -h, --help    Show this help message and exit."
    echo ""
    echo "Available deployment scripts to manage:"
    for scr in "${AVAILABLE_SCRIPTS[@]}"; do
        echo "  - $scr"
    done
    echo ""
    echo "To see help for a specific deployment script, typically you can run:"
    echo "  $0 <script_name>"
    echo "(This executes '$PROJECT_ROOT/src/set/<script_name>' without arguments.)"
}

# Validates if the provided script name is in the known AVAILABLE_SCRIPTS list.
# Arguments:
#   $1: script_name_to_check
# Returns:
#   0 if found, 1 if not found.
validate_script_name() {
    local script_to_check="$1"
    for scr in "${AVAILABLE_SCRIPTS[@]}"; do
        if [[ "$scr" == "$script_to_check" ]]; then
            return 0 # Found
        fi
    done
    return 1 # Not found
}

# Executes the selected deployment script.
# Arguments:
#   $1: script_name
#   $@: arguments to pass to the script (optional)
execute_deployment_script() {
    local script_name="$1"
    shift # Remove script_name from arguments list
    local script_path="$SET_SCRIPTS_DIR/$script_name"

    if [ ! -f "$script_path" ]; then
        echo "Error: Deployment script file not found: $script_path" >&2
        return 127 # Command not found
    fi

    # Check if script is executable, otherwise try with bash
    if [ ! -x "$script_path" ]; then
        echo "Warning: Script '$script_path' is not executable. Attempting to run with 'bash'." >&2
        # Ensure we are in project root for consistent relative pathing in sub-scripts
        (cd "$PROJECT_ROOT" && bash "$script_path" "$@")
        return $?
    else
        # Ensure we are in project root
        (cd "$PROJECT_ROOT" && "$script_path" "$@")
        return $?
    fi
}

# --- Main Interactive Menu Function ---
# This menu is shown when the script is called without arguments.
interactive_main_menu() {
    while true; do
        clear
        echo "IaC Deployment Script Launcher"
        print_line
        echo "Please select a deployment script to manage:"
        local i=1
        for script_name_menu in "${AVAILABLE_SCRIPTS[@]}"; do
            echo "  $i. $script_name_menu"
            i=$((i + 1))
        done
        echo ""
        echo "  o. Options / Help for this launcher"
        echo "  q. Quit"
        print_line

        local choice
        read -r -p "Enter your choice (number, o, or q): " choice

        if [[ "$choice" =~ ^[0-9]+$ ]]; then
            if (( choice >= 1 && choice <= ${#AVAILABLE_SCRIPTS[@]} )); then
                local selected_script_name="${AVAILABLE_SCRIPTS[$((choice - 1))]}"
                echo ""
                echo "You selected: $selected_script_name"
                echo "This script will now be launched in its own interactive mode (-i)."
                echo "Press Enter to continue or Ctrl+C to cancel..."
                read -r
                print_line
                execute_deployment_script "$selected_script_name" "-i"
                local exit_code=$?
                print_line
                echo "Script '$selected_script_name' finished with exit code $exit_code."
                echo "Press Enter to return to the main menu."
                read -r
            else
                echo "Invalid choice. Please enter a number from the list." >&2
                sleep 2
            fi
        elif [[ "$choice" == "o" || "$choice" == "O" ]]; then
            clear
            show_launcher_usage
            echo ""
            echo "Press Enter to return to the main menu."
            read -r
        elif [[ "$choice" == "q" || "$choice" == "Q" ]]; then
            echo "Exiting IaC Deployment Launcher."
            break
        else
            echo "Invalid input. Please enter a number, 'o', or 'q'." >&2
            sleep 2
        fi
    done
}

# --- Main Script Logic ---

# Preliminary checks
if [ -z "$PROJECT_ROOT" ] || [ ! -d "$PROJECT_ROOT" ]; then
    echo "Error: Could not determine a valid project root directory." >&2
    echo "Attempted to set PROJECT_ROOT to: '$PROJECT_ROOT_DERIVED_DEBUG'" >&2 # Use a different var for debug if needed
    exit 1
fi

if [ ! -d "$SET_SCRIPTS_DIR" ]; then
    echo "Error: Deployment scripts directory not found at: $SET_SCRIPTS_DIR" >&2
    exit 1
fi

# Handle command-line arguments
if [ $# -eq 0 ]; then
    # No arguments: Launch the interactive main menu.
    interactive_main_menu
    exit 0
fi

# Process options for this launcher script first.
case "$1" in
    -h|--help)
        show_launcher_usage
        exit 0
        ;;
    *)
        # Not a launcher option, assume first argument is a script_name.
        SCRIPT_NAME_ARG="$1"
        # Remaining arguments ($@ after shift) are for the target script.

        if ! validate_script_name "$SCRIPT_NAME_ARG"; then
            echo "Error: Unknown deployment script '$SCRIPT_NAME_ARG'." >&2
            echo "Available scripts are: ${AVAILABLE_SCRIPTS[*]}"
            echo ""
            show_launcher_usage
            exit 127 # Command not found like error
        fi
        
        # Pass all arguments (original $1, $2, ...) to the sub-script.
        # The sub-script itself will parse its arguments (e.g. -i, -x task).
        execute_deployment_script "$@"
        exit $?
        ;;
esac

exit 0
