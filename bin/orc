#!/bin/bash
# Only enable strict error handling in non-interactive shells to prevent terminal crashes
if [[ ! -t 0 || "${-}" != *i* ]]; then
    set -eo pipefail  # Exit on error and pipe failures, but allow unbound variables for compatibility
else
    # In interactive shells, use a more lenient error handling approach
    set -o pipefail  # Still catch pipe failures, but don't exit on errors
fi

#######################################################################
# Component Orchestrator
#######################################################################
# Constants
readonly COMPONENT_REQUIRED=1
readonly COMPONENT_OPTIONAL=0
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Cleanup function for trap
cleanup() {
    local exit_code=$?
    # Clean up any temporary files if they exist
    [[ -n "${TEMP_ERROR_FILE:-}" ]] && rm -f "$TEMP_ERROR_FILE"
    exit $exit_code
}

# Set up cleanup trap
trap cleanup EXIT INT TERM
#######################################################################
# Purpose:
#   Provides functions to manage and execute a sequence of shell
#   script components during system or application initialization.
#   It handles sourcing environment/function files, executing setup
#   routines, and managing individual components with dependency
#   awareness (required vs. optional) and status tracking.
#
# Helper Functions:
#   - source_helper: Safely sources individual files.
#   - source_directory: Sources all files in a given directory.
#   - execute_component: Executes a single named component with status tracking.
#
# Component Functions (perform specific initialization tasks):
#
#   Configuration (cfg):
#     - source_cfg_env: Sources environment configuration files.
#     - source_cfg_ecc: Sources environment controller configuration.
#     - source_cfg_ali: Sources alias configuration files.
#
#   Libraries (lib):
#     - source_lib_ops: Sources operational function library files.
#     - source_src_aux: Sources auxiliary framework files.
#     - source_lib_gen: Sources general utility function files.
#
# Main Orchestration Function:
#   - setup_components: Orchestrates the execution of all defined
#     components in the proper order with error handling.
#
# Usage:
#   This script is typically sourced by a main initialization script
#   (e.g., /home/es/lab/bin/ini), and then its `setup_components`
#   function is called to perform the orchestrated setup.
#   It relies on the `lo1` module for logging and expects certain
#   environment variables like `BASE_DIR` and `ERROR_LOG` to be set,
#   and functions like `tme_start_timer`, `tme_end_timer`, `error_handler`,
#   `tme_print_timing_report`, `print_error_report` to be available.
#
# Dependencies:
#   Required files in cfg/core/:
#   - ric (Runtime initialization constants - provides directory paths)
#   - ecc (Environment controller configuration)
#   Required modules in lib/core/:
#   - lo1 (Logging functions)
#   - tme (Timing functions)
#   - err (Error handling functions)
#   Required directory variables from ric:
#   - LIB_OPS_DIR (Operational function library path)
#   - SRC_AUX_DIR (Auxiliary helper function library path)
#   - LIB_GEN_DIR (General utility function library path)
#   - CFG_ALI_DIR (Alias configuration directory path)
#   - SRC_MGT_DIR (Management wrapper functions directory path)
#   - LAB_DIR (Base lab directory path)
#   - SITE_CONFIG_FILE, ENV_OVERRIDE_FILE, NODE_OVERRIDE_FILE (Environment config paths)
#######################################################################

# Validate required global variables
validate_required_globals() {
    local required_vars=(
        "BASE_DIR" "LAB_DIR" "LIB_OPS_DIR" "SRC_AUX_DIR"
        "LIB_GEN_DIR" "CFG_ALI_DIR" "SRC_MGT_DIR"
        "SITE_CONFIG_FILE" "ENV_OVERRIDE_FILE" "NODE_OVERRIDE_FILE"
    )
    
    # Optional variables that may not be set initially
    local optional_vars=(
        "ERROR_CODES"
    )
    
    local missing_vars=()
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            missing_vars+=("$var")
        fi
    done
    
    # Check optional variables and warn if missing
    for var in "${optional_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            lo1_log "lvl" "Warning: Optional variable $var not set (may be loaded later)"
        fi
    done
    
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        echo "Error: Required variables not set: ${missing_vars[*]}" >&2
        return 1
    fi
    
    return 0
}

# Helper function to safely source files with improved error handling and logging
source_helper() {
    local file="$1"
    local description="${2:-$(basename "$file")}"
    
    # Input validation
    if [[ -z "$file" ]]; then
        lo1_log "lvl" " Error: No file specified for source_helper"
        return 1
    fi

    tme_start_timer "source_$description"

    # Verify the file exists
    if [[ ! -f "$file" ]]; then
        lo1_log "lvl" " Warning: File $description ($file) not found."
        handle_error "File not found: $file" "source_helper" "${ERROR_CODES[FILE_NOT_FOUND]}" "WARNING"
        tme_end_timer "source_$description"
        return 1
    fi

    # Verify the file is readable
    if [[ ! -r "$file" ]]; then
        lo1_log "lvl" " Warning: File $description ($file) is not readable."
        handle_error "File not readable: $file" "source_helper" "${ERROR_CODES[PERMISSION_DENIED]}" "WARNING"
        tme_end_timer "source_$description"
        return 1
    fi

    # Create secure temporary file
    local temp_error
    if ! temp_error=$(mktemp); then
        lo1_log "lvl" " Error: Failed to create temporary file for error capture"
        error_handler "$LINENO" "${ERROR_CODES[PERMISSION_DENIED]}" "false"
        tme_end_timer "source_$description"
        return 1
    fi
    
    # Store for cleanup
    TEMP_ERROR_FILE="$temp_error"

    # Source the file and capture any errors
    if source "$file" 2>"$temp_error"; then
        lo1_log "lvl" "Successfully sourced: $description"
        tme_end_timer "source_$description" "success"
        rm -f "$temp_error"
        unset TEMP_ERROR_FILE
        return 0
    else
        local error_output
        error_output=$(cat "$temp_error" 2>/dev/null || echo "Failed to read error output")
        lo1_log "lvl" "Error sourcing $description: $error_output"
        rm -f "$temp_error"
        unset TEMP_ERROR_FILE
        error_handler "$LINENO" "${ERROR_CODES[SOURCE_ERROR]}" "false"
        tme_end_timer "source_$description" "error"
        return 1
    fi
}

# Function to source all files in a directory with consistent sorting and error handling
source_directory() {
    local dir="$1"
    local pattern="${2:-*}"
    local description="$3"
    
    # Input validation
    if [[ -z "$dir" ]]; then
        lo1_log "lvl" " Error: No directory specified for source_directory"
        return 1
    fi
    
    if [[ -z "$description" ]]; then
        description="files from $dir"
    fi

    tme_start_timer "dir_$description"
    lo1_log "lvl" "Sourcing $description: $dir"

    if [[ ! -d "$dir" ]]; then
        lo1_log "lvl" " Warning: Directory $dir not found. Skipping."
        tme_end_timer "dir_$description"
        return 1
    fi

    # Check if directory is readable
    if [[ ! -r "$dir" ]]; then
        lo1_log "lvl" " Error: Directory $dir is not readable"
        tme_end_timer "dir_$description"
        return 1
    fi

    # Process files directly without building array for better performance
    local success_count=0
    local total_count=0
    local temp_file_list
    
    if ! temp_file_list=$(mktemp); then
        lo1_log "lvl" " Error: Failed to create temporary file for file listing"
        tme_end_timer "dir_$description"
        return 1
    fi

    # Get sorted list of files
    if ! find "$dir" -maxdepth 1 -type f -name "$pattern" -print0 | sort -z > "$temp_file_list"; then
        lo1_log "lvl" " Error: Failed to list files in $dir"
        rm -f "$temp_file_list"
        tme_end_timer "dir_$description"
        return 1
    fi

    # Process each file
    while IFS= read -r -d '' file; do
        ((total_count++))
        if source_helper "$file" "$(basename "$file")"; then
            ((success_count++))
        fi
    done < "$temp_file_list"

    rm -f "$temp_file_list"

    if ((total_count == 0)); then
        lo1_log "lvl" " Warning: No matching files found in $dir for pattern '$pattern'"
        tme_end_timer "dir_$description"
        return 1
    elif ((success_count == 0)); then
        lo1_log "lvl" " Warning: No files were successfully sourced from $dir (0/$total_count)"
        tme_end_timer "dir_$description"
        return 1
    else
        lo1_log "lvl" "Successfully sourced $success_count/$total_count files from $dir"
        tme_end_timer "dir_$description"
        return 0
    fi
}

# Component execution with status tracking
execute_component() {
    local func="$1"
    local component="$2"
    local required="${3:-$COMPONENT_REQUIRED}"  # Default to required
    local success_var="${component}_SUCCESS"
    
    # Input validation
    if [[ -z "$func" ]]; then
        lo1_log "lvl" " Error: No function specified for execute_component"
        return 1
    fi
    
    if [[ -z "$component" ]]; then
        lo1_log "lvl" " Error: No component name specified for execute_component"
        return 1
    fi

    tme_start_timer "$component"
    lo1_log "lvl" " Executing component: $component ..."

    if ! type "$func" &>/dev/null; then
        lo1_log "lvl" " Error: Function $func not found for component $component"
        local continue_on_error="$([[ $required -eq $COMPONENT_OPTIONAL ]] && echo true || echo false)"
        error_handler "$LINENO" "${ERROR_CODES[FUNCTION_NOT_FOUND]}" "$continue_on_error"
        tme_end_timer "$component"
        return 1
    elif "$func"; then
        export "$success_var=1"
        lo1_log "lvl" " Component $component completed successfully"
        tme_end_timer "$component"
        return 0
    else
        unset "$success_var"
        local msg="Component $component failed"
        if ((required == COMPONENT_REQUIRED)); then
            lo1_log "lvl" " Error: $msg"
            error_handler "$LINENO" "${ERROR_CODES[EXECUTION_FAILED]}" "false"
            tme_end_timer "$component"
            return 1
        else
            lo1_log "lvl" " Warning: $msg (optional component)"
            error_handler "$LINENO" "${ERROR_CODES[EXECUTION_FAILED]}" "true"
            tme_end_timer "$component"
            return 0
        fi
    fi
}

#######################################################################
# LIBRARY STRUCTURE ANALYSIS AND LOADING FUNCTIONS
#######################################################################
#
# The lab environment uses a structured library hierarchy designed for
# maintainable and scalable system initialization:
#
# /home/es/lab/lib/
# ├── aux/           - Auxiliary helper functions (lib, src)
# │                   Support utilities for development, analysis, and debugging
# │                   including function introspection and variable analysis
# ├── core/          - Core system functions (err, lo1, tme, ver)
# │                   Essential utilities loaded early for error handling,
# │                   logging, timing, and version management
# ├── ops/           - Operational service functions (gpu, net, pbs, pve, srv, sto, sys, usr)
# │                   Domain-specific operational functions for system management,
# │                   infrastructure services, and hardware operations
# └── utl/           - Specialized utility functions (env, inf, sec, ssh)
#                     High-level specialized tools for infrastructure management,
#                     security operations, and environment configuration
#
# LOADING ORDER RATIONALE:
# 1. core/           - Foundational functions (logging, timing, error handling)
# 2. ops/            - Core operational functions that depend on foundation
# 3. utl/            - Specialized utilities that may use core/ops functions
# 4. aux/            - Helper functions that can use all other libraries
#
# DEPENDENCY MAPPING:
# - core/ dependencies: None (foundational)
# - ops/ dependencies: core/ (uses logging, error handling)
# - utl/ dependencies: core/, potentially ops/ (inf/sec may use sys functions)
# - aux/ dependencies: All above (analysis tools need access to everything)
#######################################################################

# Source the core operational function files (ops/ directory)
# Contains: gpu, net, pbs, pve, srv, sto, sys, usr
# Purpose: Domain-specific operational functions for system and service management
source_lib_ops() {
    # Validate LIB_OPS_DIR is set
    if [[ -z "${LIB_OPS_DIR:-}" ]]; then
        lo1_log "lvl" "Error: LIB_OPS_DIR not set, cannot source operational function files"
        return 1
    fi
    
    source_directory "$LIB_OPS_DIR" "*" "operational function files"
    return $?
}

# Source the auxiliary helper function files (aux/ directory)
# Contains: lib, src
# Purpose: Development and analysis utilities, function introspection tools
source_src_aux() {
    # Validate SRC_AUX_DIR is set
    if [[ -z "${SRC_AUX_DIR:-}" ]]; then
        lo1_log "lvl" "Error: SRC_AUX_DIR not set, cannot source auxiliary framework files"
        return 1
    fi

    source_directory "$SRC_AUX_DIR" "*" "auxiliary framework files"
    return $?
}

# Initialize password management if needed and available
init_password_management_if_needed() {
    if ! type init_password_management_auto &>/dev/null; then
        lo1_log "lvl" "Note: Password management functions not available (sec utilities may not be loaded)"
        return 0
    fi
    
    # Check if password management has already been initialized
    local password_dirs=(
        "/tmp/lab_passwords"
        "/home/es/.lab/passwords"
        "/etc/lab/passwords"
        "/var/lib/lab/passwords"
    )
    
    for dir in "${password_dirs[@]}"; do
        if [[ -f "${dir}/ct_pbs.pwd" ]]; then
            lo1_log "lvl" "Password management already initialized in ${dir}"
            return 0
        fi
    done
    
    lo1_log "lvl" "Initializing secure password management system..."
    if init_password_management_auto; then
        lo1_log "lvl" "Password management system initialized successfully"
        return 0
    else
        lo1_log "lvl" "Warning: Failed to initialize password management system"
        return 1
    fi
}

# Source the specialized utility function files (utl/ directory)
# Contains: env, inf, sec, ssh
# Purpose: High-level specialized tools for infrastructure and security management
source_lib_gen() {
    local dir_to_source="${LIB_GEN_DIR}"
    local description="general utility function files"
    local pattern="*"

    lo1_log "lvl" "Sourcing ${description} from ${dir_to_source}"
    if source_directory "${dir_to_source}" "${pattern}" "${description}"; then
        lo1_log "lvl" "Successfully sourced ${description}."
        
        # Post-loading initialization for specialized utilities
        init_password_management_if_needed
        
        return 0
    else
        lo1_log "lvl" "Failed to source ${description} from ${dir_to_source}."
        return 1
    fi
}

# Source the environment controller configuration
source_cfg_ecc() {
    # Validate LAB_DIR is set
    if [[ -z "${LAB_DIR:-}" ]]; then
        lo1_log "lvl" "Error: LAB_DIR not set, cannot locate environment controller"
        return 1
    fi
    
    local ecc_file="${LAB_DIR}/cfg/core/ecc"
    
    tme_start_timer "cfg_ecc"
    lo1_log "lvl" "Loading environment controller from: ${ecc_file}"
    
    if [[ -f "${ecc_file}" ]]; then
        if source_helper "${ecc_file}" "environment controller"; then
            lo1_log "lvl" "Successfully loaded environment controller"
            lo1_log "lvl" "Active configuration: Site=${SITE_NAME:-unset}, Env=${ENVIRONMENT_NAME:-unset}, Node=${NODE_NAME:-unset}"
            tme_end_timer "cfg_ecc"
            return 0
        else
            lo1_log "lvl" "Failed to load environment controller"
            tme_end_timer "cfg_ecc"
            return 1
        fi
    else
        lo1_log "lvl" "Warning: Environment controller file not found: ${ecc_file}"
        tme_end_timer "cfg_ecc"
        return 1
    fi
}

# Source the environment configuration files with override support
source_cfg_env() {
    local return_value=0
    
    # Validate required variables
    local required_vars=("SITE_CONFIG_FILE" "ENV_OVERRIDE_FILE" "NODE_OVERRIDE_FILE" "SITE_NAME" "ENVIRONMENT_NAME" "NODE_NAME")
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            lo1_log "lvl" "Error: Required variable $var not set for environment configuration"
            return 1
        fi
    done
    
    tme_start_timer "cfg_env"
    lo1_log "lvl" "Loading environment configuration..."
    lo1_log "lvl" "Site: ${SITE_NAME}, Environment: ${ENVIRONMENT_NAME}, Node: ${NODE_NAME}"
    
    # Load base site configuration (required)
    if [[ -f "${SITE_CONFIG_FILE}" ]]; then
        if source_helper "${SITE_CONFIG_FILE}" "base site config (${SITE_NAME})"; then
            lo1_log "lvl" "Successfully loaded base site configuration"
        else
            lo1_log "lvl" "Error: Failed to load base site configuration"
            tme_end_timer "cfg_env"
            return 1
        fi
    else
        lo1_log "lvl" "Error: Base site config file not found: ${SITE_CONFIG_FILE}"
        tme_end_timer "cfg_env"
        return 1
    fi
    
    # Load environment-specific overrides (optional)
    if [[ -f "${ENV_OVERRIDE_FILE}" ]]; then
        if source_helper "${ENV_OVERRIDE_FILE}" "environment overrides (${ENVIRONMENT_NAME})"; then
            lo1_log "lvl" "Successfully loaded environment overrides"
        else
            lo1_log "lvl" "Warning: Failed to load environment overrides"
            # Don't fail for optional overrides
        fi
    else
        lo1_log "lvl" "No environment override file found: ${ENV_OVERRIDE_FILE}"
    fi
    
    # Load node-specific overrides (optional)
    if [[ -f "${NODE_OVERRIDE_FILE}" ]]; then
        if source_helper "${NODE_OVERRIDE_FILE}" "node overrides (${NODE_NAME})"; then
            lo1_log "lvl" "Successfully loaded node overrides"
        else
            lo1_log "lvl" "Warning: Failed to load node overrides"
            # Don't fail for optional overrides
        fi
    else
        lo1_log "lvl" "No node override file found: ${NODE_OVERRIDE_FILE}"
    fi
    
    tme_end_timer "cfg_env"
    return $return_value
}

# Source the alias files
source_cfg_ali() {
    # Validate CFG_ALI_DIR is set
    if [[ -z "${CFG_ALI_DIR:-}" ]]; then
        lo1_log "lvl" "Error: CFG_ALI_DIR not set, cannot source alias configuration files"
        return 1
    fi
    
    source_directory "$CFG_ALI_DIR" "*" "alias configuration files"
    return $?
}

# Source the management wrapper function files (src/mgt/ directory)
# Contains: Management wrapper functions that handle global variable extraction
# Purpose: Wrapper functions with -w suffix that call parameterized lib/ops functions
source_src_mgt() {
    local src_mgt_dir
    
    # Use SRC_MGT_DIR which should be defined in ric
    if [[ -z "${SRC_MGT_DIR:-}" ]]; then
        if [[ -z "${BASE_DIR:-}" ]]; then
            lo1_log "lvl" "Error: Neither SRC_MGT_DIR nor BASE_DIR is defined"
            return 1
        fi
        lo1_log "lvl" "Warning: SRC_MGT_DIR not defined, using default path"
        src_mgt_dir="${BASE_DIR}/src/mgt"
    else
        src_mgt_dir="$SRC_MGT_DIR"
    fi
    
    # Validate the directory exists before attempting to source
    if [[ ! -d "$src_mgt_dir" ]]; then
        lo1_log "lvl" "Warning: Management wrapper directory not found: $src_mgt_dir"
        return 1
    fi
    
    source_directory "$src_mgt_dir" "*" "management wrapper function files"
    return $?
}

setup_components() {
    lo1_log "lvl" "Validating and executing component configuration..."
    lo1_log "lvl" "Initial RC_SOURCED value: ${RC_SOURCED:-unset}"
    
    # Validate required globals first
    if ! validate_required_globals; then
        lo1_log "lvl" "Error: Required global variables validation failed"
        return 1
    fi
    
    # Cache function existence checks (done once at start)
    local has_timing_report=false
    local has_error_report=false
    
    if type tme_print_timing_report &>/dev/null; then
        has_timing_report=true
    else
        lo1_log "lvl" "Warning: tme_print_timing_report function not found"
    fi
    
    if type print_error_report &>/dev/null; then
        has_error_report=true
    else
        lo1_log "lvl" "Warning: print_error_report function not found"
    fi

    # Component definitions: function:name:required_flag
    local components=(
        "source_cfg_ecc:CFG_ECC:$COMPONENT_OPTIONAL"
        "source_cfg_ali:CFG_ALI:$COMPONENT_OPTIONAL"
        "source_lib_ops:LIB_OPS:$COMPONENT_OPTIONAL"
        "source_lib_gen:LIB_UTL:$COMPONENT_OPTIONAL"
        "source_cfg_env:CFG_ENV:$COMPONENT_OPTIONAL"
        "source_src_aux:SRC_AUX:$COMPONENT_OPTIONAL"
        "source_src_mgt:SRC_MGT:$COMPONENT_OPTIONAL"
    )

    lo1_log "lvl" "Executing component functions..."

    local failed_required=0
    local successful_components=0
    local total_components=${#components[@]}
    
    for component_def in "${components[@]}"; do
        IFS=':' read -r func name required <<< "$component_def"
        
        if execute_component "$func" "$name" "$required"; then
            ((successful_components++))
        elif ((required == COMPONENT_REQUIRED)); then
            failed_required=1
            lo1_log "lvl" " Required component $name ($func) failed. Halting further component setup."
            break
        fi
    done

    lo1_log "lvl" "Component execution summary: $successful_components/$total_components components loaded successfully"

    if ((failed_required)); then
        unset RC_SOURCED
        lo1_log "lvl" " RC initialization failed: required component(s) failed"
        lo1_log "lvl" " RC_SOURCED is now: ${RC_SOURCED:-unset}"
        [[ "$has_error_report" == "true" ]] && print_error_report
        return 1
    else
        export RC_SOURCED=1
        lo1_log "lvl" " RC initialization completed successfully"
        lo1_log "lvl" " RC_SOURCED is now: ${RC_SOURCED:-unset}"
        [[ "$has_error_report" == "true" ]] && print_error_report
        return 0
    fi
}

# Ensure this script can be sourced without executing setup_components automatically
# To use, source this file, then call setup_components if needed.
# Example:
# source /path/to/comp
# setup_components
