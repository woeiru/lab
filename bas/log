#!/bin/bash

# Store log state and levels in persistent files
LOG_STATE_FILE="/tmp/rc_log_state"
LOG_LEVELS_FILE="/tmp/rc_log_levels"
ERROR_LOG="/tmp/rc_error.log"

# Initialize log state if file doesn't exist
if [[ ! -f "$LOG_STATE_FILE" ]]; then
    echo "true" > "$LOG_STATE_FILE"
fi

# Initialize log levels if file doesn't exist (now including level 9 for errors)
if [[ ! -f "$LOG_LEVELS_FILE" ]]; then
    echo "1 1 1 1 1 1 1 1 1" > "$LOG_LEVELS_FILE"
fi

# Read the current log state and levels
LOG_TOGGLE=$(cat "$LOG_STATE_FILE")
read -r -a LOG_LEVELS <<< "$(cat "$LOG_LEVELS_FILE")"

# Color codes
RED='\033[0;31m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
INDIGO='\033[0;35m'
VIOLET='\033[1;35m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Enhanced logging function with error support
log() {
    # First check LOG_TOGGLE from the state file
    local current_state=$(cat "$LOG_STATE_FILE")
    [[ "${current_state}" != "true" ]] && return 0

    # Read current levels
    local -a current_levels
    read -r -a current_levels <<< "$(cat "$LOG_LEVELS_FILE")"

    local level=$1
    local message=$2
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    local level_num=${level#lvl-}
    local indent=""
    local color=""

    # Set color based on level
    case $level in
        "lvl-1") color=$RED ;;
        "lvl-2") color=$ORANGE ;;
        "lvl-3") color=$YELLOW ;;
        "lvl-4") color=$GREEN ;;
        "lvl-5") color=$CYAN ;;
        "lvl-6") color=$BLUE ;;
        "lvl-7") color=$INDIGO ;;
        "lvl-8") color=$VIOLET ;;
        "lvl-9") color=$WHITE ;; # Error level
        *) color=$NC ;;
    esac

    # Create indentation and colored indicator
    if [ $level_num -eq 1 ]; then
        indent="${color}    └─${NC}"
    elif [ $level_num -eq 9 ]; then
        indent="                  ${color}█─${NC}" # Thick line for errors
    else
        indent="      ${color}└─${NC}"
        for i in $(seq 3 $level_num); do
            indent="  $indent"
        done
    fi

    # Format the log message
    local formatted_message
    if [ $level_num -eq 9 ]; then
        formatted_message="$(date '+%Y%m%d%H%M%S') - $message"
        echo -e "${indent}$level $formatted_message" | tee -a "$ERROR_LOG" >&2
    else
        if [[ ${current_levels[$((level_num-1))]} -eq 1 ]]; then
            if [ $level_num -eq 1 ]; then
                echo -e "${indent}$level $message" >&2
            else
                echo -e "${indent}$level $message"
            fi
        fi
    fi
}

# Error handler function that uses the log function
error_handler() {
    local exit_code=$?
    local command="$BASH_COMMAND"
    local line_number="$1"
    local source_file="${BASH_SOURCE[1]:-${0:-$command}}"
    source_file="${source_file:-"<unknown-source>"}"

    log "lvl-9" "Error in $source_file on line $line_number: Command '$command' exited with status $exit_code"
}

# Function to ensure clean exit from the script
clean_exit() {
    local exit_code=${1:-0}
    trap - ERR
    trap - EXIT
    exit $exit_code
}

# Set up error handling
setup_error_handling() {
    trap 'error_handler $LINENO' ERR
}

# Function to set up logging with persistent state and levels
setlog() {
    local arg=$1

    case "$arg" in
        "off")
            echo "false" > "$LOG_STATE_FILE"
            export LOG_TOGGLE="false"
            log "lvl-1" "Logging has been disabled"
            return 0
            ;;
        "on")
            echo "true" > "$LOG_STATE_FILE"
            export LOG_TOGGLE="true"
            echo "1 1 1 1 1 1 1 1 1" > "$LOG_LEVELS_FILE"
            read -r -a LOG_LEVELS <<< "$(cat "$LOG_LEVELS_FILE")"
            export LOG_LEVELS
            log "lvl-1" "Logging has been enabled with all levels active"
            return 0
            ;;
        *)
            if [[ "$(cat "$LOG_STATE_FILE")" != "true" ]]; then
                log "lvl-1" "Logging is currently disabled. Use 'setlog on' to enable logging first."
                return 1
            fi

            local range=$arg
            local start end
            if [[ $range =~ ^([1-9])-([1-9])$ ]]; then
                start=${BASH_REMATCH[1]}
                end=${BASH_REMATCH[2]}

                if [[ $start -gt $end ]]; then
                    log "lvl-1" "Invalid range: start ($start) cannot be greater than end ($end)"
                    return 1
                fi
            else
                echo "└─Invalid input. Usage:"
                echo "   setlog on|off            - Enable or disable logging"
                echo "   setlog <start>-<end>     - Set logging levels (e.g., '1-3' or '2-5')"
                return 1
            fi

            local -a new_levels=(0 0 0 0 0 0 0 0 0)

            for ((i=start-1; i<=end-1; i++)); do
                new_levels[$i]=1
            done

            log "lvl-1" "${new_levels[*]}" > "$LOG_LEVELS_FILE"
            LOG_LEVELS=("${new_levels[@]}")
            export LOG_LEVELS

            log "lvl-1" "Logging levels updated to: ${new_levels[*]}"
            ;;
    esac
}

# Utility functions
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

source_if_exists() {
    if [ -f "$1" ]; then
        source "$1"
        log "lvl-3" "Sourced file: $1"
    else
        log "lvl-1" "File not found: $1"
    fi
}

# Export functions and variables
export -f log
export -f setlog
export -f command_exists
export -f source_if_exists
export -f error_handler
export -f setup_error_handling
export -f clean_exit
export LOG_LEVELS
export LOG_TOGGLE
