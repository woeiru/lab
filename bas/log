#!/bin/bash

# Define log directory
LOG_DIR="/var/log/rc"
[[ ! -d "$LOG_DIR" ]] && mkdir -p "$LOG_DIR" 2>/dev/null || LOG_DIR="/tmp"

# Store log state and levels in persistent files with proper paths
LOG_STATE_FILE="${LOG_DIR}/rc_log_state"
LOG_LEVEL_FILE="${LOG_DIR}/rc_log_level"  # Changed from LOG_LEVELS_FILE
ERROR_LOG="${LOG_DIR}/rc_error.log"

# Initialize log state if file doesn't exist
if [[ ! -f "$LOG_STATE_FILE" ]]; then
    echo "true" > "$LOG_STATE_FILE" 2>/dev/null || {
        # Fallback to temp directory if can't write to LOG_DIR
        LOG_DIR="/tmp"
        LOG_STATE_FILE="${LOG_DIR}/rc_log_state"
        LOG_LEVEL_FILE="${LOG_DIR}/rc_log_level"
        ERROR_LOG="${LOG_DIR}/rc_error.log"
        echo "true" > "$LOG_STATE_FILE"
    }
fi

# Initialize log level if file doesn't exist (9 is maximum level)
if [[ ! -f "$LOG_LEVEL_FILE" ]]; then
    echo "9" > "$LOG_LEVEL_FILE"
fi

# Read the current log state and level
LOG_TOGGLE=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
LOG_LEVEL=$(cat "$LOG_LEVEL_FILE" 2>/dev/null || echo "9")

# Color codes
RED='\033[0;31m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
INDIGO='\033[0;35m'
VIOLET='\033[1;35m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Modified logging function that uses single level number
log() {
    # First check LOG_TOGGLE from the state file
    local current_state
    current_state=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
    [[ "${current_state}" != "true" ]] && return 0

    # Read current level ceiling
    local current_level
    current_level=$(cat "$LOG_LEVEL_FILE" 2>/dev/null || echo "9")

    local level=$1
    local message=$2
    local level_num=${level#lvl-}
    local indent=""
    local color=""

    # Set color based on level
    case $level in
        "lvl-1") color=$RED ;;
        "lvl-2") color=$ORANGE ;;
        "lvl-3") color=$YELLOW ;;
        "lvl-4") color=$GREEN ;;
        "lvl-5") color=$CYAN ;;
        "lvl-6") color=$BLUE ;;
        "lvl-7") color=$INDIGO ;;
        "lvl-8") color=$VIOLET ;;
        "lvl-9") color=$WHITE ;; # Error level
        *) color=$NC ;;
    esac

    # Create indentation and colored indicator
    if [ $level_num -eq 1 ]; then
        indent="${color}    └─${NC}"
    elif [ $level_num -eq 9 ]; then
        indent="                  ${color}█─${NC}" # Thick line for errors
    else
        indent="      ${color}└─${NC}"
        for ((i=3; i<=$level_num; i++)); do
            indent="  $indent"
        done
    fi

    # Format the log message
    if [ $level_num -eq 9 ]; then
        # Always show error messages (level 9)
        local formatted_message="$(date '+%Y%m%d%H%M%S') - $message"
        echo -e "${indent}$formatted_message" | tee -a "$ERROR_LOG" >&2
    else
        # Only show message if level is within current ceiling
        if [ $level_num -le $current_level ]; then
            if [ $level_num -eq 1 ]; then
                echo -e "${indent}$message" >&2
            else
                echo -e "${indent}$message"
            fi
        fi
    fi
}

# Simplified setlog function that uses a single number
setlog() {
    local arg=$1

    case "$arg" in
        "off")
            echo "false" > "$LOG_STATE_FILE"
            export LOG_TOGGLE="false"
            log "lvl-1" "Logging has been disabled"
            return 0
            ;;
        "on")
            echo "true" > "$LOG_STATE_FILE"
            echo "9" > "$LOG_LEVEL_FILE"
            export LOG_TOGGLE="true"
            export LOG_LEVEL="9"
            log "lvl-1" "Logging has been enabled with maximum level"
            return 0
            ;;
        *)
            if [[ "$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "false")" != "true" ]]; then
                log "lvl-1" "Logging is currently disabled. Use 'setlog on' to enable logging first."
                return 1
            fi

            if [[ $arg =~ ^[1-9]$ ]]; then
                echo "$arg" > "$LOG_LEVEL_FILE"
                export LOG_LEVEL="$arg"
                log "lvl-1" "Logging level set to $arg"
            else
                echo "└─Invalid input. Usage:"
                echo "   setlog on|off    - Enable or disable logging"
                echo "   setlog <number>  - Set maximum log level (1-9)"
                return 1
            fi
            ;;
    esac
}

# Export functions and variables
export -f log
export -f setlog
export LOG_TOGGLE
export LOG_LEVEL
export LOG_STATE_FILE
export LOG_LEVEL_FILE
export ERROR_LOG
