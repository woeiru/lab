#!/bin/bash

# File: /root/lab/bas/bug
#
# Debug and validation system for RC framework
# ------------------------------------------
#
# USAGE:
#   Normal startup:
#     ./start.sh
#
#   Enable debugging:
#     BUG_ENABLED=true ./start.sh
#
#   Debug with no fallback paths:
#     BUG_ENABLED=true BUG_FALLBACK=false ./start.sh
#
#   Debug with path validation disabled:
#     BUG_ENABLED=true BUG_VALIDATE=false ./start.sh
#
# DEBUG OUTPUT:
#   All debug messages are written to: /tmp/rc_bug.log
#   View live debug output with: tail -f /tmp/rc_bug.log
#
# ADDING DIRECTORIES:
#   To add a new directory to be tracked/validated, simply add
#   its name to the BUG_DIRS array below. The system will automatically:
#   - Create a variable named <DIRNAME>_DIR
#   - Export the variable
#   - Include it in validation
#   - Include it in debug output
#
# Example:
#   If BUG_DIRS=("bas" "com" "new")
#   Creates: BAS_DIR, COM_DIR, NEW_DIR
#

# Debug configuration
BUG_ENABLED="${BUG_ENABLED:-false}"
BUG_LOG="/tmp/rc_bug.log"
BUG_LEVELS="${BUG_LEVELS:-1-5}"         # Matches existing log level system

# Path validation settings
BUG_VALIDATE="${BUG_VALIDATE:-true}"    # Validate directory structure
BUG_FALLBACK="${BUG_FALLBACK:-true}"    # Allow fallback paths if main paths fail

# Define directories once - easier to maintain
declare -ga BUG_DIRS=(
    "bas"
    "com"
    "env"
    "fun"
    "gem"
)

# Set LAB_DIR first as it's our root
[[ -z "${LAB_DIR:-}" ]] && LAB_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}")/.." &> /dev/null && pwd )"

# Generate all other directory paths from array
for dir in "${BUG_DIRS[@]}"; do
    upper_dir="${dir^^}_DIR"  # Convert to uppercase and add _DIR
    [[ -z "${!upper_dir:-}" ]] && declare -g "$upper_dir=$LAB_DIR/$dir"
    export "$upper_dir"
done

# Debug function
bug() {
    local message="$1"
    local level="${2:-1}"

    if [[ "$BUG_ENABLED" == "true" ]]; then
        {
            echo "$(date '+%Y-%m-%d %H:%M:%S') [DEBUG-$level] $message"
            echo "  Script: ${BASH_SOURCE[1]}"
            echo "  LAB_DIR=$LAB_DIR"
            echo "  Current DIR=$PWD"
            echo "  Directory status:"
            for dir in "${BUG_DIRS[@]}"; do
                upper_dir="${dir^^}_DIR"
                echo "    $upper_dir=${!upper_dir:-undefined}"
            done
            echo
        } >> "$BUG_LOG"
    fi
}

# Path validation using array
bug_validate() {
    [[ "$BUG_VALIDATE" != "true" ]] && return 0

    local invalid_paths=()

    # Check LAB_DIR first
    if [[ ! -d "$LAB_DIR" ]]; then
        invalid_paths+=("LAB_DIR=$LAB_DIR")
        bug "Invalid root path: LAB_DIR=$LAB_DIR" 2
    fi

    # Check all generated directories
    for dir in "${BUG_DIRS[@]}"; do
        upper_dir="${dir^^}_DIR"
        if [[ ! -d "${!upper_dir}" ]]; then
            invalid_paths+=("$upper_dir=${!upper_dir}")
            bug "Invalid path: $upper_dir=${!upper_dir}" 2
        fi
    done

    if [[ ${#invalid_paths[@]} -gt 0 ]]; then
        echo "WARNING: Invalid paths detected:"
        printf '%s\n' "${invalid_paths[@]}"
        [[ "$BUG_FALLBACK" != "true" ]] && return 1
    fi

    return 0
}

# Export all necessary variables and functions
export BUG_ENABLED BUG_LOG BUG_LEVELS
export BUG_VALIDATE BUG_FALLBACK
export LAB_DIR
# Export all generated directory variables
for dir in "${BUG_DIRS[@]}"; do
    upper_dir="${dir^^}_DIR"
    export "$upper_dir"
done
export -f bug bug_validate

# Initial validation
bug_validate

# Initial debug message if enabled
[[ "$BUG_ENABLED" == "true" ]] && bug "Initialized bug system" 1
