#!/bin/bash

# Performance monitoring setup
declare -gA TME_START_TIMES     # Stores component start times
declare -gA TME_END_TIMES       # Stores component end times
declare -gA TME_DURATIONS       # Stores calculated durations
declare -gA TME_STATUS          # Stores completion status
declare -gA TME_PARENTS         # Stores parent-child relationships
declare -gA TME_CHILDREN        # Stores child components for each parent
declare -g TME_STARTUP_BEGIN    # Global startup timestamp
declare -g TME_LOG_FILE         # Path to timing log file
declare -g TME_CURRENT_PARENT   # Tracks current parent for nested timing

# Define timer state directory and files
TME_DIR="/var/log/lab/tme"
[[ ! -d "$TME_DIR" ]] && mkdir -p "$TME_DIR" 2>/dev/null || TME_DIR="/tmp/lab/tme"

TME_STATE_FILE="${TME_DIR}/state"
TME_LEVELS_FILE="${TME_DIR}/levels"
TME_LOG_FILE="${TME_DIR}/timing.log"

# Initialize timer state if file doesn't exist
if [[ ! -f "$TME_STATE_FILE" ]]; then
    echo "true" > "$TME_STATE_FILE" 2>/dev/null || {
        TME_DIR="/tmp"
        TME_STATE_FILE="${TME_DIR}/rc_tme_state"
        TME_LEVELS_FILE="${TME_DIR}/rc_tme_levels"
        TME_LOG_FILE="${TME_DIR}/rc_timing.log"
        echo "true" > "$TME_STATE_FILE"
    }
fi

# Initialize timer levels
if [[ ! -f "$TME_LEVELS_FILE" ]]; then
    echo "9" > "$TME_LEVELS_FILE"  # Default max depth
fi

# Color definitions - using printf to ensure proper escape sequences
readonly TME_RED=$(printf '\033[0;31m')
readonly TME_ORANGE=$(printf '\033[0;33m')
readonly TME_YELLOW=$(printf '\033[1;33m')
readonly TME_GREEN=$(printf '\033[0;32m')
readonly TME_CYAN=$(printf '\033[0;36m')
readonly TME_BLUE=$(printf '\033[0;34m')
readonly TME_INDIGO=$(printf '\033[0;35m')
readonly TME_VIOLET=$(printf '\033[1;35m')
readonly TME_WHITE=$(printf '\033[1;37m')
readonly TME_NC=$(printf '\033[0m')

# Initialize timer system with optional log file
init_timer() {
    local log_dir="${1:-/tmp}"
    TME_LOG_FILE="${log_dir}/rc_timing.log"
    TME_STARTUP_BEGIN=$(date +%s.%N)
    TME_CURRENT_PARENT=""

    # Reset all associative arrays
    TME_START_TIMES=()
    TME_END_TIMES=()
    TME_DURATIONS=()
    TME_STATUS=()
    TME_PARENTS=()
    TME_CHILDREN=()

    [[ ! -d "$log_dir" ]] && mkdir -p "$log_dir"

    {
        printf "%sRC Timing Log - %s%s\n" "$TME_BLUE" "$(date)" "$TME_NC"
        printf "====================\n"
        printf "Startup time: %s%s%s\n\n" "$TME_CYAN" "$(date -d @${TME_STARTUP_BEGIN})" "$TME_NC"
    } > "$TME_LOG_FILE"
}

# Start timing a component with optional parent component
start_timer() {
    local component="$1"
    local parent="${2:-$TME_CURRENT_PARENT}"
    local timestamp=$(date +%s.%N)

    TME_START_TIMES[$component]=$timestamp
    TME_STATUS[$component]="running"

    if [[ -n "$parent" ]]; then
        TME_PARENTS[$component]=$parent
        if [[ -z "${TME_CHILDREN[$parent]}" ]]; then
            TME_CHILDREN[$parent]="$component"
        else
            TME_CHILDREN[$parent]="${TME_CHILDREN[$parent]}:$component"
        fi
    fi

    TME_CURRENT_PARENT="$component"

    # Temporarily disable logging for file writes
    local orig_log_state
    orig_log_state=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
    echo "false" > "$LOG_STATE_FILE"

    {
        printf "[START] %s\n" "$component"
        [[ -n "$parent" ]] && printf "Parent: %s\n" "$parent"
        printf "Time: %s\n\n" "$(date -d @${timestamp})"
    } >> "$TME_LOG_FILE"

    # Restore logging state
    echo "$orig_log_state" > "$LOG_STATE_FILE"
}


# End timing for a component
end_timer() {
    local component="$1"
    local status="${2:-success}"
    local timestamp=$(date +%s.%N)

    TME_END_TIMES[$component]=$timestamp

    local start_time="${TME_START_TIMES[$component]}"
    if [[ -n "$start_time" ]]; then
        TME_DURATIONS[$component]=$(echo "$timestamp - $start_time" | bc)
        TME_STATUS[$component]=$status
    else
        TME_DURATIONS[$component]=0
        TME_STATUS[$component]="error_no_start"
    fi

    TME_CURRENT_PARENT="${TME_PARENTS[$component]}"

    # Temporarily disable logging for file writes
    local orig_log_state
    orig_log_state=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
    echo "false" > "$LOG_STATE_FILE"

    {
        printf "[END] %s\n" "$component"
        printf "Status: %s\n" "$status"
        printf "Duration: %.3fs\n\n" "${TME_DURATIONS[$component]}"
    } >> "$TME_LOG_FILE"

    # Restore logging state
    echo "$orig_log_state" > "$LOG_STATE_FILE"
}

# Calculate the depth of a component in the timing tree
calculate_component_depth() {
    local component="$1"
    local depth=0
    local current="$component"

    while [[ -n "${TME_PARENTS[$current]}" ]]; do
        ((depth++))
        current="${TME_PARENTS[$current]}"
    done

    echo "$depth"
}

# Print formatted timing entry
print_timing_entry() {
    local component="$1"
    local indent="$2"
    local duration="$3"
    local total_time="$4"
    local depth="$5"
    local status="${TME_STATUS[$component]}"

    local percentage=$(echo "scale=2; ($duration / $total_time) * 100" | bc)

    local color
    case $depth in
        0) color=$TME_RED ;;
        1) color=$TME_ORANGE ;;
        2) color=$TME_YELLOW ;;
        3) color=$TME_GREEN ;;
        4) color=$TME_CYAN ;;
        5) color=$TME_BLUE ;;
        6) color=$TME_INDIGO ;;
        7) color=$TME_VIOLET ;;
        *) color=$TME_WHITE ;;
    esac

    local depth_indent=""
    if [ $depth -eq 0 ]; then
        depth_indent="    "
    else
        depth_indent="      "
        for ((i=2; i<=$depth; i++)); do
            depth_indent="  $depth_indent"
        done
    fi

    local status_icon
    case "$status" in
        "success") status_icon="✓";;
        "error"*) status_icon="✗";;
        "running") status_icon="⟳";;
        *) status_icon="?";;
    esac

    # Using printf with proper color escape handling
    printf "%s%s%s %-25s %6.3fs [%5.1f%%] [%s]%s\n" \
        "$depth_indent" \
        "$color" \
        "${depth:+└─}" \
        "$component" \
        "$duration" \
        "$percentage" \
        "$status_icon" \
        "$TME_NC"
}

# Print enhanced component tree
print_enhanced_tree() {
    local component="$1"
    local indent="$2"
    local total_time="$3"
    local depth=$(calculate_component_depth "$component")

    local max_depth
    max_depth=$(cat "$TME_LEVELS_FILE" 2>/dev/null || echo "9")

    if ((depth <= max_depth)); then
        print_timing_entry "$component" "$indent" "${TME_DURATIONS[$component]}" "$total_time" "$depth"

        if [[ -n "${TME_CHILDREN[$component]}" ]]; then
            local new_indent="${indent}   "
            local IFS=':'
            local children=(${TME_CHILDREN[$component]})

            IFS=$'\n'
            children=($(for child in "${children[@]}"; do
                echo "${TME_DURATIONS[$child]}:$child"
            done | sort -rn | cut -d: -f2))
            unset IFS

            for child in "${children[@]}"; do
                print_enhanced_tree "$child" "$new_indent" "$total_time"
            done
        fi
    fi
}

# The settme function to control timer output
settme() {
    local arg=$1

    case "$arg" in
        "off")
            echo "false" > "$TME_STATE_FILE"
            printf "%sTimer output has been disabled%s\n" "$TME_RED" "$TME_NC"
            return 0
            ;;
        "on")
            echo "true" > "$TME_STATE_FILE"
            echo "9" > "$TME_LEVELS_FILE"
            printf "%sTimer output has been enabled with maximum depth%s\n" "$TME_GREEN" "$TME_NC"
            return 0
            ;;
        *)
            if [[ "$(cat "$TME_STATE_FILE" 2>/dev/null || echo "false")" != "true" ]]; then
                printf "%sTimer output is currently disabled. Use 'settme on' to enable first.%s\n" "$TME_YELLOW" "$TME_NC"
                return 1
            fi

            if [[ $arg =~ ^([0-9]+)$ ]]; then
                local depth=${BASH_REMATCH[1]}
                if ((depth > 0 && depth <= 9)); then
                    echo "$depth" > "$TME_LEVELS_FILE"
                    printf "%sTimer depth set to %d%s\n" "$TME_GREEN" "$depth" "$TME_NC"
                    return 0
                fi
            fi

            printf "%sInvalid input. Usage:%s\n" "$TME_RED" "$TME_NC"
            printf "   settme on|off            - Enable or disable timer output\n"
            printf "   settme <depth>           - Set maximum depth to show (1-9)\n"
            return 1
            ;;
    esac
}

# Enhanced timing report
print_timing_report() {
    local current_state
    current_state=$(cat "$TME_STATE_FILE" 2>/dev/null || echo "true")
    [[ "${current_state}" != "true" ]] && return 0

    # Temporarily disable logging during report generation
    local orig_log_state
    orig_log_state=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
    echo "false" > "$LOG_STATE_FILE"

    local total_time=$(echo "$(date +%s.%N) - $TME_STARTUP_BEGIN" | bc)

    {
        printf "\n"
        printf " %s━ RC Performance Report%s\n" "$TME_BLUE" "$TME_NC"
        printf " %s━ Total startup time: %s%.3fs%s\n" "$TME_BLUE" "$TME_GREEN" "$total_time" "$TME_NC"
        printf " %s━ Generated: %s%s%s\n" "$TME_BLUE" "$TME_CYAN" "$(date)" "$TME_NC"
        printf "\n"
        printf " %s━ Component Timing Tree:%s\n" "$TME_BLUE" "$TME_NC"
        printf "\n"

        local root_components=()
        for comp in "${!TME_START_TIMES[@]}"; do
            if [[ -z "${TME_PARENTS[$comp]}" ]]; then
                root_components+=("$comp")
            fi
        done

        IFS=$'\n'
        root_components=($(for comp in "${root_components[@]}"; do
            echo "${TME_DURATIONS[$comp]}:$comp"
        done | sort -rn | cut -d: -f2))
        unset IFS

        for comp in "${root_components[@]}"; do
            print_enhanced_tree "$comp" "" "$total_time"
            printf "\n"
        done

        printf " %s━ Log file: %s%s%s\n" "$TME_BLUE" "$TME_CYAN" "$TME_LOG_FILE" "$TME_NC"
        printf "\n"

    } | tee -a "$TME_LOG_FILE"

    # Restore logging state
    echo "$orig_log_state" > "$LOG_STATE_FILE"
}

# Example of how to use nested timing
start_nested_timing() {
    local component="$1"
    start_timer "$component"
}

end_nested_timing() {
    local component="$1"
    end_timer "$component"
}

# Cleanup function
cleanup_timer() {
    # Temporarily disable logging during cleanup
    local orig_log_state
    orig_log_state=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
    echo "false" > "$LOG_STATE_FILE"

    for component in "${!TME_STATUS[@]}"; do
        if [[ "${TME_STATUS[$component]}" == "running" ]]; then
            end_timer "$component" "interrupted"
        fi
    done

    {
        printf "====================\n"
        printf "Timer cleanup completed at %s\n" "$(date)"
        printf "Total execution time: %.3fs\n\n" "$(echo "$(date +%s.%N) - $TME_STARTUP_BEGIN" | bc)"
    } >> "$TME_LOG_FILE"

    # Restore logging state
    echo "$orig_log_state" > "$LOG_STATE_FILE"
}


# Export all functions and variables
export TME_STARTUP_BEGIN
export -A TME_START_TIMES
export -A TME_END_TIMES
export -A TME_DURATIONS
export -A TME_STATUS
export -A TME_PARENTS
export -A TME_CHILDREN
export TME_CURRENT_PARENT
export TME_LOG_FILE
export -f init_timer
export -f start_timer
export -f end_timer
export -f start_nested_timing
export -f end_nested_timing
export -f calculate_component_depth
export -f print_timing_entry
export -f print_enhanced_tree
export -f print_timing_report
export -f settme
export -f cleanup_timer

# Set up cleanup trap
trap cleanup_timer EXIT
