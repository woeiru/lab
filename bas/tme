#!/bin/bash

# Performance monitoring setup
declare -gA TME_START_TIMES     # Stores component start times
declare -gA TME_END_TIMES       # Stores component end times
declare -gA TME_DURATIONS       # Stores calculated durations
declare -gA TME_STATUS          # Stores completion status
declare -gA TME_PARENTS         # Stores parent-child relationships
declare -gA TME_CHILDREN        # Stores child components for each parent
declare -g TME_STARTUP_BEGIN    # Global startup timestamp
declare -g TME_LOG_FILE         # Path to timing log file
declare -g TME_CURRENT_PARENT   # Tracks current parent for nested timing

# Initialize timer system with optional log file
init_timer() {
    local log_dir="${1:-/tmp}"
    TME_LOG_FILE="${log_dir}/rc_timing.log"
    TME_STARTUP_BEGIN=$(date +%s.%N)
    TME_CURRENT_PARENT=""

    # Reset all associative arrays
    TME_START_TIMES=()
    TME_END_TIMES=()
    TME_DURATIONS=()
    TME_STATUS=()
    TME_PARENTS=()
    TME_CHILDREN=()

    [[ ! -d "$log_dir" ]] && mkdir -p "$log_dir"

    {
        echo "RC Timing Log - $(date)"
        echo "===================="
        echo "Startup time: $(date -d @${TME_STARTUP_BEGIN})"
        echo
    } > "$TME_LOG_FILE"
}

# Start timing a component with optional parent component
start_timer() {
    local component="$1"
    local parent="${2:-$TME_CURRENT_PARENT}"  # Use current parent if none specified
    local timestamp=$(date +%s.%N)

    TME_START_TIMES[$component]=$timestamp
    TME_STATUS[$component]="running"

    # Set up parent-child relationship
    if [[ -n "$parent" ]]; then
        TME_PARENTS[$component]=$parent
        # Append to children list, creating if it doesn't exist
        if [[ -z "${TME_CHILDREN[$parent]}" ]]; then
            TME_CHILDREN[$parent]="$component"
        else
            TME_CHILDREN[$parent]="${TME_CHILDREN[$parent]}:$component"
        fi
    fi

    # Set this component as the current parent for nested timing
    TME_CURRENT_PARENT="$component"

    {
        echo "[START] $component"
        [[ -n "$parent" ]] && echo "Parent: $parent"
        echo "Time: $(date -d @${timestamp})"
        echo
    } >> "$TME_LOG_FILE"
}

# End timing for a component
end_timer() {
    local component="$1"
    local status="${2:-success}"
    local timestamp=$(date +%s.%N)

    TME_END_TIMES[$component]=$timestamp

    local start_time="${TME_START_TIMES[$component]}"
    if [[ -n "$start_time" ]]; then
        TME_DURATIONS[$component]=$(echo "$timestamp - $start_time" | bc)
        TME_STATUS[$component]=$status
    else
        TME_DURATIONS[$component]=0
        TME_STATUS[$component]="error_no_start"
    fi

    # Reset current parent to the parent of this component
    TME_CURRENT_PARENT="${TME_PARENTS[$component]}"

    {
        echo "[END] $component"
        echo "Status: $status"
        echo "Duration: ${TME_DURATIONS[$component]}s"
        echo
    } >> "$TME_LOG_FILE"
}

# Print tree structure for a component
print_component_tree() {
    local component="$1"
    local indent="$2"
    local duration="${TME_DURATIONS[$component]}"
    local status="${TME_STATUS[$component]}"
    local total_time="$3"

    # Calculate percentage of total time
    local percentage=$(echo "scale=2; ($duration / $total_time) * 100" | bc)

    # Generate status indicator
    local status_icon
    case "$status" in
        "success") status_icon="✓";;
        "error"*) status_icon="✗";;
        "running") status_icon="⟳";;
        *) status_icon="?";;
    esac

    # Print this component with timing information
    printf "%s%s %-20s: %6.3fs [%5.1f%%] [%s]\n" \
        "$indent" \
        "${indent:+└─}" \
        "$component" \
        "$duration" \
        "$percentage" \
        "$status_icon"

    # Process children if any exist
    if [[ -n "${TME_CHILDREN[$component]}" ]]; then
        local new_indent="${indent}   "
        local IFS=':'
        local children=(${TME_CHILDREN[$component]})
        for child in "${children[@]}"; do
            print_component_tree "$child" "$new_indent" "$total_time"
        done
    fi
}

# Print detailed timing report with tree structure
print_timing_report() {
    local total_time=$(echo "$(date +%s.%N) - $TME_STARTUP_BEGIN" | bc)

    {
        echo
        echo " ━ RC Performance Report"
        echo " ━ Total startup time: ${total_time}s"
        echo " ━ Generated: $(date)"
        echo
        echo " ━ Component Timing Tree:"
        echo

        # Find root components (those without parents)
        local root_components=()
        for comp in "${!TME_START_TIMES[@]}"; do
            if [[ -z "${TME_PARENTS[$comp]}" ]]; then
                root_components+=("$comp")
            fi
        done

        # Sort root components by duration
        IFS=$'\n'
        root_components=($(for comp in "${root_components[@]}"; do
            echo "${TME_DURATIONS[$comp]}:$comp"
        done | sort -rn | cut -d: -f2))
        unset IFS

        # Print tree for each root component
        for comp in "${root_components[@]}"; do
            print_component_tree "$comp" "" "$total_time"
            echo
        done

        echo " ━ Log file: $TME_LOG_FILE"
        echo

    } | tee -a "$TME_LOG_FILE"
}

# Example of how to use nested timing
start_nested_timing() {
    local component="$1"
    start_timer "$component"  # Uses TME_CURRENT_PARENT automatically
}

end_nested_timing() {
    local component="$1"
    end_timer "$component"    # Automatically restores previous parent
}

# Cleanup function
cleanup_timer() {
    for component in "${!TME_STATUS[@]}"; do
        if [[ "${TME_STATUS[$component]}" == "running" ]]; then
            end_timer "$component" "interrupted"
        fi
    done

    {
        echo "===================="
        echo "Timer cleanup completed at $(date)"
        echo "Total execution time: $(echo "$(date +%s.%N) - $TME_STARTUP_BEGIN" | bc)s"
        echo
    } >> "$TME_LOG_FILE"
}

# Export functions and variables
export TME_STARTUP_BEGIN
export -A TME_START_TIMES
export -A TME_END_TIMES
export -A TME_DURATIONS
export -A TME_STATUS
export -A TME_PARENTS
export -A TME_CHILDREN
export TME_CURRENT_PARENT
export TME_LOG_FILE
export -f init_timer
export -f start_timer
export -f end_timer
export -f start_nested_timing
export -f end_nested_timing
export -f print_timing_report
export -f cleanup_timer

# Set up cleanup trap
trap cleanup_timer EXIT
