#!/bin/bash

# ===========================================
# Improved and Fully Commented bashrc file
# Author: [Your Name]
# Last updated: [Date]
# Description: This bashrc file sets up a customized shell environment with various aliases and functions for system administration tasks.
# ===========================================

# 1. CONFIGURATION AND SETUP
# ==========================

# Define the directory of the script using a POSIX-compliant method
DIR="$( cd "$( dirname "$(readlink -f "${BASH_SOURCE[0]}")" )" >/dev/null 2>&1 && pwd )"
PARENT_DIR="$DIR/.."

# 2. ERROR HANDLING
# =================

# Central error handling function for consistent error reporting and exit
handle_error() {
    local exit_code=$1
    local error_message=$2
    echo "Error: $error_message" >&2
    exit "$exit_code"
}

# 3. HELPER FUNCTIONS
# ===================

# Creates a directory if it doesn't exist, with error handling
create_directory() {
    local dir_path=$1
    if [[ ! -d "$dir_path" ]]; then
        mkdir -p "$dir_path" || handle_error 1 "Failed to create directory: $dir_path"
    fi
}

# Generates aliases for top-level directories and creates corresponding variables
generate_top_level_aliases() {
    for dir in "$PARENT_DIR"/*; do
        if [[ -d "$dir" ]]; then
            base=$(basename "$dir")
            if [[ ${#base} -eq 3 ]]; then
                var_name="${base^^}_DIR"
                declare -g "$var_name=$dir"
                alias "d.$base=cd $dir"
            fi
        fi
    done
}

# Sources specified scripts, with error checking
source_scripts() {
    local files=("$@")
    for file in "${files[@]}"; do
        local script_path="$LIB_DIR/$file.bash"
        if [[ -f "$script_path" ]]; then
            source "$script_path"
        else
            echo "Warning: Script not found: $script_path"
        fi
    done
}

# Generates various types of aliases based on the provided type and file list
generate_aliases() {
    local alias_type=$1
    shift
    local files=("$@")
    
    for file in "${files[@]}"; do
        case "$alias_type" in
            "var")
                alias "var.$file=all-acu o $PARENT_DIR $VAR_DIR/$file.conf"
                ;;
            "bash")
                alias "b.$file.sh=bash $SET_DIR/$file.sh"
                ;;
            "cat")
                alias "c.$file.bash=cat $LIB_DIR/$file.bash"
                alias "c.$file.sh=cat $SET_DIR/$file.sh"
                alias "c.$file.conf=cat $VAR_DIR/$file.conf"
                ;;
            "vim")
                alias "v.$file.bash=vim $LIB_DIR/$file.bash"
                alias "v.$file.sh=vim $SET_DIR/$file.sh"
                alias "v.$file.conf=vim $VAR_DIR/$file.conf"
                ;;
            *)
                echo "Warning: Unknown alias type: $alias_type"
                ;;
        esac
    done
}

# Generates aliases for readme files across the directory structure
generate_readme_aliases() {
    local FILEBASE_MD="readme.md"
    while IFS= read -r -d '' file; do
        dir=$(dirname "$file")
        alias_name=$(basename "$dir").md
        alias "c.$alias_name=cat $file"
        alias "v.$alias_name=vim $file"
    done < <(find "$PARENT_DIR" -type f -name "$FILEBASE_MD" -print0)
}

# 4. SSH KEY MANAGEMENT
# =====================

# Adds specified SSH keys to the ssh-agent if they exist and aren't already added
add_ssh_keys() {
    # Start or connect to ssh-agent
    if [ -z "$SSH_AUTH_SOCK" ]; then
        eval "$(ssh-agent -s)" > /dev/null
    fi

    # Array of keys to add
    local keys=(
        "$HOME/.ssh/id_rsa"
        "$HOME/.ssh/id_ed25519"
        "$HOME/.ssh/w1"
        # Add more keys as needed
    )

    # Add keys if they exist and are not already added
    for key in "${keys[@]}"; do
        if [[ -f "$key" && ! $(ssh-add -l | grep -q "$(ssh-keygen -lf "$key" | awk '{print $2}')") ]]; then
            ssh-add "$key"
        fi
    done
}

# Lists all SSH keys currently added to the ssh-agent
list_ssh_keys() {
    ssh-add -l
}

# Removes all SSH keys from the ssh-agent
remove_ssh_keys() {
    ssh-add -D
}

# 5. MAIN EXECUTION
# =================

# Main function to set up the shell environment
main() {
    # Generate top-level directory aliases and variables
    generate_top_level_aliases

    local files=(all osm pbs pve nfs smb)
    local bash_files=(all osm pbs pve nfs smb)

    source_scripts "${files[@]}"
    generate_aliases "var" "${files[@]}"
    generate_aliases "bash" "${bash_files[@]}"
    generate_aliases "cat" "${files[@]}"
    generate_aliases "vim" "${files[@]}"
    generate_readme_aliases

    # Automatically add SSH keys
    add_ssh_keys

    # Function chain aliases
    alias fun='all-ffl all-laf "" $LIB_DIR'
    alias var='all-ffl all-acu "" $VAR_DIR $PARENT_DIR'

    # Function aliases
    alias sca='all-sca'
    alias flc='all-flc'
    alias cto='pve-cto'

    # SSH aliases
    alias sk.ed='ssh-keygen -t ed25519 -C "woeiru/lab"'
    alias sc.ed='ssh-copy-id -i ~/.ssh/id_ed25519.pub root@192.168.178.110'

    # Standard aliases for common commands
    
    # Bash
    alias b='bash'
    alias eb='exec bash'

    # BTRFS management
    alias bt='btrfs'
    alias btf='btrfs filesystem'

    # Cat (file viewing)
    alias c='cat'
    alias c.b="cat $INI_DIR/bashrc"
    alias c.group='cat /etc/group'
    alias c.passwd='cat /etc/passwd'
    alias c.fstab='cat /etc/fstab'
    alias es.log='cat /mnt/bak/home/.es.log'

    # Directory navigation
    alias d='cd'
    alias ..='cd ..'
    alias dl="cd $PARENT_DIR"

    alias d.samba='cd /etc/samba/'
    alias d.snapper='cd /etc/snapper/configs'
    alias d.pam='cd /usr/lib/pam_snapper'

    alias d.das='cd /mnt/das'
    alias d.nvm='cd /mnt/nvm'
    alias d.usb='cd /mnt/nvm'

    # Disk usage
    alias u='du -bh -d1'
    alias uu='du -bh -d2'
    alias uuu='du -bh -d3'

    # Exit
    alias ee='exit'

    # Git commands
    alias g='git status'
    alias gd='git diff'
    alias gl='git ls-files | xargs cat | wc -l'
    alias ga='git add .'
    alias gc='git commit -m "standard"'
    alias go='git push origin master'
    alias gp='git pull'
    alias gg='all-gio'
    alias gr1='git revert HEAD~1'

    # History
    alias h='history'

    # IPTables
    alias ipt='iptables -L -v -n'

    # Mounting
    alias m.sda.das='mount /dev/sda /mnt/das'
    alias m.sub.sda.bak='mount -o subvol=bak /dev/sda /bak'

    # Filesystem creation
    alias mbf='mkfs.btrfs -f'
    alias mbmd='mkfs.btrfs -m raid1 -d raid1'

    # PAM Snapper commands
    alias pam.convert='bash /usr/lib/pam_snapper/pam_snapper_homeconvert.sh'
    alias pam.config='bash /usr/lib/pam_snapper/pam_snapper_pamconfig.sh'
    alias pam.useradd='bash /usr/lib/pam_snapper/pam_snapper_useradd.sh'
    alias pam.userdel='bash /usr/lib/pam_snapper/pam_snapper_userdel.sh'

    # Podman (container management)
    alias pod='podman'
    alias podst='podman start'
    alias podps='podman ps'
    alias podpsa='podman ps -a'

    # System control
    alias y='systemctl'

    # System configuration file editing
    alias v.samba.conf='vim /etc/samba/smb.conf'
    alias v.sambausers='vim /etc/samba/smbusers'
    alias v.firewall.conf='vim /etc/firewalld/firewalld.conf'
    alias v.fstab='vim /etc/fstab'

    # Snapper (filesystem snapshot management)
    alias sl='snapper list'
    alias sc='snapper create'
    alias shl='osm-shl home'
    alias shc='osm-shc home'
    alias shd='osm-shd'

    # System statistics
    alias sar='sar -d 1'
    alias ios='iostat -x 1'

    # SELinux
    alias ses='sestatus -v'
    alias seb='sudo semanage boolean -l'

    # Time zone setting
    alias berlintime="timedatectl set-timezone Europe/Berlin"

    # Transactional update
    alias tu='transactional-update'
    alias tua='transactional-update apply'
    alias tur='transactional-update reboot'
    alias tuar='transactional-update apply && transactional-update reboot'

    # Tree view
    alias t='tree'
    alias tt='tree -L 2'
    alias ttt='tree -L 3'
    alias tttt='tree -L 4'
    alias ttttt='tree -L 5'

    # Vim
    alias v='vim'
    alias v.b="vim $INI_DIR/bashrc"
    alias v.nw="vim $CON_DIR/node-w.md"

    # File listing
    alias l='ls -Al'
}

# Execute main function
main
