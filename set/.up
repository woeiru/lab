#!/bin/bash

# Enable debug mode
#set -x

source_file() {
  local file_path="$1"
  if [ -f "$file_path" ]; then
    source "$file_path"
  else
    echo "Error: $file_path not found."
  fi
}

setup_source() {
  local dir="$1"
  local file="$2"
  local base="$3"

  local lib_dir="${dir%/*}/lib"
  local var_dir="${dir%/*}/var"
  local all_base="all"

  local files_to_source=(
    "$lib_dir/${all_base}.bash"
    "$var_dir/${all_base}.conf"
    "$lib_dir/${base}.bash"
    "$var_dir/${base}.conf"
  )

  for file in "${files_to_source[@]}"; do
    source "$file"
    echo "sourced $file"
  done
}

setup_main() {
    if [ "$#" -ne 3 ]; then
        echo "Usage: $0 MODE OPTION SECTION"
        echo "MODE: -i (interactive) or -x (executing)"
        echo "OPTION: For -i: 1-6 (display mode), For -x: -d (dry run) or -p (production)"
        echo "SECTION: Function name or -all"
        exit 1
    fi

    local mode="$1"
    local option="$2"
    local section="$3"

    case "$mode" in
        -i)
            setup_interactive_mode "$option" "$section"
            ;;
        -x)
            setup_executing_mode "$option" "$section"
            ;;
        *)
            echo "Invalid mode. Use -i for interactive or -x for executing."
            exit 1
            ;;
    esac
}

setup_interactive_mode() {
    local display_mode="$1"
    local section="$2"

    setup_display_menu "$DIR_SH" "$FILE_SH" "$display_mode" "$section"

    read -p "Do you want to execute this code? (y/n): " execute_choice
    if [[ "$execute_choice" == "y" ]]; then
        read -p "Choose execution mode (d for dry run, p for production): " exec_mode
        case "$exec_mode" in
            d)
                setup_executing_mode "-d" "$section"
                ;;
            p)
                setup_executing_mode "-p" "$section"
                ;;
            *)
                echo "Invalid execution mode. Exiting."
                exit 1
                ;;
        esac
    fi
}

setup_executing_mode() {
    local option="$1"
    local section="$2"

    case "$option" in
        -d)
            echo "Executing in dry run mode"
            # Add dry run logic here
            ;;
        -p)
            echo "Executing in production mode"
            # Add production execution logic here
            ;;
        *)
            echo "Invalid option for executing mode. Use -d for dry run or -p for production."
            exit 1
            ;;
    esac

    if [[ "$section" == "-all" ]]; then
        for func in "${!MENU_OPTIONS[@]}"; do
            ${MENU_OPTIONS[$func]}
        done
    else
        if [[ -n "${MENU_OPTIONS[$section]}" ]]; then
            ${MENU_OPTIONS[$section]}
        else
            echo "Invalid section: $section"
            exit 1
        fi
    fi
}

# Function to expand variables
expand_variables() {
    local line="$1"
    local expanded_line="$line"

    local vars=$(echo "$line" | grep -o '\<[a-zA-Z_][a-zA-Z0-9_]*\>')

    for var in $vars; do
        if [[ -v $var ]]; then
            local value="${!var}"
            expanded_line="${expanded_line//$var/$var = $value}"
        fi
    done

    echo "$expanded_line"
}

# Function to get function description
get_function_description() {
    local func_name="$1"
    local lib_name="${func_name%%-*}"
    local lib_file="/root/lab/lib/${lib_name}.bash"

    if [ ! -f "$lib_file" ]; then
        return
    fi

    local description=$(awk -v fn="$func_name" '
        $0 ~ "^"fn"\\(\\)" {
            if (NR > 2) print lines[NR-3];
            exit;
        }
        {
            lines[NR] = $0;
        }
    ' "$lib_file" | sed 's/^# *//')

    if [ -n "$description" ]; then
        echo "--( $description )--"
    fi
}

setup_display_menu() {
    local dir="$1"
    local file="$2"
    local display_choice="$3"
    local section="$4"

    echo "----------------------------------------------------------------------"
    echo "------------  Scanning file $file for *_xall functions  -------------"
    echo "                                                            "
    echo "--------------------->>(  Displaying chosen option  )<<-----------------------"
    echo "                                                            "

    grep -E '^[a-zA-Z_]+_xall\(\)' "$dir/$file" | while IFS= read -r line; do
        func_name=$(echo "$line" | awk -F'(' '{print $1}')
        if [[ "$section" == "-all" || "${func_name%%_xall}" == "$section" ]]; then
            echo "->>(  ${func_name%%_xall}  )<<------------------------------"

            in_function=false
            first_line=true
            while IFS= read -r inner_line; do
                if $first_line; then
                    first_line=false
                    in_function=true
                    continue
                fi
                if [[ "$inner_line" == "}" ]]; then
                    in_function=false
                    echo ""
                elif $in_function; then
                    case "$display_choice" in
                        1)
                            echo "$inner_line"
                            ;;
                        2)
                            echo "$(expand_variables "$inner_line")"
                            ;;
                        3)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                echo "${inner_line} $desc"
                            else
                                echo "$inner_line"
                            fi
                            ;;
                        4)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                echo "$(expand_variables "$inner_line") $desc"
                            else
                                echo "$(expand_variables "$inner_line")"
                            fi
                            ;;
                        5)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                if [ -n "$desc" ]; then
                                    echo "$func: $desc"
                                fi
                            fi
                            ;;
                        6)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                if [ -n "$desc" ]; then
                                    echo "$desc"
                                fi
                            fi
                            ;;
                    esac
                fi
            done < <(sed -n "/^${func_name}()/,/^}/p" "$dir/$file")
        fi
    done
    echo "----------------------------------------------------------------------"
    echo ""
}

# Disable debug mode
set +x
