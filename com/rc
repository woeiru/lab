#!/bin/bash
set -o pipefail

# Set up important directory paths
DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)"
PARENT_DIR="/root/lab"

# Source the error handling module
source "$PARENT_DIR/lib/err"

# Set up error handling
setup_error_handling

# Helper function to safely source files
# Parameters:
#   $1: Path to the file to be sourced
source_helper() {
    if [[ -f "$1" ]]; then  # Check if file exists
        source "$1"
        log "lvl-4" "Source $1"  # Log successful sourcing
    else
        log "lvl-4" "Warning: File $1 not found." | tee -a "$ERROR_LOG" >&2
    fi
}

# Function to source environment configuration files
source_env() {
    local env_dir="$PARENT_DIR/env"
    log "lvl-2" "Sourcing environment configuration files"

    if [[ ! -d "$env_dir" ]]; then
        log "lvl-4" "Warning: Environment directory $env_dir not found. Skipping."
        return 1
    fi

    local found_files=0
    for file in "$env_dir"/*.conf; do
        if [[ -f "$file" ]]; then
            source_helper "$file"
            ((found_files++))
        fi
    done

    if ((found_files == 0)); then
        log "lvl-4" "Warning: No .conf files found in $env_dir"
        return 1
    fi

    return 0
}

# Function to source function files
source_fun() {
    local fun_dir="$PARENT_DIR/fun"
    log "lvl-2" "Sourcing function files"

    if [[ ! -d "$fun_dir" ]]; then
        log "lvl-4" "Warning: Function directory $fun_dir not found. Skipping."
        return 1
    fi

    local found_files=0
    for file in "$fun_dir"/*.bash; do
        if [[ -f "$file" ]]; then
            source_helper "$file"
            ((found_files++))
        fi
    done

    if ((found_files == 0)); then
        log "lvl-4" "Warning: No .bash files found in $fun_dir"
        return 1
    fi

    return 0
}

# Main function to source all required configuration files
source_rc() {
    # SECTION 1: Source primary RC modules
    log "lvl-2" "Sourcing primary RC modules"
    local rc_mod=("rc1" "rc2" "rc3" "rc4")  # Define the order of RC modules

    local found_modules=0
    for module in "${rc_mod[@]}"; do
        if [[ -f "$DIR/$module" ]]; then
            source_helper "$DIR/$module"
            ((found_modules++))
        fi
    done

    if ((found_modules == 0)); then
        log "lvl-4" "Warning: No RC modules found"
        return 1
    fi

    return 0
}

# Function to execute RC-specific setup functions
execution_rc() {
    # Log the start of execution with function name in bold
    log "lvl-1" "Starting \033[1m${FUNCNAME[0]} () \033[0m"

    # Define the sequence of setup functions to be executed
    local set_functions=("set_dynamic" "set_static" "set_aliaswrap")

    # Iterate through each setup function
    for func in "${set_functions[@]}"; do
        if type "$func" &>/dev/null; then
            log "lvl-3" "Executing $func"
            $func
        else
            log "lvl-3" "Warning: $func function not found." | tee -a "$ERROR_LOG" >&2
        fi
    done
}

# Helper function to execute a component and manage its status
# Parameters:
#   $1: Function to execute
#   $2: Component name for status variable
execute_component() {
    local func="$1"
    local component="$2"
    local success_var="${component}_SUCCESS"
    local success=0

    if "$func"; then
        export "$success_var=1"
        success=1
    else
        unset "$success_var"
        log "lvl-2" "Error: ${component} failed." | tee -a "$ERROR_LOG" >&2
    fi

    return $((1 - success))
}

# Main execution function that orchestrates the entire setup process
main_rc() {
    local all_succeeded=0

    # Execute each component and track overall success
    execute_component source_rc "SOURCE_RC" && \
    execute_component source_env "SOURCE_ENV" && \
    execute_component source_fun "SOURCE_FUN" && \
    execute_component execution_rc "EXECUTION_RC" && \
    all_succeeded=1

    # Set overall success flag
    if ((all_succeeded)); then
        export RC_SOURCED=1
        log "lvl-2" "Setup completed successfully."
        return 0
    else
        unset RC_SOURCED
        log "lvl-2" "Error: Overall RC sourcing failed." | tee -a "$ERROR_LOG" >&2
        return 1
    fi
}

# Execute the main function
main_rc
