#!/bin/bash
set -o pipefail

# Set up important directory paths
DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)"
PARENT_DIR="/root/lab"

# Source the error handling module
source "$PARENT_DIR/lib/err"

# Set up error handling
setup_error_handling

# Helper function to safely source files
# Parameters:
#   $1: Path to the file to be sourced
source_helper() {
    if [[ -f "$1" ]]; then  # Check if file exists
        source "$1"
        log "lvl-4" "Source $1"  # Log successful sourcing
    else
        log "lvl-4" "Warning: File $1 not found." | tee -a "$ERROR_LOG" >&2
    fi
}

# Main function to source all required configuration files
source_rc() {
    # SECTION 1: Source primary RC modules
    local rc_mod=("rc1" "rc2" "rc3" "rc4")  # Define the order of RC modules
    for module in "./${rc_mod[@]}"; do
        source_helper "$DIR/$module"
    done

    # SECTION 2: Source library and variable files
    local dirs=("lib" "var")              # Directories to process
    local extensions=("bash" "conf")      # File extensions to look for
    log "lvl-2" "Sourcing lib and var files"

    # Iterate through directories and their corresponding extensions
    for i in "${!dirs[@]}"; do
        local dir="$PARENT_DIR/${dirs[i]}"    # Get full path to directory
        local ext="${extensions[i]}"           # Get corresponding extension
        log "lvl-3" "Processing directory: $dir (extension: .$ext)"

        # Skip if directory doesn't exist
        if [[ ! -d "$dir" ]]; then
            log "lvl-4" "Warning: Directory $dir not found. Skipping."
            continue
        fi

        # Source all files with matching extension in the directory
        for file in "$dir"/*."$ext"; do
            if [[ -f "$file" ]]; then
                source_helper "$file"
            fi
        done
    done
}

# Function to execute RC-specific setup functions
execution_rc() {
    # Log the start of execution with function name in bold
    log "lvl-1" "Starting \033[1m${FUNCNAME[0]} () \033[0m"

    # Define the sequence of setup functions to be executed
    local set_functions=("set_dynamic" "set_static" "set_aliaswrap")

    # Iterate through each setup function
    for func in "${set_functions[@]}"; do
        if type "$func" &>/dev/null; then
            log "lvl-3" "Executing $func"
            $func
        else
            log "lvl-3" "Warning: $func function not found." | tee -a "$ERROR_LOG" >&2
        fi
    done
}

# Function to execute module-specific setup functions
execution_mod() {
    log "lvl-1" "Starting \033[1m${FUNCNAME[0]} () \033[0m"
    local module_functions=("main_env")
    for func in "${module_functions[@]}"; do
        if type "$func" &>/dev/null; then
            log "lvl-3" "Executing $func"
            $func
        else
            log "lvl-3" "Warning: $func function not found." | tee -a "$ERROR_LOG" >&2
        fi
    done
}

# Main execution function that orchestrates the entire setup process
main_rc() {
    # Initialize success flags
    local source_success=0
    local execution_rc_success=0
    local execution_mod_success=0

    # Source all configuration files
    if source_rc; then
        export SOURCE_RC_SUCCESS=1
        source_success=1
    else
        unset SOURCE_RC_SUCCESS
    fi

    # Execute RC setup functions
    if execution_rc; then
        export EXECUTION_RC_SUCCESS=1
        execution_rc_success=1
    else
        unset EXECUTION_RC_SUCCESS
    fi

    # Execute module setup functions
    if execution_mod; then
        export EXECUTION_MODULES_SUCCESS=1
        execution_mod_success=1
    else
        unset EXECUTION_MODULES_SUCCESS
    fi

    # Set overall success flag if all steps succeeded
    if [[ $source_success -eq 1 && $execution_rc_success -eq 1 && $execution_mod_success -eq 1 ]]; then
        export RC_SOURCED=1
    else
        unset RC_SOURCED
    fi

    # Log any failures that occurred
    if [[ -z "${SOURCE_RC_SUCCESS}" ]]; then
        log "lvl-2" "Error: Source rc failed." | tee -a "$ERROR_LOG" >&2
    fi

    if [[ -z "${EXECUTION_RC_SUCCESS}" ]]; then
        log "lvl-2" "Error: Execution rc failed." | tee -a "$ERROR_LOG" >&2
    fi

    if [[ -z "${EXECUTION_MODULES_SUCCESS}" ]]; then
        log "lvl-2" "Error: Execution mod failed." | tee -a "$ERROR_LOG" >&2
    fi

    # Return final status
    if [[ -z "${RC_SOURCED}" ]]; then
        log "lvl-2" "Error: Overall RC sourcing failed." | tee -a "$ERROR_LOG" >&2
        return 1
    else
        log "lvl-2" "Setup completed successfully."
        return 0
    fi
}

# Execute the main function
main_rc
