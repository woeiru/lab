#!/bin/bash

# ============================================================================
# SSH MANAGEMENT WRAPPER FUNCTIONS
# ============================================================================
#
# DESCRIPTION:
#   This file contains management wrapper functions for SSH operations.
#   These wrappers bridge the gap between pure library functions in /lib/ops/ssh
#   and the global configuration environment, providing a clean separation
#   between testable pure functions and environment-dependent management layer
#   functions.
#
# ARCHITECTURE:
#   ┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
#   │   User/Script   │ -> │  Wrapper (_w)    │ -> │  Pure Function  │
#   │                 │    │  src/mgt/ssh     │    │  lib/ops/ssh    │
#   └─────────────────┘    └──────────────────┘    └─────────────────┘
#                                   │
#                                   v
#                          ┌──────────────────┐
#                          │  Global Config   │
#                          │  Environment     │
#                          └──────────────────┘
#
# DESIGN PRINCIPLES:
#   - Separation of Concerns: Pure functions handle logic, wrappers handle globals
#   - Testability: Pure functions can be tested in isolation with explicit parameters
#   - Maintainability: Global variable dependencies are centralized in wrappers
#   - Consistency: All wrapper functions follow the same pattern and naming convention
#
# NAMING CONVENTION:
#   - Pure functions: Three-letter names (e.g., ssh_fun, ssh_var, ssh_key)
#   - Wrapper functions: Pure function name + "_w" suffix (e.g., ssh_fun_w)
#   - Global variables: Follow established site configuration patterns
#
# WRAPPER PATTERN:
#   Each wrapper function follows this standardized pattern:
#   1. Source the pure library function from ${LIB_OPS_DIR}/ssh
#   2. Extract global variables and convert to explicit parameters
#   3. Validate required parameters (with error handling for missing globals)
#   4. Call the pure function with explicit parameters
#   5. Return the result unchanged
#
# GLOBAL DEPENDENCIES:
#   - LIB_OPS_DIR: Path to pure function libraries
#   - SITE_CONFIG_FILE: Path to site configuration file
#   - SSH-specific global variables as defined in site configuration
#
# USAGE EXAMPLES:
#   # Use wrapper functions in scripts that have global environment loaded
#   ssh_fun_w                    # List available functions
#   ssh_var_w                    # Show configuration variables
#   ssh_key_w                    # SSH key operations
#   ssh_lst_w                    # List SSH keys
#   ssh_rmv_w keyname            # Remove SSH key
#   ssh_gen_w keyname            # Generate SSH key
#   ssh_cpy_w keyname target     # Copy SSH key
#   ssh_agt_w                    # SSH agent operations
#   ssh_sca_w target             # SSH copy authorized keys
#   ssh_suk_w                    # SSH update known hosts
#   ssh_spi_w                    # SSH public key info
#   ssh_sks_w target keyname     # SSH key setup
#   ssh_sak_w keyname            # SSH add key
#   ssh_loi_w                    # SSH login info
#
# TESTING:
#   - Unit tests can call pure functions directly with explicit parameters
#   - Integration tests can call wrapper functions with environment loaded
#   - Pure functions are isolated from global state dependencies
#
# REFACTORING HISTORY:
#   Created: 2025-06-07 - Separated 14 wrapper functions from pure functions
#   Purpose: Enable testing and reduce global variable coupling
#   Follows: GPU and PVE refactoring pattern established in src/mgt/
#
# FUNCTION INVENTORY:
#   ssh_fun_w : List available SSH functions (wrapper for ssh_fun)
#   ssh_var_w : Display SSH configuration variables (wrapper for ssh_var)
#   ssh_key_w : SSH key operations (wrapper for ssh_key)
#   ssh_lst_w : List SSH keys (wrapper for ssh_lst)
#   ssh_rmv_w : Remove SSH key (wrapper for ssh_rmv)
#   ssh_gen_w : Generate SSH key (wrapper for ssh_gen)
#   ssh_cpy_w : Copy SSH key (wrapper for ssh_cpy)
#   ssh_agt_w : SSH agent operations (wrapper for ssh_agt)
#   ssh_sca_w : SSH copy authorized keys (wrapper for ssh_sca)
#   ssh_suk_w : SSH update known hosts (wrapper for ssh_suk)
#   ssh_spi_w : SSH public key info (wrapper for ssh_spi)
#   ssh_sks_w : SSH key setup (wrapper for ssh_sks)
#   ssh_sak_w : SSH add key (wrapper for ssh_sak)
#   ssh_loi_w : SSH login info (wrapper for ssh_loi)
#
# ============================================================================

# ============================================================================
# VARIABLE CREATION FOR FUNCTION ANALYSIS TOOLS
# ============================================================================
# Create wrapper-specific variables for function analysis tools to avoid
# namespace collisions with main library files. These variables enable tools
# like ssh_fun_w to correctly analyze wrapper functions instead of being
# overwritten by main library variables.

# Define directory and file variables for wrapper identification
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Create wrapper-specific variables (avoiding collision with library variables)
eval "FILEPATH_${BASE_FUN}_wrapper=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}_wrapper=\$FILE_FUN"
eval "BASE_${BASE_FUN}_wrapper=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}_wrapper=\$CONFIG_FUN"

# Wrapper for ssh_fun that extracts global variables and calls the pure function
# overview functions (wrapper)
ssh_fun_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_fun "$@"
}

# Wrapper for ssh_var that extracts global variables and calls the pure function
# overview variables (wrapper)
ssh_var_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_var "$@"
}

# Wrapper for ssh_key that extracts global variables and calls the pure function
# ssh key operations (wrapper)
ssh_key_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_key "$@"
}

# Wrapper for ssh_lst that extracts global variables and calls the pure function
# list ssh keys (wrapper)
ssh_lst_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_lst "$@"
}

# Wrapper for ssh_rmv that extracts global variables and calls the pure function
# remove ssh key (wrapper)
ssh_rmv_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_rmv "$@"
}

# Wrapper for ssh_gen that extracts global variables and calls the pure function
# generate ssh key (wrapper)
ssh_gen_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_gen "$@"
}

# Wrapper for ssh_cpy that extracts global variables and calls the pure function
# copy ssh key (wrapper)
ssh_cpy_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_cpy "$@"
}

# Wrapper for ssh_agt that extracts global variables and calls the pure function
# ssh agent operations (wrapper)
ssh_agt_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_agt "$@"
}

# Wrapper for ssh_sca that extracts global variables and calls the pure function
# ssh copy authorized keys (wrapper)
ssh_sca_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_sca "$@"
}

# Wrapper for ssh_suk that extracts global variables and calls the pure function
# ssh update known hosts (wrapper)
ssh_suk_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_suk "$@"
}

# Wrapper for ssh_spi that extracts global variables and calls the pure function
# ssh public key info (wrapper)
ssh_spi_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_spi "$@"
}

# Wrapper for ssh_sks that extracts global variables and calls the pure function
# ssh key setup (wrapper)
ssh_sks_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_sks "$@"
}

# Wrapper for ssh_sak that extracts global variables and calls the pure function
# ssh add key (wrapper)
ssh_sak_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_sak "$@"
}

# Wrapper for ssh_loi that extracts global variables and calls the pure function
# ssh login info (wrapper)
ssh_loi_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/ssh"
    
    # No global variable dependencies for this function
    ssh_loi "$@"
}
