#!/bin/bash

# ============================================================================
# SYSTEM MANAGEMENT WRAPPER FUNCTIONS
# ============================================================================
#
# DESCRIPTION:
#   This file contains management wrapper functions for system operations.
#   These wrappers bridge the gap between pure library functions in /lib/ops/sys
#   and the global configuration environment, providing a clean separation
#   between testable pure functions and environment-dependent management layer
#   functions.
#
# ARCHITECTURE:
#   ┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
#   │   User/Script   │ -> │  Wrapper (_w)    │ -> │  Pure Function  │
#   │                 │    │  src/mgt/sys     │    │  lib/ops/sys    │
#   └─────────────────┘    └──────────────────┘    └─────────────────┘
#                                   │
#                                   v
#                          ┌──────────────────┐
#                          │  Global Config   │
#                          │  Environment     │
#                          └──────────────────┘
#
# DESIGN PRINCIPLES:
#   - Separation of Concerns: Pure functions handle logic, wrappers handle globals
#   - Testability: Pure functions can be tested in isolation with explicit parameters
#   - Maintainability: Global variable dependencies are centralized in wrappers
#   - Consistency: All wrapper functions follow the same pattern and naming convention
#
# NAMING CONVENTION:
#   - Pure functions: Three-letter names (e.g., sys_fun, sys_var, sys_gio)
#   - Wrapper functions: Pure function name + "_w" suffix (e.g., sys_fun_w)
#   - Global variables: Follow established site configuration patterns
#
# WRAPPER PATTERN:
#   Each wrapper function follows this standardized pattern:
#   1. Source the pure library function from ${LIB_OPS_DIR}/sys
#   2. Extract global variables and convert to explicit parameters
#   3. Validate required parameters (with error handling for missing globals)
#   4. Call the pure function with explicit parameters
#   5. Return the result unchanged
#
# GLOBAL DEPENDENCIES:
#   - LIB_OPS_DIR: Path to pure function libraries
#   - SITE_CONFIG_FILE: Path to site configuration file
#   - System-specific global variables as defined in site configuration
#
# USAGE EXAMPLES:
#   # Use wrapper functions in scripts that have global environment loaded
#   sys_fun_w                        # List available functions
#   sys_var_w                        # Show configuration variables
#   sys_gio_w "commit message"       # Git sync operations
#   sys_dpa_w                        # Detect package manager
#   sys_upa_w                        # Update packages system
#   sys_ipa_w pkg1 pkg2              # Install packages system
#   sys_gst_w "name" "email"         # Git set config
#   sys_sst_w                        # Setup sysstat service
#   sys_ust_w username password      # User setup
#   sys_sdc_w servicename            # Service enable/start
#   sys_gre_w                        # Git repository setup
#
# TESTING:
#   - Unit tests can call pure functions directly with explicit parameters
#   - Integration tests can call wrapper functions with environment loaded
#   - Pure functions are isolated from global state dependencies
#
# REFACTORING HISTORY:
#   Created: 2025-06-07 - Separated 11 wrapper functions from pure functions
#   Purpose: Enable testing and reduce global variable coupling
#   Follows: GPU and PVE refactoring pattern established in src/mgt/
#
# FUNCTION INVENTORY:
#   sys_fun_w : List available system functions (wrapper for sys_fun)
#   sys_var_w : Display system configuration variables (wrapper for sys_var)
#   sys_gio_w : Git sync operations (wrapper for sys_gio)
#   sys_dpa_w : Detect package manager (wrapper for sys_dpa)
#   sys_upa_w : Update packages system (wrapper for sys_upa)
#   sys_ipa_w : Install packages system (wrapper for sys_ipa)
#   sys_gst_w : Git set config (wrapper for sys_gst)
#   sys_sst_w : Setup sysstat service (wrapper for sys_sst)
#   sys_ust_w : User setup (wrapper for sys_ust)
#   sys_sdc_w : Service enable/start (wrapper for sys_sdc)
#   sys_gre_w : Git repository setup (wrapper for sys_gre)
#
# ============================================================================

# ============================================================================
# VARIABLE CREATION FOR FUNCTION ANALYSIS TOOLS
# ============================================================================
# Create wrapper-specific variables for function analysis tools to avoid
# namespace collisions with main library files. These variables enable tools
# like sys_fun_w to correctly analyze wrapper functions instead of being
# overwritten by main library variables.

# Define directory and file variables for wrapper identification
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Create wrapper-specific variables (avoiding collision with library variables)
eval "FILEPATH_${BASE_FUN}_wrapper=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}_wrapper=\$FILE_FUN"
eval "BASE_${BASE_FUN}_wrapper=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}_wrapper=\$CONFIG_FUN"

# Wrapper for sys_fun that extracts global variables and calls the pure function
# overview functions (wrapper)
sys_fun_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_fun "$@"
}

# Wrapper for sys_var that extracts global variables and calls the pure function
# overview variables (wrapper)
sys_var_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_var "$@"
}

# Wrapper for sys_gio that extracts global variables and calls the pure function
# git sync operations (wrapper)
sys_gio_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_gio "$@"
}

# Wrapper for sys_dpa that extracts global variables and calls the pure function
# detect package manager (wrapper)
sys_dpa_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_dpa "$@"
}

# Wrapper for sys_upa that extracts global variables and calls the pure function
# update packages system (wrapper)
sys_upa_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_upa "$@"
}

# Wrapper for sys_ipa that extracts global variables and calls the pure function
# install packages system (wrapper)
sys_ipa_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_ipa "$@"
}

# Wrapper for sys_gst that extracts global variables and calls the pure function
# git set config (wrapper)
sys_gst_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_gst "$@"
}

# Wrapper for sys_sst that extracts global variables and calls the pure function
# setup sysstat service (wrapper)
sys_sst_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_sst "$@"
}

# Wrapper for sys_ust that extracts global variables and calls the pure function
# user setup (wrapper)
sys_ust_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_ust "$@"
}

# Wrapper for sys_sdc that extracts global variables and calls the pure function
# service enable/start (wrapper)
sys_sdc_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_sdc "$@"
}

# Wrapper for sys_gre that extracts global variables and calls the pure function
# git repository setup (wrapper)
sys_gre_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sys"
    
    # No global variable dependencies for this function
    sys_gre "$@"
}
