#!/bin/bash

# ============================================================================
# STORAGE MANAGEMENT WRAPPER FUNCTIONS
# ============================================================================
#
# DESCRIPTION:
#   This file contains management wrapper functions for storage operations.
#   These wrappers bridge the gap between pure library functions in /lib/ops/sto
#   and the global configuration environment, providing a clean separation
#   between testable pure functions and environment-dependent management layer
#   functions.
#
# ARCHITECTURE:
#   ┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
#   │   User/Script   │ -> │  Wrapper (_w)    │ -> │  Pure Function  │
#   │                 │    │  src/mgt/sto     │    │  lib/ops/sto    │
#   └─────────────────┘    └──────────────────┘    └─────────────────┘
#                                   │
#                                   v
#                          ┌──────────────────┐
#                          │  Global Config   │
#                          │  Environment     │
#                          └──────────────────┘
#
# DESIGN PRINCIPLES:
#   - Separation of Concerns: Pure functions handle logic, wrappers handle globals
#   - Testability: Pure functions can be tested in isolation with explicit parameters
#   - Maintainability: Global variable dependencies are centralized in wrappers
#   - Consistency: All wrapper functions follow the same pattern and naming convention
#
# NAMING CONVENTION:
#   - Pure functions: Three-letter names (e.g., sto_fun, sto_var, sto_fea)
#   - Wrapper functions: Pure function name + "_w" suffix (e.g., sto_fun_w)
#   - Global variables: Follow established site configuration patterns
#
# WRAPPER PATTERN:
#   Each wrapper function follows this standardized pattern:
#   1. Source the pure library function from ${LIB_OPS_DIR}/sto
#   2. Extract global variables and convert to explicit parameters
#   3. Validate required parameters (with error handling for missing globals)
#   4. Call the pure function with explicit parameters
#   5. Return the result unchanged
#
# GLOBAL DEPENDENCIES:
#   - LIB_OPS_DIR: Path to pure function libraries
#   - SITE_CONFIG_FILE: Path to site configuration file
#   - Storage-specific global variables as defined in site configuration
#
# USAGE EXAMPLES:
#   # Use wrapper functions in scripts that have global environment loaded
#   sto_fun_w                           # List available functions
#   sto_var_w                           # Show configuration variables
#   sto_fea_w                           # fstab entry auto
#   sto_fec_w                           # fstab entry check
#   sto_nfs_w server /path /mount opts  # NFS mount
#   sto_bfs_tra_w                       # Btrfs transfer all
#   sto_bfs_ra1_w                       # Btrfs restore all from 1
#   sto_bfs_csf_w                       # Btrfs create subvolume folder
#   sto_bfs_shc_w                       # Btrfs snapshot home create
#   sto_bfs_shd_w                       # Btrfs snapshot home delete
#   sto_bfs_shl_w                       # Btrfs snapshot home list
#   sto_bfs_sfr_w                       # Btrfs snapshot folder restore
#   sto_bfs_hub_w username              # Btrfs home user backup
#   sto_bfs_snd_w                       # Btrfs send
#   sto_zfs_cpo_w                       # ZFS create pool
#   sto_zfs_dim_w                       # ZFS disk import
#   sto_zfs_dbs_w                       # ZFS database sync
#
# TESTING:
#   - Unit tests can call pure functions directly with explicit parameters
#   - Integration tests can call wrapper functions with environment loaded
#   - Pure functions are isolated from global state dependencies
#
# REFACTORING HISTORY:
#   Created: 2025-06-07 - Separated 16 wrapper functions from pure functions
#   Purpose: Enable testing and reduce global variable coupling
#   Follows: GPU and PVE refactoring pattern established in src/mgt/
#
# FUNCTION INVENTORY:
#   sto_fun_w     : List available storage functions (wrapper for sto_fun)
#   sto_var_w     : Display storage configuration variables (wrapper for sto_var)
#   sto_fea_w     : fstab entry auto (wrapper for sto_fea)
#   sto_fec_w     : fstab entry check (wrapper for sto_fec)
#   sto_nfs_w     : NFS mount operations (wrapper for sto_nfs)
#   sto_bfs_tra_w : Btrfs transfer all (wrapper for sto_bfs_tra)
#   sto_bfs_ra1_w : Btrfs restore all from 1 (wrapper for sto_bfs_ra1)
#   sto_bfs_csf_w : Btrfs create subvolume folder (wrapper for sto_bfs_csf)
#   sto_bfs_shc_w : Btrfs snapshot home create (wrapper for sto_bfs_shc)
#   sto_bfs_shd_w : Btrfs snapshot home delete (wrapper for sto_bfs_shd)
#   sto_bfs_shl_w : Btrfs snapshot home list (wrapper for sto_bfs_shl)
#   sto_bfs_sfr_w : Btrfs snapshot folder restore (wrapper for sto_bfs_sfr)
#   sto_bfs_hub_w : Btrfs home user backup (wrapper for sto_bfs_hub)
#   sto_bfs_snd_w : Btrfs send operations (wrapper for sto_bfs_snd)
#   sto_zfs_cpo_w : ZFS create pool (wrapper for sto_zfs_cpo)
#   sto_zfs_dim_w : ZFS disk import (wrapper for sto_zfs_dim)
#   sto_zfs_dbs_w : ZFS database sync (wrapper for sto_zfs_dbs)
#
# ============================================================================

# ============================================================================
# VARIABLE CREATION FOR FUNCTION ANALYSIS TOOLS
# ============================================================================
# Create wrapper-specific variables for function analysis tools to avoid
# namespace collisions with main library files. These variables enable tools
# like sto_fun_w to correctly analyze wrapper functions instead of being
# overwritten by main library variables.

# Define directory and file variables for wrapper identification
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Create wrapper-specific variables (avoiding collision with library variables)
eval "FILEPATH_${BASE_FUN}_wrapper=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}_wrapper=\$FILE_FUN"
eval "BASE_${BASE_FUN}_wrapper=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}_wrapper=\$CONFIG_FUN"

# Wrapper for sto_fun that extracts global variables and calls the pure function
# overview functions (wrapper)
sto_fun_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_fun "$@"
}

# Wrapper for sto_var that extracts global variables and calls the pure function
# overview variables (wrapper)
sto_var_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_var "$@"
}

# Wrapper for sto_fea that extracts global variables and calls the pure function
# fstab entry auto (wrapper)
sto_fea_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_fea "$@"
}

# Wrapper for sto_fec that extracts global variables and calls the pure function
# fstab entry check (wrapper)
sto_fec_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_fec "$@"
}

# Wrapper for sto_nfs that extracts global variables and calls the pure function
# nfs mount (wrapper)
sto_nfs_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_nfs "$@"
}

# Wrapper for sto_bfs_tra that extracts global variables and calls the pure function
# btrfs transfer all (wrapper)
sto_bfs_tra_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_tra "$@"
}

# Wrapper for sto_bfs_ra1 that extracts global variables and calls the pure function
# btrfs restore all from 1 (wrapper)
sto_bfs_ra1_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_ra1 "$@"
}

# Wrapper for sto_bfs_csf that extracts global variables and calls the pure function
# btrfs create subvolume folder (wrapper)
sto_bfs_csf_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_csf "$@"
}

# Wrapper for sto_bfs_shc that extracts global variables and calls the pure function
# btrfs snapshot home create (wrapper)
sto_bfs_shc_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_shc "$@"
}

# Wrapper for sto_bfs_shd that extracts global variables and calls the pure function
# btrfs snapshot home delete (wrapper)
sto_bfs_shd_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_shd "$@"
}

# Wrapper for sto_bfs_shl that extracts global variables and calls the pure function
# btrfs snapshot home list (wrapper)
sto_bfs_shl_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_shl "$@"
}

# Wrapper for sto_bfs_sfr that extracts global variables and calls the pure function
# btrfs snapshot folder restore (wrapper)
sto_bfs_sfr_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_sfr "$@"
}

# Wrapper for sto_bfs_hub that extracts global variables and calls the pure function
# btrfs home user backup (wrapper)
sto_bfs_hub_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_hub "$@"
}

# Wrapper for sto_bfs_snd that extracts global variables and calls the pure function
# btrfs send (wrapper)
sto_bfs_snd_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_bfs_snd "$@"
}

# Wrapper for sto_zfs_cpo that extracts global variables and calls the pure function
# zfs create pool (wrapper)
sto_zfs_cpo_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_zfs_cpo "$@"
}

# Wrapper for sto_zfs_dim that extracts global variables and calls the pure function
# zfs disk import (wrapper)
sto_zfs_dim_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_zfs_dim "$@"
}

# Wrapper for sto_zfs_dbs that extracts global variables and calls the pure function
# zfs database sync (wrapper)
sto_zfs_dbs_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/sto"
    
    # No global variable dependencies for this function
    sto_zfs_dbs "$@"
}
