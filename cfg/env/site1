#!/bin/bash

# dotfiles
#
DOT_FILE1="/root/.bashrc"
DOT_SOURCE1=". /root/lab/bin/ini"

# git ( gst
#
GIT_USERNAME="woeiru"
GIT_USERMAIL="169383590+woeiru@users.noreply.github.com"

# packages ( ipa
PACKAGES_DEV=(vim tree ansible)

# ssh keys ( usk, aak
#
DEVICE_PATH="/dev/sda1"
MOUNT_POINT="/mnt/usb"
SUBFOLDER_PATH="ssh"
UPLOAD_PATH="/root/.ssh"

KEY_NAME="h1"
PUBLIC_KEY="${KEY_NAME}.pub"
PRIVATE_KEY="${KEY_NAME}"

# ssh lookups ( sca
#
# users
declare -A -g SSH_USERS
SSH_USERS=(
    ["r"]="root"
    ["e"]="es"
)

# ip array index
declare -a -g ALL_IP_ARRAYS=("CT_IPS" "HY_IPS")
# ip array shortcuts
declare -A -g ARRAY_ALIASES
ARRAY_ALIASES=(
    ["CL_IPS"]="cl"
    ["HY_IPS"]="hy"
    ["CT_IPS"]="ct"
)
# ip array: clients
declare -A -g CL_IPS
CL_IPS=(
    ["t1"]="192.168.178.55"
)
# ip array: hypervisors
declare -A -g HY_IPS
HY_IPS=(
    ["h1"]="192.168.178.110"
    ["w2"]="192.168.178.120"
)
# ip array: containers
declare -A -g CT_IPS
CT_IPS=(
    ["pbs1"]="192.168.178.111"
    ["nfs1"]="192.168.178.112"
    ["smb1"]="192.168.178.113"
    ["pbs2"]="192.168.178.121"
    ["nfs2"]="192.168.178.122"
    ["smb2"]="192.168.178.123"
)

#
# PBS
#

# packages
#
PBS_PACKAGES_ALL=(proxmox-backup-server)

# restore datastore
#
PBS_DATASTORE_CONFIG="/etc/proxmox-backup/datastore.cfg"
PBS_DATASTORE_NAME="pbs-home"
PBS_DATASTORE_PATH="/home"

#
# PVE
#

# packages
#
PVE_PACKAGES_ALL=(corosync-qdevice)

# config files
PVE_CONF_PATH_QEMU="/etc/pve/qemu-server"

# environment
PVE_ADR_FILE="/etc/apt/sources.list"
PVE_ADR_LINE="deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription"



# The first two letters before the first underscore (e.g., x1_, x2_, h1_, w2_) are constructed dynamically at runtime
# These prefixes are constructed dynamically at runtime based on the node name.

# Add all hostnames of the cluster nodes here
CLUSTER_NODES=("x1" "x2")

# IP Addresses for Proxmox nodes and QDevice
NODE1_IP="192.168.178.221"
NODE2_IP="192.168.178.222"
QDEVICE_IP="192.168.178.223"

# Node-specific configuration

# Configuration for x1
x1_NODE_PCI0="0000:3b:00.0"
x1_NODE_PCI1="0000:3b:00.1"
x1_CORE_COUNT_ON=12
x1_CORE_COUNT_OFF=8
# Configuration for x2
x2_NODE_PCI0="0000:0a:00.0"
x2_NODE_PCI1="0000:0a:00.1"
x2_CORE_COUNT_ON=12
x2_CORE_COUNT_OFF=8
# Configuration for h1
h1_NODE_PCI0="0000:0a:00.0"
h1_NODE_PCI1="0000:0a:00.1"
h1_CORE_COUNT_ON=24
h1_CORE_COUNT_OFF=8
# Configuration for w2
w2_NODE_PCI0="0000:08:00.0"
w2_NODE_PCI1="0000:08:00.1"
w2_CORE_COUNT_ON=10
w2_CORE_COUNT_OFF=8

# Node-specific configuration variable naming:

x1_NVIDIA_DRIVER_PREFERENCE="nvidia"
x2_NVIDIA_DRIVER_PREFERENCE="nouveau"
h1_NVIDIA_DRIVER_PREFERENCE="nvidia"
w2_NVIDIA_DRIVER_PREFERENCE="nouveau"
# DEFAULT_NVIDIA_DRIVER_PREFERENCE="nouveau" # Optional: uncomment and set a global default

# USB device configuration
x1_USB_DEVICES=(
    "usb1: host=3-1"
    "usb2: host=3-2"
    "usb3: host=3-3"
    "usb4: host=3-4"
    "usb5: host=4-4"
    "usb6: host=5-1"
    "usb7: host=5-2"
    "usb8: host=5-3"
    "usb9: host=5-4"
)

x2_USB_DEVICES=(
    "usb1: host=3-1"
    "usb2: host=3-2"
    "usb3: host=3-3"
    "usb4: host=3-4"
    "usb5: host=4-4"
    "usb6: host=5-1"
    "usb7: host=5-2"
    "usb8: host=5-3"
    "usb9: host=5-4"
)

# 1-4=usbA1-int-1.0 ; 2-4=usbA1-int-3.0 ; 2-2=usbC-int-3.1 ; 1-5=LEDCon ; 1-8=usbA2-ext-2.0 ; 1-9=usbA3-ext-2.0 ; 4-1=usbA-TBdown-ext-3.1 ; 4-2=usbA-TBup-ext-3.1 ; 4-1=usbA-10g-ext-3.1 ; 4-4=usbA-BIOS-ext-3.1 ;
#
h1_USB_DEVICES=(
    "usb0: host=1-4"
    "usb1: host=2-4"
    "usb2: host=2-2"
    "usb3: host=1-8"
    "usb4: host=1-9"
)

# 1-3=USBA1-int-1.0 ; 1-4=USBA2-int-1.0 ; 2-3=USBA1-int-3.0 ; 2-4=USBA2-int-3.0 ; 3-1=USBA1-ext-1.0 ; 3-2=USBA2-ext-1.0 ; 4-1=USBA1-ext-3.0 ; 4-2=USBA2-ext-3.0 ;
#
w2_USB_DEVICES=(
    "usb0: host=1-3"
    "usb1: host=1-4"
    "usb2: host=2-3"
    "usb3: host=2-4"
    "usb4: host=3-1"
    "usb5: host=3-2"
    "usb6: host=4-1"
    "usb7: host=4-2"
)

# zfs setup
#
# define datasets
ZFS_POOL_NAME1="rpool"
ZFS_DATASET_NAME1="pbs"
ZFS_MOUNTPOINT_NAME1="/sto/pbs"

ZFS_POOL_NAME2="rpool"
ZFS_DATASET_NAME2="nfs"
ZFS_MOUNTPOINT_NAME2="/sto/nfs"

ZFS_POOL_NAME3="rpool"
ZFS_DATASET_NAME3="smb"
ZFS_MOUNTPOINT_NAME3="/sto/smb"

# btrfs setup
#
BTRFS_1_DEVICE_1="/dev/nvme0n1"
BTRFS_1_DEVICE_2="/dev/nvme2n1"
BTRFS_1_MP_1="/sto"

BTRFS_SUB_0="/sto"
BTRFS_SUB_1="/sto/pbs"
BTRFS_SUB_2="/sto/nfs"
BTRFS_SUB_3="/sto/smb"

# container setup
#
# Define download parameter for container
CT_DL_STO='local'
CT_DL_1="debian-12-standard_12.7-1_amd64.tar.zst"

# Define bindmount parameters for container 1
CT_ID_1=111
CT_MPH_1="/sto/pbs"
CT_MPC_1="/home"
# Define bindmount parameters for container 2
CT_ID_2=112
CT_MPH_2="/sto/nfs"
CT_MPC_2="/home"
# Define bindmount parameters for container 2
CT_ID_3=113
CT_MPH_3="/sto/smb"
CT_MPC_3="/home"

# container creation - declarative configuration
#

# Set site-wide container defaults
set_container_defaults \
    template="local:vztmpl/debian-12-standard_12.7-1_amd64.tar.zst" \
    storage="local-zfs" \
    rootfs_size=32 \
    memory=8192 \
    swap=8192 \
    nameserver="8.8.8.8" \
    searchdomain="fritz.box" \
    password='$(cat /tmp/lab_passwords/ct_root.pwd 2>/dev/null || generate_secure_password 20)' \
    cpus=8 \
    privileged="yes" \
    net_nic="eth0" \
    net_bridge="vmbr0" \
    cidr=24 \
    gateway="192.168.178.1" \
    ssh_key_file="/root/.ssh/h1.pub"

# Define containers using bulk creation
define_containers "111:pbs:192.168.178.111:112:nfs:192.168.178.112:113:smb:192.168.178.113"

# Individual container definitions for reference
# define_container 111 111 pbs 192.168.178.111
# define_container 112 112 nfs 192.168.178.112  
# define_container 113 113 smb 192.168.178.113

# ========================================================================
# CONTAINER OVERRIDE EXAMPLES (uncomment and modify as needed)
# ========================================================================

# Example 1: Override global defaults for all containers
# Uncomment and modify these lines to change site-wide defaults:
# set_container_defaults \
#     template="local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst" \
#     memory=4096 \
#     cpus=4 \
#     privileged="no"

# Example 2: Override specific container parameters via variables
# Uncomment and modify these lines to override individual containers:
# CT_111_MEMORY=16384        # Give PBS more memory (16GB)
# CT_111_CPUS=8              # Give PBS more CPU cores
# CT_111_PRIVILEGED=yes      # Make PBS privileged
# CT_111_ROOTFS_SIZE=64      # Give PBS larger root filesystem

# CT_112_MEMORY=4096         # NFS needs less memory
# CT_112_CPUS=2              # NFS needs fewer cores
# CT_112_NET_BRIDGE=vmbr1    # Put NFS on different bridge

# CT_113_PRIVILEGED=no       # Web/SMB server should not be privileged
# CT_113_MEMORY=2048         # SMB needs less memory
# CT_113_NAMESERVER="1.1.1.1" # Use different DNS for SMB

# Example 3: Override during container definition (positional parameters)
# Uncomment and modify this line to define a container with custom parameters:
# define_container 114 database db-server 192.168.178.114 \
#     "local:vztmpl/debian-12-standard_12.7-1_amd64.tar.zst" \
#     "local-zfs" \
#     "64" \
#     "16384" \
#     "16384" \
#     "8.8.8.8" \
#     "fritz.box" \
#     '$(generate_secure_password 20)' \
#     "8" \
#     "yes" \
#     "eth0" \
#     "vmbr0" \
#     "24" \
#     "192.168.178.1" \
#     "/root/.ssh/h1.pub"

# Example 4: Template-specific configurations
# Uncomment these for different container templates:
# CT_115_TEMPLATE="local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
# CT_116_TEMPLATE="local:vztmpl/alpine-3.18-default_20230607_amd64.tar.xz"
# CT_117_TEMPLATE="local:vztmpl/centos-9-stream-default_20221109_amd64.tar.xz"

# Example 5: Network-specific overrides
# Uncomment these for custom networking:
# CT_118_NET_BRIDGE=vmbr1              # Use different bridge
# CT_118_IP_ADDRESS=10.0.0.10         # Use different IP range
# CT_118_GATEWAY=10.0.0.1             # Use different gateway
# CT_118_CIDR=16                      # Use different subnet mask

# Example 6: Security-specific overrides
# Uncomment these for enhanced security:
# CT_119_PRIVILEGED=no                # Unprivileged container
# CT_119_PASSWORD='$(generate_secure_password 32)'  # Stronger password
# CT_119_SSH_KEY_FILE="/root/.ssh/secure_key.pub"   # Different SSH key

# ========================================================================
# END CONTAINER OVERRIDE EXAMPLES
# ========================================================================

# VM creation
#

# VM 1 (Fedora VM)
VM_1_ID=211
VM_1_NAME="fedora-vm"
VM_1_OSTYPE="l26"
VM_1_MACHINE="q35"
VM_1_ISO="local:iso/Fedora-KDE-Live-x86_64-40-1.14.iso"
VM_1_BOOT="order=scsi0"
VM_1_BIOS="ovmf"
VM_1_EFIDISK="local-lvm:1,efitype=4m,pre-enrolled-keys=1,size=1M"
VM_1_SCSIHW="virtio-scsi-single"
VM_1_AGENT="enabled=1"
VM_1_DISK="local-lvm:96,ssd=1,discard=on,iothread=1"
VM_1_SOCKETS=1
VM_1_CORES=8
VM_1_CPU="host"
VM_1_MEMORY=8192
VM_1_BALLOON=1
VM_1_NET="model=virtio,bridge=vmbr0,firewall=1"

# ========================================================================
# VM OVERRIDE EXAMPLES (uncomment and modify as needed)
# ========================================================================

# Example 1: Override global VM defaults for all VMs
# Uncomment and modify these lines to change site-wide VM defaults:
# set_vm_defaults \
#     ostype="l26" \
#     machine="q35" \
#     boot="order=scsi0" \
#     bios="ovmf" \
#     scsihw="virtio-scsi-pci" \
#     agent="1" \
#     sockets=1 \
#     cores=4 \
#     cpu="host" \
#     memory=4096 \
#     balloon=2048

# Example 2: Override specific VM parameters via variables
# Uncomment and modify these lines to override individual VMs:
# VM_211_MEMORY=16384        # Give VM 211 more memory (16GB)
# VM_211_CORES=12            # Give VM 211 more CPU cores
# VM_211_SOCKETS=2           # Use dual socket configuration
# VM_211_CPU="Skylake-Server" # Use specific CPU type
# VM_211_BALLOON=8192        # Set memory ballooning

# VM_212_OSTYPE="win11"      # Windows 11 VM
# VM_212_MACHINE="pc-q35-8.1" # Different machine type
# VM_212_BIOS="seabios"      # Use SeaBIOS instead of OVMF
# VM_212_AGENT="0"           # Disable QEMU guest agent

# VM_213_NET="model=e1000,bridge=vmbr1" # Use different network adapter and bridge
# VM_213_DISK="local-zfs:128,ssd=1,discard=on,iothread=1" # ZFS storage with larger disk

# Example 3: Override during VM definition (using define_vm function)
# Uncomment and modify this line to define a VM with custom parameters:
# define_vm 214 214 "database-vm" \
#     "local:iso/ubuntu-22.04.3-desktop-amd64.iso" \
#     "local-lvm:256,ssd=1,discard=on,iothread=1" \
#     "model=virtio,bridge=vmbr0,firewall=1" \
#     "l26" \
#     "q35" \
#     "order=scsi0" \
#     "ovmf" \
#     "local-lvm:1,efitype=4m,pre-enrolled-keys=1,size=1M" \
#     "virtio-scsi-pci" \
#     "1" \
#     "2" \
#     "16" \
#     "host" \
#     "32768" \
#     "16384"

# Example 4: Bulk VM creation using define_vms
# Uncomment this for bulk VM creation:
# define_vms "215:web-server:local:iso/debian-12.2.0-amd64-netinst.iso:local-lvm:64:model=virtio,bridge=vmbr0:216:app-server:local:iso/debian-12.2.0-amd64-netinst.iso:local-lvm:128:model=virtio,bridge=vmbr0"

# Example 5: OS-specific VM configurations
# Uncomment these for different operating systems:
# VM_217_OSTYPE="win11"                 # Windows 11
# VM_217_MACHINE="pc-q35-8.1"          # Windows-compatible machine
# VM_217_BIOS="ovmf"                    # UEFI for Windows
# VM_217_CPU="host,hidden=1,flags=+pcid" # Windows-optimized CPU

# VM_218_OSTYPE="l26"                   # Linux
# VM_218_MACHINE="q35"                  # Modern Linux machine type
# VM_218_BIOS="ovmf"                    # UEFI support
# VM_218_AGENT="1"                      # Enable guest agent

# Example 6: Performance-specific overrides
# Uncomment these for high-performance VMs:
# VM_219_CORES=16                       # High core count
# VM_219_MEMORY=65536                   # 64GB RAM
# VM_219_BALLOON=0                      # Disable ballooning for performance
# VM_219_CPU="host,migratable=off"      # Maximum performance CPU settings
# VM_219_DISK="local-nvme:512,ssd=1,discard=on,iothread=1,cache=none,aio=native"

# Example 7: Storage-specific configurations
# Uncomment these for different storage backends:
# VM_220_DISK="local-zfs:256,ssd=1"     # ZFS storage
# VM_220_EFIDISK="local-zfs:1,efitype=4m,pre-enrolled-keys=1,size=1M"

# VM_221_DISK="ceph:128,ssd=1"          # Ceph storage
# VM_221_EFIDISK="ceph:1,efitype=4m,pre-enrolled-keys=1,size=1M"

# Example 8: Network-specific configurations
# Uncomment these for custom networking:
# VM_222_NET="model=virtio,bridge=vmbr1,tag=100" # VLAN tagged
# VM_223_NET="model=e1000,bridge=vmbr2"          # Different adapter type
# VM_224_NET="model=virtio,bridge=vmbr0,rate=1000" # Bandwidth limit

# ========================================================================
# END VM OVERRIDE EXAMPLES
# ========================================================================

# NFS
#

# user creation
NFS_USERNAME_1="es"
NFS_PASSWORD_1='$(cat /tmp/lab_passwords/nfs_user.pwd 2>/dev/null || generate_secure_password 16)'

# packages
NFS_PACKAGES_ALL=(nfs-kernel-server)

# service check
NFS_SYSD_CHECK=(nfs-server)

# nfs setup
#
NFS_HEADER_1="varlibvz"
NFS_SHARED_FOLDER_1="/var/lib/vz"
NFS_OPTIONS_1="*(rw,sync,no_root_squash,no_subtree_check)"

# SMB
#

# user creation
SMB_USERNAME_0="es"
SMB_PASSWORD_0='$(cat /tmp/lab_passwords/smb_user.pwd 2>/dev/null || generate_secure_password 16)'

# packages
SMB_PACKAGES_ALL="samba"

# service check
SMB_SYSD_CHECK="smb"

# samba setup
#
SMB_HEADER_1="es"
SMB_SHARED_FOLDER_1="/home/es"
SMB_WRITABLE_YESNO_1="yes"
SMB_GUESTOK_YESNO_1="yes"
SMB_BROWSABLE_YESNO_1="yes"
SMB_USERNAME_1="es"
SMB_PASSWORD_1='$(cat /tmp/lab_passwords/smb_user.pwd 2>/dev/null || generate_secure_password 16)'
SMB_CREATE_MASK_1="0775"
SMB_DIR_MASK_1="0775"
SMB_FORCE_USER_1="es"
SMB_FORCE_GROUP_1="es"

#
SMB_HEADER_2="nobody"
SMB_SHARED_FOLDER_2="/home/nobody"
SMB_WRITABLE_YESNO_2="yes"
SMB_GUESTOK_YESNO_2="yes"
SMB_BROWSABLE_YESNO_2="yes"
SMB_USERNAME_2="nobody"
SMB_PASSWORD_2='$(cat /tmp/lab_passwords/smb_guest.pwd 2>/dev/null || generate_secure_password 12)'
SMB_CREATE_MASK_2="0775"
SMB_DIR_MASK_2="0775"
SMB_FORCE_USER_2="nobody"
SMB_FORCE_GROUP_2="nogroup"

#
# STO
#

# NFS mount settings
STO_NFS_SERVER_IP="192.168.178.112"
STO_NFS_SHARED_FOLDER="/var/lib/vz"
STO_NFS_MOUNT_POINT="/mnt/nfs_share"
STO_NFS_MOUNT_OPTIONS="rw,sync,hard,intr"

