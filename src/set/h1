#!/bin/bash
# ----------------------------------------------------------------------
# Functions:
#   a_xall: Disables enterprise repository, adds community repository, and 
#           removes subscription notice from Proxmox web interface.
#   b_xall: Installs required system packages including corosync-qdevice 
#           for cluster management.
#   c_xall: Sets up /etc/hosts entries for Proxmox nodes (x1, x2) and QDevice.
#   d_xall: Generates and distributes SSH keys for secure communication 
#           between client and server nodes.
#   i_xall: Creates a RAID 1 Btrfs filesystem across two devices with 
#           the specified mount point.
#   j_xall: Creates and configures multiple ZFS datasets with their 
#           respective mount points based on configuration.
#   p_xall: Updates container template list, downloads specified template, 
#           and updates container configuration.
#   q_xall: Creates multiple Proxmox containers using configuration 
#           parameters from cfg/env/site.
#   r_xall: Configures bind mounts for all defined containers to link 
#           host and container directories.
#   s_xall: Creates multiple virtual machines using the specifications 
#           defined in cfg/env/site.
# ----------------------------------------------------------------------

# Define script location
DIR_SH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_SH="$(basename "${BASH_SOURCE[0]}")"
BASE_SH="${FILE_SH%.*}"

# Source menu file which provides logging and other core functionality
echo "[DEBUG] Sourcing: $(realpath "$DIR_SH/.menu")"
source "$(realpath "$DIR_SH/.menu")"

# Source DIC operations for intelligent parameter resolution
source "$DIR_SH/../dic/ops"

# Declare MENU_OPTIONS
declare -A MENU_OPTIONS
MENU_OPTIONS[a]="a_xall"
MENU_OPTIONS[b]="b_xall"
MENU_OPTIONS[c]="c_xall"
MENU_OPTIONS[d]="d_xall"
MENU_OPTIONS[i]="i_xall"
MENU_OPTIONS[j]="j_xall"
MENU_OPTIONS[p]="p_xall"
MENU_OPTIONS[q]="q_xall"
MENU_OPTIONS[r]="r_xall"
MENU_OPTIONS[s]="s_xall"

# Disables enterprise repository, adds community repository, and removes subscription notice from Proxmox web interface
a_xall() {
    ops pve dsr -j
    ops usr adr -j
    ops pve rsn -j
}

# Installs required system packages including corosync-qdevice for cluster management
b_xall() {
    ops sys ipa -j
}

# Sets up /etc/hosts entries for Proxmox nodes (x1, x2) and QDevice
c_xall() {
    # DIC will auto-resolve NODE1_IP, NODE2_IP, QDEVICE_IP from environment
    # and inject appropriate hostname mappings
    ops sys hos x1 -j
    ops sys hos x2 -j
    ops sys hos qdevice -j
}

# Generates and distributes SSH keys for secure communication between client and server nodes
d_xall() {
    ops sys sks -j
    ops ssh sak -j
}

# Creates a RAID 1 Btrfs filesystem across two devices with the specified mount point
i_xall() {
    ops sto bfs ra1 -j
}

# Creates and configures multiple ZFS datasets with their respective mount points based on configuration
j_xall() {
    # DIC will handle iteration over ZFS_POOL_NAME*, ZFS_DATASET_NAME*, ZFS_MOUNTPOINT_NAME* arrays
    ops sto zfs dim -j
}

# Updates container template list, downloads specified template, and updates container configuration
p_xall() {
    ops pve clu -j
    ops pve cdo -j
    ops usr cuc -j
}

# Creates multiple Proxmox containers using configuration parameters from cfg/env/site
q_xall() {
    # DIC will handle iteration over CT_*_* configuration arrays and create containers
    ops pve ctc -j
}

# Configures bind mounts for all defined containers to link host and container directories
r_xall() {
    # DIC will handle iteration over CT_ID_*, CT_MPH_*, CT_MPC_* arrays
    ops pve cbm -j
}

# Creates multiple virtual machines using the specifications defined in cfg/env/site
s_xall() {
    # DIC will handle iteration over VM_*_* configuration arrays and create VMs
    ops pve vmc -j
}

# Handle script execution
if [ $# -eq 0 ]; then
    print_usage
    clean_exit 0       # Exit cleanly with status 0
else
    setup_main "$@"
    clean_exit $?
fi
