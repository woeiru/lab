#!/bin/bash

# ============================================================================
# PVE MANAGEMENT WRAPPER FUNCTIONS
# ============================================================================
#
# DESCRIPTION:
#   This file contains management wrapper functions for Proxmox VE (PVE) 
#   operations. These wrappers bridge the gap between pure library functions 
#   in /lib/ops/pve and the global configuration environment, providing a
#   clean separation between testable pure functions and environment-dependent
#   management layer functions.
#
# ARCHITECTURE:
#   ┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
#   │   User/Script   │ -> │  Wrapper (-w)    │ -> │  Pure Function  │
#   │                 │    │  src/mgt/pve     │    │  lib/ops/pve    │
#   └─────────────────┘    └──────────────────┘    └─────────────────┘
#                                   │
#                                   v
#                          ┌──────────────────┐
#                          │  Global Config   │
#                          │  Environment     │
#                          └──────────────────┘
#
# DESIGN PRINCIPLES:
#   - Separation of Concerns: Pure functions handle logic, wrappers handle globals
#   - Testability: Pure functions can be tested in isolation with explicit parameters
#   - Maintainability: Global variable dependencies are centralized in wrappers
#   - Consistency: All wrapper functions follow the same pattern and naming convention
#
# NAMING CONVENTION:
#   - Pure functions: Three-letter names (e.g., pve_fun, pve_var, pve_vmd)
#   - Wrapper functions: Pure function name + "-w" suffix (e.g., pve_fun_w)
#   - Global variables: Follow established site configuration patterns
#
# WRAPPER PATTERN:
#   Each wrapper function follows this standardized pattern:
#   1. Source the pure library function from ${LIB_OPS_DIR}/pve
#   2. Extract global variables and convert to explicit parameters
#   3. Validate required parameters (with error handling for missing globals)
#   4. Call the pure function with explicit parameters
#   5. Return the result unchanged
#
# GLOBAL DEPENDENCIES:
#   - LIB_OPS_DIR: Path to pure function libraries
#   - FILEPATH_pve: Path to PVE configuration/script file
#   - CONFIG_pve: Path to PVE configuration file
#   - CLUSTER_NODES: Array of cluster node names
#   - PVE_CONF_PATH_QEMU: Path to QEMU VM configuration directory
#   - Hostname-specific variables: ${hostname}_NODE_PCI*, ${hostname}_CORE_COUNT_*, etc.
#
# USAGE EXAMPLES:
#   # Use wrapper functions in scripts that have global environment loaded
#   pve_fun_w                    # List available functions
#   pve_var_w                    # Show configuration variables
#   pve_vck_w 100                # Check VM 100 location
#   pve_vpt_w 100 on             # Enable passthrough for VM 100
#   pve_vms_w 100                # Start VM 100 with passthrough
#
# FUNCTION INVENTORY:
#   pve_fun_w : List available PVE functions (wrapper for pve_fun)
#   pve_var_w : Display PVE configuration variables (wrapper for pve_var)  
#   pve_vmd_w : VM shutdown hook management (wrapper for pve_vmd)
#   pve_vck_w : VM cluster node location check (wrapper for pve_vck)
#   pve_vpt_w : VM PCI passthrough toggle (wrapper for pve_vpt)
#   pve_ctc_w : Container creation with full configuration (wrapper for pve_ctc)
#   pve_vmc_w : Virtual machine creation with full configuration (wrapper for pve_vmc)
#   pve_vms_w : VM start/shutdown with passthrough management (wrapper for pve_vms)
#   pve_vmg_w : VM migration and start orchestration (wrapper for pve_vmg)
#
# ============================================================================

# Define directory and file variables for wrapper identification
# Note: We don't create FILEPATH_pve here to avoid overwriting the library variable
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Create wrapper-specific variables (avoiding collision with library variables)
eval "FILEPATH_${BASE_FUN}_wrapper=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}_wrapper=\$FILE_FUN"
eval "BASE_${BASE_FUN}_wrapper=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}_wrapper=\$CONFIG_FUN"

# Wrapper for pve_vmd that extracts global variables and calls the pure function
# vm shutdown hook (wrapper)
pve_vmd_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Extract global variables and call pure function
    local hook_script="/var/lib/vz/snippets/gpu-reattach-hook.pl"
    local lib_ops_dir="${LIB_OPS_DIR}"
    
    local operation="$1"
    local vm_id="$2"
    shift 2
    
    pve_vmd "$operation" "$vm_id" "$hook_script" "$lib_ops_dir" "$@"
}

# Wrapper for pve_vck that extracts global variables and calls the pure function
# vm check node (wrapper)
pve_vck_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Extract global variables and call pure function
    local vm_id="$1"
    local cluster_nodes_str="${CLUSTER_NODES[*]}"
    
    pve_vck "$vm_id" "$cluster_nodes_str"
}

# Wrapper for pve_vpt that extracts global variables and calls the pure function
# vm passthrough toggle (wrapper)
pve_vpt_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Get hostname for variable names
    local hostname=$(hostname)
    
    # Extract global variables
    local vm_id="$1"
    local action="$2"
    local pci0_var="${hostname}_NODE_PCI0"
    local pci1_var="${hostname}_NODE_PCI1"
    local core_count_on_var="${hostname}_CORE_COUNT_ON"
    local core_count_off_var="${hostname}_CORE_COUNT_OFF"
    local usb_devices_var="${hostname}_USB_DEVICES[@]"
    
    # Get values from global variables
    local pci0_id="${!pci0_var}"
    local pci1_id="${!pci1_var}"
    local core_count_on="${!core_count_on_var}"
    local core_count_off="${!core_count_off_var}"
    
    # Handle USB devices array properly - convert to newline-separated string
    local usb_devices_str=""
    echo "DEBUG WRAPPER: hostname='$hostname'" >&2
    echo "DEBUG WRAPPER: usb_devices_var='$usb_devices_var'" >&2
    echo "DEBUG WRAPPER: checking if variable exists: '${!usb_devices_var}'" >&2
    
    # Check if the array variable exists and has elements
    # Use declare -p to avoid "too many arguments" error with spaces in array expansion
    local array_name="${usb_devices_var%[@]*}"  # Remove [@] to get base array name
    if declare -p "$array_name" >/dev/null 2>&1; then
        # Array exists, now check if it has elements
        if [[ -n "${!usb_devices_var}" ]]; then
            # Use printf to join array elements with newlines
            usb_devices_str=$(printf '%s\n' "${!usb_devices_var}")
            echo "DEBUG WRAPPER: usb_devices_str after printf: '$usb_devices_str'" >&2
        else
            echo "DEBUG WRAPPER: USB devices array exists but is empty" >&2
        fi
    else
        echo "DEBUG WRAPPER: USB devices array variable '$array_name' is not defined" >&2
    fi
    local pve_conf_path="${PVE_CONF_PATH_QEMU}"
    
    # Validate required variables are set
    if [[ -z "$pci0_id" || -z "$pci1_id" || -z "$core_count_on" || -z "$core_count_off" || -z "$pve_conf_path" ]]; then
        echo "Error: Missing required global variables for hostname '$hostname'"
        echo "Required: ${pci0_var}, ${pci1_var}, ${core_count_on_var}, ${core_count_off_var}, PVE_CONF_PATH_QEMU"
        return 1
    fi
    
    pve_vpt "$vm_id" "$action" "$pci0_id" "$pci1_id" "$core_count_on" "$core_count_off" "$usb_devices_str" "$pve_conf_path"
}

# Wrapper for pve_fun that extracts global variables and calls the pure function
# overview functions (wrapper)
pve_fun_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Extract global variable and call pure function
    local script_path="${FILEPATH_pve}"
    
    pve_fun "$script_path" "$@"
}

# Wrapper for pve_var that extracts global variables and calls the pure function  
# overview variables (wrapper)
pve_var_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Extract global variables and call pure function
    local config_file="${CONFIG_pve}"
    local analysis_dir="${DIR_FUN}/.."
    
    pve_var "$config_file" "$analysis_dir" "$@"
}

# Wrapper for pve_ctc that extracts global variables and calls the pure function
# container create (wrapper)
pve_ctc_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Extract global variables for container creation
    # These would typically come from site configuration
    local id="$1"
    local template="$2"
    local hostname="$3"
    local storage="$4"
    local rootfs_size="$5"
    local memory="$6"
    local swap="$7"
    local nameserver="$8"
    local searchdomain="$9"
    local password="${10}"
    local cpus="${11}"
    local privileged="${12}"
    local ip_address="${13}"
    local cidr="${14}"
    local gateway="${15}"
    local ssh_key_file="${16}"
    local net_bridge="${17}"
    local net_nic="${18}"
    
    # Call pure function with explicit parameters
    pve_ctc "$id" "$template" "$hostname" "$storage" "$rootfs_size" "$memory" "$swap" "$nameserver" "$searchdomain" "$password" "$cpus" "$privileged" "$ip_address" "$cidr" "$gateway" "$ssh_key_file" "$net_bridge" "$net_nic"
}

# Wrapper for pve_vmc that extracts global variables and calls the pure function
# virtual machine create (wrapper)
pve_vmc_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Extract global variables for VM creation
    # These would typically come from site configuration
    local id="$1"
    local name="$2"
    local ostype="$3"
    local machine="$4"
    local iso="$5"
    local boot="$6"
    local bios="$7"
    local efidisk="$8"
    local scsihw="$9"
    local agent="${10}"
    local disk="${11}"
    local sockets="${12}"
    local cores="${13}"
    local cpu="${14}"
    local memory="${15}"
    local balloon="${16}"
    local net="${17}"
    
    # Call pure function with explicit parameters
    pve_vmc "$id" "$name" "$ostype" "$machine" "$iso" "$boot" "$bios" "$efidisk" "$scsihw" "$agent" "$disk" "$sockets" "$cores" "$cpu" "$memory" "$balloon" "$net"
}

# Wrapper for pve_vms that extracts global variables and calls the pure function
# vm start get shutdown (wrapper)
pve_vms_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Get hostname for variable names
    local hostname=$(hostname)
    
    # Extract global variables
    local vm_id="$1"
    local shutdown_flag="$2"
    local cluster_nodes_str="${CLUSTER_NODES[*]}"
    local pci0_var="${hostname}_NODE_PCI0"
    local pci1_var="${hostname}_NODE_PCI1"
    local core_count_on_var="${hostname}_CORE_COUNT_ON"
    local core_count_off_var="${hostname}_CORE_COUNT_OFF"
    local usb_devices_var="${hostname}_USB_DEVICES[@]"
    
    # Get values from global variables
    local pci0_id="${!pci0_var}"
    local pci1_id="${!pci1_var}"
    local core_count_on="${!core_count_on_var}"
    local core_count_off="${!core_count_off_var}"
    
    # Handle USB devices array properly - convert to newline-separated string
    local usb_devices_str=""
    
    # Check if the array variable exists and has elements
    # Use declare -p to avoid "too many arguments" error with spaces in array expansion
    local array_name="${usb_devices_var%[@]*}"  # Remove [@] to get base array name
    if declare -p "$array_name" >/dev/null 2>&1; then
        # Array exists, now check if it has elements
        if [[ -n "${!usb_devices_var}" ]]; then
            # Use printf to join array elements with newlines
            usb_devices_str=$(printf '%s\n' "${!usb_devices_var}")
        fi
    fi
    local pve_conf_path="${PVE_CONF_PATH_QEMU}"
    
    # Validate required variables are set
    if [[ -z "$cluster_nodes_str" || -z "$pci0_id" || -z "$pci1_id" || -z "$core_count_on" || -z "$core_count_off" || -z "$pve_conf_path" ]]; then
        echo "Error: Missing required global variables for hostname '$hostname'"
        echo "Required: CLUSTER_NODES, ${pci0_var}, ${pci1_var}, ${core_count_on_var}, ${core_count_off_var}, PVE_CONF_PATH_QEMU"
        return 1
    fi
    
    pve_vms "$vm_id" "$cluster_nodes_str" "$pci0_id" "$pci1_id" "$core_count_on" "$core_count_off" "$usb_devices_str" "$pve_conf_path" "$shutdown_flag"
}

# Wrapper for pve_vmg that extracts global variables and calls the pure function
# vm get start (wrapper)
pve_vmg_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pve"
    
    # Get hostname for variable names
    local hostname=$(hostname)
    
    # Extract global variables
    local vm_id="$1"
    local cluster_nodes_str="${CLUSTER_NODES[*]}"
    local pci0_var="${hostname}_NODE_PCI0"
    local pci1_var="${hostname}_NODE_PCI1"
    local core_count_on_var="${hostname}_CORE_COUNT_ON"
    local core_count_off_var="${hostname}_CORE_COUNT_OFF"
    local usb_devices_var="${hostname}_USB_DEVICES[@]"
    
    # Get values from global variables
    local pci0_id="${!pci0_var}"
    local pci1_id="${!pci1_var}"
    local core_count_on="${!core_count_on_var}"
    local core_count_off="${!core_count_off_var}"
    
    # Handle USB devices array properly - convert to newline-separated string
    local usb_devices_str=""
    
    # Check if the array variable exists and has elements
    # Use declare -p to avoid "too many arguments" error with spaces in array expansion
    local array_name="${usb_devices_var%[@]*}"  # Remove [@] to get base array name
    if declare -p "$array_name" >/dev/null 2>&1; then
        # Array exists, now check if it has elements
        if [[ -n "${!usb_devices_var}" ]]; then
            # Use printf to join array elements with newlines
            usb_devices_str=$(printf '%s\n' "${!usb_devices_var}")
        fi
    fi
    local pve_conf_path="${PVE_CONF_PATH_QEMU}"
    
    # Validate required variables are set
    if [[ -z "$cluster_nodes_str" || -z "$pci0_id" || -z "$pci1_id" || -z "$core_count_on" || -z "$core_count_off" || -z "$pve_conf_path" ]]; then
        echo "Error: Missing required global variables for hostname '$hostname'"
        echo "Required: CLUSTER_NODES, ${pci0_var}, ${pci1_var}, ${core_count_on_var}, ${core_count_off_var}, PVE_CONF_PATH_QEMU"
        return 1
    fi
    
    pve_vmg "$vm_id" "$cluster_nodes_str" "$pci0_id" "$pci1_id" "$core_count_on" "$core_count_off" "$usb_devices_str" "$pve_conf_path"
}
