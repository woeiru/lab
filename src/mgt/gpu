#!/bin/bash

# ============================================================================
# GPU MANAGEMENT WRAPPER FUNCTIONS
# ============================================================================
#
# DESCRIPTION:
#   This file contains management wrapper functions for GPU passthrough
#   operations. These wrappers bridge the gap between pure library functions 
#   in /lib/ops/gpu and the global configuration environment, providing a
#   clean separation between testable pure functions and environment-dependent
#   management layer functions.
#
# ARCHITECTURE:
#   ┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
#   │   User/Script   │ -> │  Wrapper (-w)    │ -> │  Pure Function  │
#   │                 │    │  src/mgt/gpu     │    │  lib/ops/gpu    │
#   └─────────────────┘    └──────────────────┘    └─────────────────┘
#                                   │
#                                   v
#                          ┌──────────────────┐
#                          │  Global Config   │
#                          │  Environment     │
#                          └──────────────────┘
#
# DESIGN PRINCIPLES:
#   - Separation of Concerns: Pure functions handle logic, wrappers handle globals
#   - Testability: Pure functions can be tested in isolation with explicit parameters
#   - Maintainability: Global variable dependencies are centralized in wrappers
#   - Consistency: All wrapper functions follow the same pattern and naming convention
#
# NAMING CONVENTION:
#   - Pure functions: Three-letter names (e.g., gpu-fun, gpu_var, gpu-nds)
#   - Wrapper functions: Pure function name + "-w" suffix (e.g., gpu-fun-w)
#   - Global variables: Follow established site configuration patterns
#
# WRAPPER PATTERN:
#   Each wrapper function follows this standardized pattern:
#   1. Source the pure library function from ${LIB_OPS_DIR}/gpu
#   2. Extract global variables and convert to explicit parameters
#   3. Validate required parameters (with error handling for missing globals)
#   4. Call the pure function with explicit parameters
#   5. Return the result unchanged
#
# GLOBAL DEPENDENCIES:
#   - LIB_OPS_DIR: Path to pure function libraries
#   - SITE_CONFIG_FILE: Path to site configuration file
#   - Hostname-specific variables:
#     * ${hostname}_NODE_PCI0: Primary GPU PCI ID
#     * ${hostname}_NODE_PCI1: Secondary GPU PCI ID  
#     * ${hostname}_NVIDIA_DRIVER_PREFERENCE: Preferred NVIDIA driver
#
# USAGE EXAMPLES:
#   # Use wrapper functions in scripts that have global environment loaded
#   gpu-fun-w                    # List available functions
#   gpu_var-w                    # Show configuration variables
#   gpu-nds-w 550.142            # Download/install NVIDIA drivers
#   gpu_pt1-w                    # Configure GRUB for GPU passthrough
#   gpu_pt2-w                    # Add VFIO modules
#   gpu_pt3-w enable             # Enable persistent GPU passthrough
#   gpu_ptd-w                    # Detach GPU for VM use
#   gpu_pta-w                    # Attach GPU back to host
#   gpu_pts-w                    # Show GPU status
#
# TESTING:
#   - Unit tests can call pure functions directly with explicit parameters
#   - Integration tests can call wrapper functions with environment loaded
#   - Pure functions are isolated from global state dependencies
#
# REFACTORING HISTORY:
#   Created: 2025-05-29 - Separated 9 wrapper functions from pure functions
#   Purpose: Enable testing and reduce global variable coupling
#   Follows: PVE refactoring pattern established in src/mgt/pve
#
# FUNCTION INVENTORY:
#   gpu-fun-w : List available GPU functions (wrapper for gpu-fun)
#   gpu_var-w : Display GPU configuration variables (wrapper for gpu_var)
#   gpu-nds-w : NVIDIA driver download/install (wrapper for gpu-nds)
#   gpu_pt1-w : GRUB/EFI GPU passthrough setup (wrapper for gpu_pt1)
#   gpu_pt2-w : VFIO kernel modules setup (wrapper for gpu_pt2)
#   gpu_pt3-w : Persistent GPU passthrough configuration (wrapper for gpu_pt3)
#   gpu_ptd-w : GPU detachment for VM passthrough (wrapper for gpu_ptd)
#   gpu_pta-w : GPU attachment back to host (wrapper for gpu_pta)
#   gpu_pts-w : GPU status and configuration check (wrapper for gpu_pts)
#
# ============================================================================

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Wrapper for gpu-fun that extracts global variables and calls the pure function
# shows a summary of selected functions in the script (wrapper)
gpu-fun-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # Extract global variables and call pure function
    local filepath_gpu="${LIB_OPS_DIR}/gpu"
    
    gpu-fun "$filepath_gpu" "$@"
}

# Wrapper for gpu_var that extracts global variables and calls the pure function
# displays an overview of specific variables (wrapper)
gpu_var-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # Extract global variables and call pure function
    local config_gpu="${SITE_CONFIG_FILE}"
    local lib_ops_parent_dir="${LIB_OPS_DIR}/.."
    
    gpu_var "$config_gpu" "$lib_ops_parent_dir"
}

# Wrapper for gpu-nds that extracts global variables and calls the pure function  
# downloads and installs NVIDIA drivers, blacklisting Nouveau (wrapper)
gpu-nds-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # No global variable dependencies for this function
    gpu-nds "$@"
}

# Wrapper for gpu_pt1 that extracts global variables and calls the pure function
# configures initial GRUB and EFI settings for GPU passthrough (wrapper)
gpu_pt1-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # No global variable dependencies for this function
    gpu_pt1
}

# Wrapper for gpu_pt2 that extracts global variables and calls the pure function
# adds necessary kernel modules for GPU passthrough (wrapper)
gpu_pt2-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # No global variable dependencies for this function
    gpu_pt2
}

# Wrapper for gpu_pt3 that extracts global variables and calls the pure function
# finalizes or reverts GPU passthrough setup (wrapper)
gpu_pt3-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # No global variable dependencies for this function (action is passed as parameter)
    gpu_pt3 "$@"
}

# Wrapper for gpu_ptd that extracts global variables and calls the pure function
# detaches the GPU from the host system for VM passthrough (wrapper)
gpu_ptd-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # Extract global variables and call pure function
    local hostname=$(hostname -s)
    local config_file="${SITE_CONFIG_FILE}"
    local gpu_id_arg="$1"
    
    # Get hostname-specific PCI IDs
    local pci0_var="${hostname}_NODE_PCI0"
    local pci1_var="${hostname}_NODE_PCI1"
    local nvidia_driver_pref_var="${hostname}_NVIDIA_DRIVER_PREFERENCE"
    
    local pci0_id="${!pci0_var:-}"
    local pci1_id="${!pci1_var:-}"
    local nvidia_driver_preference="${!nvidia_driver_pref_var:-nvidia}"
    
    gpu_ptd "$gpu_id_arg" "$hostname" "$config_file" "$pci0_id" "$pci1_id" "$nvidia_driver_preference"
}

# Wrapper for gpu_pta that extracts global variables and calls the pure function
# attaches the GPU back to the host system (wrapper)
gpu_pta-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # Extract global variables and call pure function
    local hostname=$(hostname -s)
    local config_file="${SITE_CONFIG_FILE}"
    local gpu_id_arg="$1"
    
    # Get hostname-specific PCI IDs
    local pci0_var="${hostname}_NODE_PCI0"
    local pci1_var="${hostname}_NODE_PCI1"
    local nvidia_driver_pref_var="${hostname}_NVIDIA_DRIVER_PREFERENCE"
    
    local pci0_id="${!pci0_var:-}"
    local pci1_id="${!pci1_var:-}"
    local nvidia_driver_preference="${!nvidia_driver_pref_var:-nvidia}"
    
    gpu_pta "$gpu_id_arg" "$hostname" "$config_file" "$pci0_id" "$pci1_id" "$nvidia_driver_preference"
}

# Wrapper for gpu_pts that extracts global variables and calls the pure function
# checks the current status of the GPU (complete detailed version) (wrapper)
gpu_pts-w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/gpu"
    
    # Extract global variables and call pure function
    local hostname=$(hostname -s)
    local config_file="${SITE_CONFIG_FILE}"
    
    # Get hostname-specific PCI IDs and driver preferences
    local pci0_var="${hostname}_NODE_PCI0"
    local pci1_var="${hostname}_NODE_PCI1"
    local nvidia_driver_pref_var="${hostname}_NVIDIA_DRIVER_PREFERENCE"
    
    local pci0_id="${!pci0_var:-}"
    local pci1_id="${!pci1_var:-}"
    local nvidia_driver_preference="${!nvidia_driver_pref_var:-nvidia}"
    
    gpu_pts "$hostname" "$config_file" "$pci0_id" "$pci1_id" "$nvidia_driver_preference"
}
