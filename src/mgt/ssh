# filepath: /home/es/lab/src/mgt/ssh
#!/bin/bash

# ============================================================================
# SSH MANAGEMENT WRAPPER FUNCTIONS
# ============================================================================
#
# DESCRIPTION:
#   This file contains management wrapper functions for SSH operations.
#   These wrappers bridge the gap between pure library functions in /lib/ops/ssh
#   and the global configuration environment, providing a clean separation
#   between testable pure functions and environment-dependent management layer
#   functions.
#
# ARCHITECTURE:
#   ┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
#   │   User/Script   │ -> │  Wrapper (-w)    │ -> │  Pure Function  │
#   │                 │    │  src/mgt/ssh     │    │  lib/ops/ssh    │
#   └─────────────────┘    └──────────────────┘    └─────────────────┘
#                                   │
#                                   v
#                          ┌──────────────────┐
#                          │  Global Config   │
#                          │  Environment     │
#                          └──────────────────┘
#
# DESIGN PRINCIPLES:
#   - Separation of Concerns: Pure functions handle logic, wrappers handle globals
#   - Testability: Pure functions can be tested in isolation with explicit parameters
#   - Maintainability: Global variable dependencies are centralized in wrappers
#   - Consistency: All wrapper functions follow the same pattern and naming convention
#
# NAMING CONVENTION:
#   - Pure functions: Three-letter names (e.g., ssh-fun, ssh-var, ssh-key)
#   - Wrapper functions: Pure function name + "-w" suffix (e.g., ssh-fun-w)
#   - Global variables: Follow established site configuration patterns
#
# WRAPPER PATTERN:
#   Each wrapper function follows this standardized pattern:
#   1. Source the pure library function from ${LIB_OPS_DIR}/ssh
#   2. Extract global variables and convert to explicit parameters
#   3. Validate required parameters (with error handling for missing globals)
#   4. Call the pure function with explicit parameters
#   5. Return the result unchanged
#
# GLOBAL DEPENDENCIES:
#   - LIB_OPS_DIR: Path to pure function libraries
#   - SITE_CONFIG_FILE: Path to site configuration file
#   - SSH_TARGET_IP: Default target IP for SSH operations
#   - SSH_KEY_COMMENT: Comment for generated SSH keys
#   - SSH_KEY_PATHS: Array of SSH key paths to load
#
# USAGE EXAMPLES:
#   # Use wrapper functions in scripts that have global environment loaded
#   ssh-fun-w                    # List available functions
#   ssh-var-w                    # Show configuration variables
#   ssh-key-w                    # Load SSH keys from configuration
#   ssh-lst-w                    # List loaded SSH keys
#   ssh-rmv-w                    # Remove all SSH keys
#   ssh-gen-w ed25519            # Generate ed25519 key with default comment
#   ssh-cpy-w ~/.ssh/id_ed25519.pub root@192.168.1.100  # Copy key to host
#   ssh-agt-w                    # Start SSH agent
#
# TESTING:
#   - Unit tests can call pure functions directly with explicit parameters
#   - Integration tests can call wrapper functions with environment loaded
#   - Pure functions are isolated from global state dependencies
#
# REFACTORING HISTORY:
#   Created: 2025-06-01 - Separated 8 wrapper functions from pure functions
#   Purpose: Enable testing and reduce global variable coupling
#   Follows: PVE and GPU refactoring pattern established in src/mgt/
#
# FUNCTION INVENTORY:
#   ssh-fun-w : List available SSH functions (wrapper for ssh-fun)
#   ssh-var-w : Display SSH configuration variables (wrapper for ssh-var)
#   ssh-key-w : Load SSH keys from configuration (wrapper for ssh-key)
#   ssh-lst-w : List SSH keys in agent (wrapper for ssh-lst)
#   ssh-rmv-w : Remove all SSH keys from agent (wrapper for ssh-rmv)
#   ssh-gen-w : Generate SSH keys with defaults (wrapper for ssh-gen)
#   ssh-cpy-w : Copy SSH key to remote host (wrapper for ssh-cpy)
#   ssh-agt-w : Start SSH agent (wrapper for ssh-agt)
#
# ============================================================================

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Wrapper for ssh-fun that extracts global variables and calls the pure function
# shows a summary of selected functions in the script (wrapper)
ssh-fun-w() {
    # Technical Description:
    #   Wrapper function that sources the pure ssh-fun library function and
    #   calls it with the current script path as parameter.
    # Dependencies:
    #   - LIB_OPS_DIR global variable
    #   - ssh-fun pure function from lib/ops/ssh
    # Arguments:
    #   $@: additional arguments forwarded to ssh-fun
    # Returns:
    #   Exit status of ssh-fun command
    # Examples:
    #   ssh-fun-w
    #   ssh-fun-w --detailed
    
    local script_path="${FILEPATH_FUN}"
    
    # Validate required global variables
    if [[ -z "${LIB_OPS_DIR}" ]]; then
        echo "Error: LIB_OPS_DIR not set" >&2
        return 1
    fi
    
    # Source and call pure function
    source "${LIB_OPS_DIR}/ssh"
    ssh-fun "$script_path" "$@"
}

# Wrapper for ssh-var that extracts global variables and calls the pure function
# displays an overview of specific variables (wrapper)
ssh-var-w() {
    # Technical Description:
    #   Wrapper function that sources the pure ssh-var library function and
    #   calls it with configuration file and library parent directory.
    # Dependencies:
    #   - LIB_OPS_DIR global variable
    #   - SITE_CONFIG_FILE global variable
    #   - ssh-var pure function from lib/ops/ssh
    # Arguments:
    #   None
    # Returns:
    #   Exit status of ssh-var command
    # Examples:
    #   ssh-var-w
    
    local config_file="${SITE_CONFIG_FILE}"
    local lib_parent_dir="$(dirname "${LIB_OPS_DIR}")"
    
    # Validate required global variables
    if [[ -z "${LIB_OPS_DIR}" ]]; then
        echo "Error: LIB_OPS_DIR not set" >&2
        return 1
    fi
    
    if [[ -z "${SITE_CONFIG_FILE}" ]]; then
        echo "Error: SITE_CONFIG_FILE not set" >&2
        return 1
    fi
    
    # Source and call pure function
    source "${LIB_OPS_DIR}/ssh"
    ssh-var "$config_file" "$lib_parent_dir"
}

# Wrapper for ssh-key that extracts global variables and calls the pure function
# loads SSH keys from configuration into agent (wrapper)
ssh-key-w() {
    # Technical Description:
    #   Wrapper function that sources the pure ssh-key library function and
    #   calls it with SSH key paths from global configuration.
    # Dependencies:
    #   - LIB_OPS_DIR global variable
    #   - SSH_KEY_PATHS global array variable
    #   - ssh-key pure function from lib/ops/ssh
    # Arguments:
    #   None
    # Returns:
    #   Exit status of ssh-key command
    # Examples:
    #   ssh-key-w
    
    # Validate required global variables
    if [[ -z "${LIB_OPS_DIR}" ]]; then
        echo "Error: LIB_OPS_DIR not set" >&2
        return 1
    fi
    
    if [[ -z "${SSH_KEY_PATHS}" ]]; then
        echo "Error: SSH_KEY_PATHS not set" >&2
        return 1
    fi
    
    # Source and call pure function
    source "${LIB_OPS_DIR}/ssh"
    ssh-key SSH_KEY_PATHS
}

# Wrapper for ssh-lst that extracts global variables and calls the pure function
# lists SSH keys currently loaded in agent (wrapper)
ssh-lst-w() {
    # Technical Description:
    #   Wrapper function that sources the pure ssh-lst library function and
    #   calls it directly (no parameters needed).
    # Dependencies:
    #   - LIB_OPS_DIR global variable
    #   - ssh-lst pure function from lib/ops/ssh
    # Arguments:
    #   None
    # Returns:
    #   Exit status of ssh-lst command
    # Examples:
    #   ssh-lst-w
    
    # Validate required global variables
    if [[ -z "${LIB_OPS_DIR}" ]]; then
        echo "Error: LIB_OPS_DIR not set" >&2
        return 1
    fi
    
    # Source and call pure function
    source "${LIB_OPS_DIR}/ssh"
    ssh-lst
}

# Wrapper for ssh-rmv that extracts global variables and calls the pure function
# removes all SSH keys from agent (wrapper)
ssh-rmv-w() {
    # Technical Description:
    #   Wrapper function that sources the pure ssh-rmv library function and
    #   calls it directly (no parameters needed).
    # Dependencies:
    #   - LIB_OPS_DIR global variable
    #   - ssh-rmv pure function from lib/ops/ssh
    # Arguments:
    #   None
    # Returns:
    #   Exit status of ssh-rmv command
    # Examples:
    #   ssh-rmv-w
    
    # Validate required global variables
    if [[ -z "${LIB_OPS_DIR}" ]]; then
        echo "Error: LIB_OPS_DIR not set" >&2
        return 1
    fi
    
    # Source and call pure function
    source "${LIB_OPS_DIR}/ssh"
    ssh-rmv
}

# Wrapper for ssh-gen that extracts global variables and calls the pure function
# generates SSH keys with configuration defaults (wrapper)
ssh-gen-w() {
    # Technical Description:
    #   Wrapper function that sources the pure ssh-gen library function and
    #   calls it with key type, default comment, and optional output path.
    # Dependencies:
    #   - LIB_OPS_DIR global variable
    #   - SSH_KEY_COMMENT global variable
    #   - ssh-gen pure function from lib/ops/ssh
    # Arguments:
    #   $1: key_type - type of key to generate (ed25519, rsa)
    #   $2: output_path - optional path where to save the key
    # Returns:
    #   Exit status of ssh-gen command
    # Examples:
    #   ssh-gen-w ed25519
    #   ssh-gen-w rsa /root/.ssh/custom_rsa
    
    local key_type="$1"
    local output_path="$2"
    local comment="${SSH_KEY_COMMENT:-woeiru/lab}"
    
    # Validate required parameters
    if [[ -z "$key_type" ]]; then
        echo "Error: key_type parameter required" >&2
        echo "Usage: ssh-gen-w <key_type> [output_path]" >&2
        return 1
    fi
    
    # Validate required global variables
    if [[ -z "${LIB_OPS_DIR}" ]]; then
        echo "Error: LIB_OPS_DIR not set" >&2
        return 1
    fi
    
    # Source and call pure function
    source "${LIB_OPS_DIR}/ssh"
    ssh-gen "$key_type" "$comment" "$output_path"
}

# Wrapper for ssh-cpy that extracts global variables and calls the pure function
# copies SSH key to remote host with optional defaults (wrapper)
ssh-cpy-w() {
    # Technical Description:
    #   Wrapper function that sources the pure ssh-cpy library function and
    #   calls it with public key path and target host. Uses SSH_TARGET_IP as
    #   default if target_host parameter contains only username.
    # Dependencies:
    #   - LIB_OPS_DIR global variable
    #   - SSH_TARGET_IP global variable (optional)
    #   - ssh-cpy pure function from lib/ops/ssh
    # Arguments:
    #   $1: public_key_path - path to the public key file
    #   $2: target_host - target host in format [user@]hostname[:port]
    # Returns:
    #   Exit status of ssh-cpy command
    # Examples:
    #   ssh-cpy-w /root/.ssh/id_ed25519.pub root@192.168.1.100
    #   ssh-cpy-w /root/.ssh/id_rsa.pub root@  # uses SSH_TARGET_IP
    
    local public_key_path="$1"
    local target_host="$2"
    
    # Validate required parameters
    if [[ -z "$public_key_path" ]]; then
        echo "Error: public_key_path parameter required" >&2
        echo "Usage: ssh-cpy-w <public_key_path> <target_host>" >&2
        return 1
    fi
    
    if [[ -z "$target_host" ]]; then
        echo "Error: target_host parameter required" >&2
        echo "Usage: ssh-cpy-w <public_key_path> <target_host>" >&2
        return 1
    fi
    
    # Use SSH_TARGET_IP as fallback if target_host ends with @
    if [[ "$target_host" == *@ && -n "${SSH_TARGET_IP}" ]]; then
        target_host="${target_host}${SSH_TARGET_IP}"
    fi
    
    # Validate required global variables
    if [[ -z "${LIB_OPS_DIR}" ]]; then
        echo "Error: LIB_OPS_DIR not set" >&2
        return 1
    fi
    
    # Source and call pure function
    source "${LIB_OPS_DIR}/ssh"
    ssh-cpy "$public_key_path" "$target_host"
}

# Wrapper for ssh-agt that extracts global variables and calls the pure function
# starts SSH agent if not running (wrapper)
ssh-agt-w() {
    # Technical Description:
    #   Wrapper function that sources the pure ssh-agt library function and
    #   calls it directly (no parameters needed).
    # Dependencies:
    #   - LIB_OPS_DIR global variable
    #   - ssh-agt pure function from lib/ops/ssh
    # Arguments:
    #   None
    # Returns:
    #   Exit status of ssh-agt command
    # Examples:
    #   ssh-agt-w
    
    # Validate required global variables
    if [[ -z "${LIB_OPS_DIR}" ]]; then
        echo "Error: LIB_OPS_DIR not set" >&2
        return 1
    fi
    
    # Source and call pure function
    source "${LIB_OPS_DIR}/ssh"
    ssh-agt
}
