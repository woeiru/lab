#!/bin/bash

# ============================================================================
# PROXMOX BACKUP SERVER MANAGEMENT WRAPPER FUNCTIONS
# ============================================================================
#
# DESCRIPTION:
#   This file contains management wrapper functions for Proxmox Backup Server
#   (PBS) operations. These wrappers bridge the gap between pure library
#   functions in /lib/ops/pbs and the global configuration environment,
#   providing a clean separation between testable pure functions and
#   environment-dependent management layer functions.
#
# ARCHITECTURE:
#   ┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
#   │   User/Script   │ -> │  Wrapper (_w)    │ -> │  Pure Function  │
#   │                 │    │  src/mgt/pbs     │    │  lib/ops/pbs    │
#   └─────────────────┘    └──────────────────┘    └─────────────────┘
#                                   │
#                                   v
#                          ┌──────────────────┐
#                          │  Global Config   │
#                          │  Environment     │
#                          └──────────────────┘
#
# DESIGN PRINCIPLES:
#   - Separation of Concerns: Pure functions handle logic, wrappers handle globals
#   - Testability: Pure functions can be tested in isolation with explicit parameters
#   - Maintainability: Global variable dependencies are centralized in wrappers
#   - Consistency: All wrapper functions follow the same pattern and naming convention
#
# NAMING CONVENTION:
#   - Pure functions: Three-letter names (e.g., pbs_fun, pbs_var, pbs_dav)
#   - Wrapper functions: Pure function name + "_w" suffix (e.g., pbs_fun_w)
#   - Global variables: Follow established site configuration patterns
#
# WRAPPER PATTERN:
#   Each wrapper function follows this standardized pattern:
#   1. Source the pure library function from ${LIB_OPS_DIR}/pbs
#   2. Extract global variables and convert to explicit parameters
#   3. Validate required parameters (with error handling for missing globals)
#   4. Call the pure function with explicit parameters
#   5. Return the result unchanged
#
# GLOBAL DEPENDENCIES:
#   - LIB_OPS_DIR: Path to pure function libraries
#   - SITE_CONFIG_FILE: Path to site configuration file
#   - PBS-specific global variables as defined in site configuration
#
# USAGE EXAMPLES:
#   # Use wrapper functions in scripts that have global environment loaded
#   pbs_fun_w                    # List available functions
#   pbs_var_w                    # Show configuration variables
#   pbs_dav_w                    # Download and verify PBS GPG key
#   pbs_adr_w                    # Add PBS repository
#   pbs_rda_w config name path   # Restore datastore configuration
#   pbs_mon_w 1                  # Monitor PBS service status
#
# TESTING:
#   - Unit tests can call pure functions directly with explicit parameters
#   - Integration tests can call wrapper functions with environment loaded
#   - Pure functions are isolated from global state dependencies
#
# REFACTORING HISTORY:
#   Created: 2025-06-07 - Separated 6 wrapper functions from pure functions
#   Purpose: Enable testing and reduce global variable coupling
#   Follows: GPU and PVE refactoring pattern established in src/mgt/
#
# FUNCTION INVENTORY:
#   pbs_fun_w : List available PBS functions (wrapper for pbs_fun)
#   pbs_var_w : Display PBS configuration variables (wrapper for pbs_var)
#   pbs_dav_w : Download and verify PBS GPG key (wrapper for pbs_dav)
#   pbs_adr_w : Add PBS repository (wrapper for pbs_adr)
#   pbs_rda_w : Restore datastore configuration (wrapper for pbs_rda)
#   pbs_mon_w : Monitor PBS operations (wrapper for pbs_mon)
#
# ============================================================================

# ============================================================================
# VARIABLE CREATION FOR FUNCTION ANALYSIS TOOLS
# ============================================================================
# Create wrapper-specific variables for function analysis tools to avoid
# namespace collisions with main library files. These variables enable tools
# like pbs_fun_w to correctly analyze wrapper functions instead of being
# overwritten by main library variables.

# Define directory and file variables for wrapper identification
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Create wrapper-specific variables (avoiding collision with library variables)
eval "FILEPATH_${BASE_FUN}_wrapper=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}_wrapper=\$FILE_FUN"
eval "BASE_${BASE_FUN}_wrapper=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}_wrapper=\$CONFIG_FUN"

# Wrapper for pbs_fun that extracts global variables and calls the pure function
# overview functions (wrapper)
pbs_fun_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pbs"
    
    # No global variable dependencies for this function
    pbs_fun "$@"
}

# Wrapper for pbs_var that extracts global variables and calls the pure function
# overview variables (wrapper)
pbs_var_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pbs"
    
    # No global variable dependencies for this function
    pbs_var "$@"
}

# Wrapper for pbs_dav that extracts global variables and calls the pure function
# download and verify (wrapper)
pbs_dav_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pbs"
    
    # No global variable dependencies for this function
    pbs_dav "$@"
}

# Wrapper for pbs_adr that extracts global variables and calls the pure function
# add repository (wrapper)
pbs_adr_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pbs"
    
    # No global variable dependencies for this function
    pbs_adr "$@"
}

# Wrapper for pbs_rda that extracts global variables and calls the pure function
# restore datastore (wrapper)
pbs_rda_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pbs"
    
    # No global variable dependencies for this function
    pbs_rda "$@"
}

# Wrapper for pbs_mon that extracts global variables and calls the pure function
# monitor operations (wrapper)
pbs_mon_w() {
    # Source the pure library function
    source "${LIB_OPS_DIR}/pbs"
    
    # No global variable dependencies for this function
    pbs_mon "$@"
}
