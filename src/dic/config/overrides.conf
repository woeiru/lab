# ============================================================================
# DEPENDENCY INJECTION CONTAINER - FUNCTION OVERRIDES CONFIGURATION
# ============================================================================
#
# DESCRIPTION:
#   Function-specific overrides for special cases that require completely
#   custom injection logic or need to bypass the standard DIC system.
#   This file defines functions that need special handling.
#
# FORMAT:
#   [function_name]
#   injection_method=custom|passthrough|hybrid|disabled
#   handler=custom_handler_function_name
#   description=Human readable description of why override is needed
#   parameters=parameter_list_for_documentation
#
# INJECTION METHODS:
#   - custom: Use custom injection handler function
#   - passthrough: Pass all arguments directly from user (no injection)
#   - hybrid: Combine injection with pass-through for complex cases
#   - disabled: Disable DIC for this function (use original wrapper)
#
# ============================================================================

# ============================================================================
# COMPLEX PARAMETER FUNCTIONS
# ============================================================================

[ssh_sca]
injection_method=custom
handler=ops_custom_inject_ssh_sca
description=Complex multi-parameter function with variable argument patterns
parameters=user_type scope ssh_users ip_arrays aliases command [additional_args...]
notes=This function has complex parameter patterns that vary by usage context

[sys_complex_operation]
injection_method=custom
handler=ops_custom_inject_sys_complex
description=System operations requiring dynamic parameter resolution
parameters=operation_type [dynamic_parameters...]
notes=Parameters change based on operation type

# ============================================================================
# PASS-THROUGH FUNCTIONS (No Injection Needed)
# ============================================================================

[pve_ctc]
injection_method=passthrough
description=Container creation with all parameters from user input
parameters=id template hostname storage rootfs_size memory swap nameserver searchdomain password cpus privileged ip_address cidr gateway ssh_key_file net_bridge net_nic
notes=All 18 parameters provided by user, no global variable injection needed

[pve_vmc]
injection_method=passthrough
description=VM creation with all parameters from user input
parameters=id name ostype machine iso boot bios efidisk scsihw agent disk sockets cores cpu memory balloon net
notes=All 17 parameters provided by user, no global variable injection needed

[usr_interactive_setup]
injection_method=passthrough
description=Interactive user setup requiring user input
parameters=[interactive_prompts...]
notes=Function prompts for input, cannot pre-inject variables

# ============================================================================
# HYBRID FUNCTIONS (Partial Injection)
# ============================================================================

[pve_advanced_migration]
injection_method=hybrid
handler=ops_hybrid_inject_pve_migration
description=VM migration with mixed user args and global injection
parameters=vm_id target_node [user_options...] [injected_cluster_config...]
notes=Some parameters from user, some from global cluster configuration

[backup_advanced]
injection_method=hybrid
handler=ops_hybrid_inject_backup
description=Advanced backup with user paths and global settings
parameters=source_path target_path [user_options...] [injected_backup_config...]
notes=Paths from user, backup configuration from global settings

# ============================================================================
# DISABLED FUNCTIONS (Use Original Wrappers)
# ============================================================================

[legacy_complex_function]
injection_method=disabled
description=Legacy function with complex logic that cannot be safely converted
parameters=varies
notes=Keep using original wrapper until refactoring is complete

[experimental_function]
injection_method=disabled
description=Experimental function under development
parameters=varies
notes=Disable DIC until function stabilizes

# ============================================================================
# PERFORMANCE-CRITICAL FUNCTIONS
# ============================================================================

[high_frequency_monitor]
injection_method=custom
handler=ops_optimized_inject_monitor
description=High-frequency monitoring function optimized for performance
parameters=monitoring_target interval
notes=Custom handler includes performance optimizations and caching

[real_time_control]
injection_method=custom
handler=ops_realtime_inject_control
description=Real-time control function requiring minimal overhead
parameters=control_target action_value
notes=Optimized injection for sub-second response times

# ============================================================================
# SECURITY-SENSITIVE FUNCTIONS
# ============================================================================

[security_audit]
injection_method=custom
handler=ops_secure_inject_audit
description=Security audit function with additional validation
parameters=audit_target audit_type
notes=Custom handler includes additional security checks and logging

[credential_management]
injection_method=custom
handler=ops_secure_inject_credentials
description=Credential management requiring secure variable handling
parameters=operation credential_type
notes=Special handling for sensitive credential variables

# ============================================================================
# DEBUGGING AND DEVELOPMENT
# ============================================================================

[debug_injection_test]
injection_method=custom
handler=ops_debug_inject_test
description=Test function for debugging injection system
parameters=test_parameter_1 test_parameter_2 test_parameter_3
notes=Used for testing and validating injection behavior

[development_prototype]
injection_method=custom
handler=ops_dev_inject_prototype
description=Development prototype with experimental injection
parameters=prototype_arg_1 prototype_arg_2
notes=Experimental injection patterns for testing new features

# ============================================================================
# CUSTOM HANDLER FUNCTION SIGNATURES
# ============================================================================
#
# Custom handler functions should follow this signature:
#
# ops_custom_inject_FUNCTION_NAME() {
#     local signature="$1"
#     
#     # Custom injection logic here
#     # Return space-separated quoted arguments
#     
#     echo "\"arg1\" \"arg2\" \"arg3\""
# }
#
# Handler function naming convention:
# - ops_custom_inject_FUNCTION_NAME for custom injection
# - ops_hybrid_inject_FUNCTION_NAME for hybrid injection
# - ops_optimized_inject_FUNCTION_NAME for performance-optimized injection
# - ops_secure_inject_FUNCTION_NAME for security-enhanced injection
#
# ============================================================================

# ============================================================================
# MIGRATION PLANNING
# ============================================================================

# Functions migrated from legacy arc/mgt/ to src/dic/
[migration_candidate_1]
injection_method=disabled
description=Function being evaluated for DIC migration
parameters=TBD
notes=Analyze current wrapper logic before implementing DIC injection

[migration_candidate_2]
injection_method=disabled
description=Function with complex wrapper logic
parameters=TBD
notes=May require custom handler due to complex global variable dependencies

# ============================================================================
# NOTES ON OVERRIDE USAGE
# ============================================================================
#
# 1. USE SPARINGLY:
#    Overrides should be used only when standard injection methods cannot
#    handle the function's requirements. Most functions should work with
#    convention-based or configuration-driven injection.
#
# 2. DOCUMENTATION REQUIRED:
#    Each override must include clear description and notes explaining
#    why standard injection is insufficient.
#
# 3. CUSTOM HANDLERS:
#    Custom handler functions must be implemented in src/dic/lib/injector
#    and follow the established naming conventions.
#
# 4. PERFORMANCE IMPACT:
#    Custom handlers may have performance implications. Consider caching
#    and optimization for frequently called functions.
#
# 5. TESTING:
#    Functions with overrides require additional testing to ensure
#    custom injection logic works correctly.
#
# 6. MIGRATION PATH:
#    Disabled functions should have a clear migration path and timeline
#    for eventual DIC integration.
#
# ============================================================================
