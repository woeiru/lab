# ============================================================================
# DEPENDENCY INJECTION CONTAINER - VARIABLE MAPPINGS CONFIGURATION
# ============================================================================
#
# DESCRIPTION:
#   Function-specific variable mappings for complex dependency injection
#   scenarios that cannot be handled by simple naming conventions.
#   This file defines custom mappings for functions with special requirements.
#
# FORMAT:
#   [function_name]
#   parameter_name=GLOBAL_VARIABLE_EXPRESSION
#   parameter_name=${hostname}_VARIABLE_NAME
#   parameter_name=${ARRAY_NAME[*]}
#
# VARIABLE EXPANSION:
#   - ${hostname} expands to current hostname
#   - ${ARRAY_NAME[*]} expands to space-separated array elements
#   - ${ARRAY_NAME[@]} for newline-separated array elements
#   - Environment variables and shell expressions are supported
#
# ============================================================================

# ============================================================================
# PROXMOX VE FUNCTIONS - GPU PASSTHROUGH
# ============================================================================

[pve_vpt]
# VM PCI Passthrough Toggle - Complex GPU passthrough configuration
vm_id=              # Provided by user arguments
action=             # Provided by user arguments  
pci0_id=${hostname}_NODE_PCI0
pci1_id=${hostname}_NODE_PCI1
core_count_on=${hostname}_CORE_COUNT_ON
core_count_off=${hostname}_CORE_COUNT_OFF
usb_devices_str=${hostname}_USB_DEVICES[@]
pve_conf_path=${PVE_CONF_PATH_QEMU}

[pve_vms]
# VM Start with Passthrough - Full VM lifecycle with GPU management
vm_id=              # Provided by user arguments
cluster_nodes=${CLUSTER_NODES[*]}
pci0_id=${hostname}_NODE_PCI0
pci1_id=${hostname}_NODE_PCI1
core_count_on=${hostname}_CORE_COUNT_ON
core_count_off=${hostname}_CORE_COUNT_OFF
usb_devices_str=${hostname}_USB_DEVICES[@]
pve_conf_path=${PVE_CONF_PATH_QEMU}
shutdown_flag=      # Provided by user arguments

[pve_vmg]
# VM Migration and Start - Complex cluster operations
vm_id=              # Provided by user arguments
cluster_nodes=${CLUSTER_NODES[*]}
pci0_id=${hostname}_NODE_PCI0
pci1_id=${hostname}_NODE_PCI1
core_count_on=${hostname}_CORE_COUNT_ON
core_count_off=${hostname}_CORE_COUNT_OFF
usb_devices_str=${hostname}_USB_DEVICES[@]
pve_conf_path=${PVE_CONF_PATH_QEMU}

# ============================================================================
# PROXMOX VE FUNCTIONS - VM/CONTAINER MANAGEMENT
# ============================================================================

[pve_vck]
# VM Check Node - Simple cluster node verification
vm_id=              # Provided by user arguments
cluster_nodes=${CLUSTER_NODES[*]}

[pve_vmd]
# VM Shutdown Hook Management
operation=          # Provided by user arguments
vm_id=              # Provided by user arguments
hook_script=/var/lib/vz/snippets/gpu-reattach-hook.pl
lib_ops_dir=${LIB_OPS_DIR}

# ============================================================================
# PROXMOX VE FUNCTIONS - CREATION OPERATIONS
# ============================================================================

[pve_ctc]
# Container Create - All parameters provided by user
id=                 # User argument
template=           # User argument
hostname=           # User argument
storage=            # User argument
rootfs_size=        # User argument
memory=             # User argument
swap=               # User argument
nameserver=         # User argument
searchdomain=       # User argument
password=           # User argument
cpus=               # User argument
privileged=         # User argument
ip_address=         # User argument
cidr=               # User argument
gateway=            # User argument
ssh_key_file=       # User argument
net_bridge=         # User argument
net_nic=            # User argument

[pve_vmc]
# VM Create - All parameters provided by user
id=                 # User argument
name=               # User argument
ostype=             # User argument
machine=            # User argument
iso=                # User argument
boot=               # User argument
bios=               # User argument
efidisk=            # User argument
scsihw=             # User argument
agent=              # User argument
disk=               # User argument
sockets=            # User argument
cores=              # User argument
cpu=                # User argument
memory=             # User argument
balloon=            # User argument
net=                # User argument

# ============================================================================
# PROXMOX VE FUNCTIONS - UTILITY
# ============================================================================

[pve_fun]
# Function Overview
script_path=${FILEPATH_pve}

[pve_var]
# Variable Overview
config_file=${CONFIG_pve}
analysis_dir=${DIR_FUN}/..

# ============================================================================
# GPU FUNCTIONS
# ============================================================================

[gpu_vck]
# GPU Check - Simple VM GPU configuration check
vm_id=              # Provided by user arguments
gpu_device=${hostname}_GPU_DEVICE
pci_slot=${hostname}_PCI_SLOT

[gpu_vpt]
# GPU Passthrough Toggle - Simplified GPU control
vm_id=              # Provided by user arguments
action=             # Provided by user arguments
gpu_device=${hostname}_GPU_DEVICE
pci_config=${hostname}_PCI_CONFIG

# ============================================================================
# SYSTEM FUNCTIONS
# ============================================================================

[sys_sca]
# System Scan - Complex multi-node operations
user_type=          # Provided by user arguments
scope=              # Provided by user arguments
ssh_users=          # Provided by user arguments
ip_arrays=          # Provided by user arguments
aliases=            # Provided by user arguments
command=            # Provided by user arguments

[sys_mon]
# System Monitoring
monitoring_config=${MONITORING_CONFIG}
alert_config=${ALERT_CONFIG}
log_level=${LOG_LEVEL}

# ============================================================================
# SSH FUNCTIONS
# ============================================================================

[ssh_key]
# SSH Key Management
operation=          # Provided by user arguments
key_name=           # Provided by user arguments
key_dir=${SSH_KEY_DIR}
key_type=${SSH_KEY_TYPE}

[ssh_con]
# SSH Connection
user=               # Provided by user arguments
host=               # Provided by user arguments
command=            # Provided by user arguments
ssh_options=${SSH_OPTIONS}
timeout=${SSH_TIMEOUT}

[ssh_sca]
# SSH Scan - Complex multi-host operations
# This function uses pass-through injection due to complex parameter patterns
injection_method=passthrough

# ============================================================================
# STORAGE FUNCTIONS
# ============================================================================

[sto_bak]
# Storage Backup
source_path=        # Provided by user arguments
backup_path=${BACKUP_PATH}
compression=${BACKUP_COMPRESSION}
retention=${BACKUP_RETENTION}

[sto_syn]
# Storage Sync
source_path=        # Provided by user arguments
target_path=        # Provided by user arguments
sync_options=${RSYNC_OPTIONS}
bandwidth=${SYNC_BANDWIDTH}

# ============================================================================
# NETWORK FUNCTIONS
# ============================================================================

[net_cfg]
# Network Configuration
interface=          # Provided by user arguments
ip_config=${NETWORK_CONFIG}
bridge_config=${BRIDGE_CONFIG}

[net_mon]
# Network Monitoring
interface=          # Provided by user arguments
monitoring_interval=${NET_MONITOR_INTERVAL}
alert_threshold=${NET_ALERT_THRESHOLD}

# ============================================================================
# SERVICE FUNCTIONS
# ============================================================================

[srv_ctl]
# Service Control
service_name=       # Provided by user arguments
action=             # Provided by user arguments
config_path=${SERVICE_CONFIG_PATH}
log_level=${SERVICE_LOG_LEVEL}

[srv_mon]
# Service Monitoring
service_name=       # Provided by user arguments
monitoring_config=${SERVICE_MONITORING_CONFIG}
alert_config=${SERVICE_ALERT_CONFIG}

# ============================================================================
# USER MANAGEMENT FUNCTIONS
# ============================================================================

[usr_add]
# User Addition
username=           # Provided by user arguments
group=              # Provided by user arguments
home_dir=${USER_HOME_BASE}
shell=${DEFAULT_SHELL}
ssh_key=${DEFAULT_SSH_KEY}

[usr_mod]
# User Modification
username=           # Provided by user arguments
operation=          # Provided by user arguments
new_value=          # Provided by user arguments
config_file=${USER_CONFIG_FILE}

# ============================================================================
# BACKUP FUNCTIONS
# ============================================================================

[pbs_bak]
# Proxmox Backup Server Operations
vm_id=              # Provided by user arguments
backup_storage=${PBS_STORAGE}
retention_policy=${PBS_RETENTION}
compression=${PBS_COMPRESSION}

# ============================================================================
# SPECIAL INJECTION METHODS
# ============================================================================

# Functions that require custom injection handlers
[ssh_sca]
injection_method=custom
handler=ops_custom_inject_ssh_sca

[sys_complex]
injection_method=custom
handler=ops_custom_inject_sys_complex

# Functions that use pass-through (all args from user)
[pve_ctc]
injection_method=passthrough

[pve_vmc]
injection_method=passthrough

# ============================================================================
# NOTES ON MAPPING USAGE
# ============================================================================
#
# 1. EMPTY VALUES:
#    Empty values (parameter=) indicate the parameter should be provided
#    by user arguments rather than injected from global variables.
#
# 2. VARIABLE EXPANSION:
#    Variables are expanded using bash evaluation, allowing complex
#    expressions and environment variable references.
#
# 3. ARRAY HANDLING:
#    - ${ARRAY[*]} creates space-separated string
#    - ${ARRAY[@]} creates newline-separated string for special handling
#
# 4. HOSTNAME VARIABLES:
#    ${hostname} is replaced with the current hostname, enabling
#    host-specific variable resolution.
#
# 5. INJECTION METHODS:
#    - convention: Use naming conventions only
#    - config: Use this configuration file
#    - custom: Use custom injection handler
#    - passthrough: Pass all arguments from user
#
# 6. OVERRIDE PRIORITY:
#    Configuration mappings override naming conventions for specified
#    parameters. Unspecified parameters fall back to conventions.
#
# ============================================================================
