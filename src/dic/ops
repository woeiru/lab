#!/bin/bash

# ============================================================================
# DEPENDENCY INJECTION CONTAINER - GENERIC OPERATIONS ENGINE
# ============================================================================
#
# DESCRIPTION:
#   This is the main entry point for the Dependency Injection Container (DIC)
#   system. It provides a generic interface for executing library functions
#   with automatic variable injection based on naming conventions and
#   configuration mappings.
#
# ARCHITECTURE:
#   ┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
#   │   User Command  │ -> │  Generic Engine  │ -> │  Pure Function  │
#   │   ops pve vpt   │    │   src/dic/ops    │    │  lib/ops/pve    │
#   └─────────────────┘    └──────────────────┘    └─────────────────┘
#                                   │
#                                   v
#                          ┌──────────────────┐
#                          │  Auto-Injection  │
#                          │  • Convention    │
#                          │  • Configuration │
#                          │  • Introspection │
#                          └──────────────────┘
#
# USAGE:
#   ops MODULE FUNCTION [ARGS...]
#   ops pve vpt 100 on              # Enable passthrough for VM 100
#   ops gpu vck 101                 # Check GPU configuration for VM 101
#   ops sys sca usr all             # System scan all users
#   ops --list                      # List all available modules
#   ops MODULE --list               # List functions in specific module
#   ops MODULE FUNCTION --help      # Show function help\
#   ...
#
# ENVIRONMENT VARIABLES:
#   OPS_DEBUG=1          # Enable debug output
#   OPS_VALIDATE=strict  # Validation level (strict|warn|silent)
#   OPS_CACHE=1          # Enable caching (default: 1)
#   OPS_METHOD=auto      # Injection method (auto|convention|config|custom)
#
# ============================================================================

# Get the directory of this script
DIC_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DIC_LIB_DIR="${DIC_DIR}/lib"
DIC_CONFIG_DIR="${DIC_DIR}/config"

# Default configuration - moved here to ensure OPS_DEBUG is set before use
OPS_DEBUG=${OPS_DEBUG:-0}
OPS_VALIDATE=${OPS_VALIDATE:-warn}
OPS_CACHE=${OPS_CACHE:-1}
OPS_METHOD=${OPS_METHOD:-auto}

# Debug output function - moved here to be available early
ops_debug() {
    if [[ "$OPS_DEBUG" == "1" ]]; then
        echo "[DIC] $*" >&2
    fi
}

# Source required utility libraries for analysis functions
ops_source_utility_libraries() {
    # Ensure required directories are set
    local lab_dir="${LAB_DIR:-/home/es/lab}"
    local lib_gen_dir="${LIB_GEN_DIR:-${lab_dir}/lib/gen}"
    
    ops_debug "Sourcing utility libraries from: $lib_gen_dir"
    
    # Source analysis utilities if needed
    if [[ -f "${lib_gen_dir}/ana" ]]; then
        source "${lib_gen_dir}/ana" 2>/dev/null || {
            ops_debug "Warning: Could not source analysis library"
        }
    fi
    
    # Source auxiliary utilities if needed  
    if [[ -f "${lib_gen_dir}/aux" ]]; then
        source "${lib_gen_dir}/aux" 2>/dev/null || {
            ops_debug "Warning: Could not source auxiliary library"
        }
    fi
}

# Source DIC libraries
source "${DIC_LIB_DIR}/injector"
source "${DIC_LIB_DIR}/introspector"
source "${DIC_LIB_DIR}/resolver"

# Source utility libraries for analysis functions
ops_source_utility_libraries

# Source environment configuration if available
ops_source_environment_config() {
    local lab_dir="${LAB_DIR:-/root/lab}"
    local env_config="${lab_dir}/cfg/env/site1"
    
    if [[ -f "$env_config" ]]; then
        ops_debug "Sourcing environment config: $env_config"
        source "$env_config" 2>/dev/null || {
            ops_debug "Warning: Could not source environment config"
        }
    else
        ops_debug "Environment config not found: $env_config"
    fi
}

# Source environment configuration
ops_source_environment_config

# Cache for function signatures and variable resolutions
declare -A FUNCTION_SIGNATURE_CACHE
declare -A VARIABLE_RESOLUTION_CACHE

# ============================================================================
# CORE FUNCTIONS
# ============================================================================

# Main operations dispatcher
ops_main() {
    local module="$1"
    local function="$2"
    shift 2
    
    # Handle special commands
    case "$module" in
        --help|-h)
            ops_show_help
            return 0
            ;;
        --list|-l)
            ops_list_modules
            return 0
            ;;
        --debug)
            OPS_DEBUG=1
            ops_main "$@"
            return $?
            ;;
        "")
            echo "Error: No module specified"
            ops_show_usage
            return 1
            ;;
    esac
    
    # Handle module-specific commands
    case "$function" in
        --list|-l)
            ops_list_functions "$module"
            return 0
            ;;
        --help|-h)
            ops_show_module_help "$module"
            return 0
            ;;
        "")
            echo "Error: No function specified for module '$module'"
            ops_show_usage
            return 1
            ;;
    esac
    
    # Handle function-specific commands
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        ops_show_function_help "$module" "$function"
        return 0
    fi
    
    # NEW: Handle no arguments - show injection preview
    if [[ $# -eq 0 ]]; then
        ops_show_injection_preview "$module" "$function"
        return 0
    fi
    
    # NEW: Handle -j flag - execute with dependency injection
    if [[ "$1" == "-j" ]]; then
        shift
        ops_execute "$module" "$function" "$@"
        return $?
    fi
    
    # Execute the operation (with user-provided arguments)
    ops_execute "$module" "$function" "$@"
}

# Execute operation with dependency injection
ops_execute() {
    local module="$1"
    local function="$2"
    shift 2
    
    local full_function="${module}_${function}"
    
    ops_debug "Executing: $full_function with args: $*"
    
    # Validate module and function exist
    if ! ops_validate_operation "$module" "$function"; then
        return 1
    fi
    
    # Source the library module
    local lib_path="${LIB_OPS_DIR}/${module}"
    if [[ ! -f "$lib_path" ]]; then
        echo "Error: Library module not found: $lib_path"
        return 1
    fi
    
    source "$lib_path"
    
    # Check if function exists
    if ! declare -f "$full_function" >/dev/null 2>&1; then
        echo "Error: Function '$full_function' not found in module '$module'"
        return 1
    fi
    
    # Check if this is a utility function that doesn't need injection
    if ops_is_utility_function "$full_function"; then
        ops_debug "Utility function detected, executing without injection: $full_function"
        "$full_function" "$@"
    else
        # Perform dependency injection and execute
        ops_inject_and_execute "$full_function" "$@"
    fi
}

# Inject dependencies and execute function
ops_inject_and_execute() {
    local function_name="$1"
    shift
    local user_args=("$@")
    
    ops_debug "Injecting dependencies for: $function_name"
    
    # Get function signature
    local signature
    if ! signature=$(ops_get_function_signature "$function_name"); then
        ops_debug "Could not analyze function signature, executing with user args only"
        "$function_name" "${user_args[@]}"
        return
    fi
    
    ops_debug "Function signature: $signature"
    
    # If signature is empty, just pass through user arguments
    if [[ -z "$signature" ]]; then
        ops_debug "Empty signature, executing with user args only"
        "$function_name" "${user_args[@]}"
        return
    fi
    
    # Convert signature to array
    local -a params
    read -ra params <<< "$signature"
    
    # Build final arguments array
    local -a final_args
    local param_index=0
    
    # Special handling for GPU functions that need -d flag
    if [[ "$function_name" =~ ^gpu_(ptd|pta)$ ]]; then
        # Add -d flag with driver preference if not already provided
        if [[ ${#user_args[@]} -eq 0 ]] || [[ "${user_args[0]}" != "-d" ]]; then
            local driver_pref="${GPU_DRIVER_PREFERENCE:-lookup}"
            final_args+=("-d" "$driver_pref")
            ops_debug "Auto-injected -d flag for GPU function: -d $driver_pref"
        fi
    fi
    
    for param in "${params[@]}"; do
        if [[ $param_index -lt ${#user_args[@]} ]]; then
            # Use user-provided argument
            final_args+=("${user_args[$param_index]}")
            ops_debug "Using user argument for $param: ${user_args[$param_index]}"
        else
            # Inject variable for this parameter
            local injected_value
            injected_value=$(ops_resolve_single_variable "$function_name" "$param")
            final_args+=("$injected_value")
            ops_debug "Injected variable for $param: $injected_value"
        fi
        ((param_index++))
    done
    
    ops_debug "Final arguments count: ${#final_args[@]}"
    ops_debug "Final arguments array: ${final_args[*]}"
    local i=0
    for arg in "${final_args[@]}"; do
        ops_debug "  Arg $i: [$arg]"
        ((i++))
    done
    
    # Execute function with final arguments
    ops_debug "Executing: $function_name with ${#final_args[@]} arguments"
    "$function_name" "${final_args[@]}"
}

# ============================================================================
# VALIDATION FUNCTIONS
# ============================================================================

# Validate that operation exists
ops_validate_operation() {
    local module="$1"
    local function="$2"
    
    # Check if LIB_OPS_DIR is set
    if [[ -z "$LIB_OPS_DIR" ]]; then
        echo "Error: LIB_OPS_DIR not set. Please run 'source bin/ini' first."
        return 1
    fi
    
    # Check if module exists
    if [[ ! -f "${LIB_OPS_DIR}/${module}" ]]; then
        echo "Error: Module '$module' not found in ${LIB_OPS_DIR}/"
        echo "Available modules:"
        ops_list_modules
        return 1
    fi
    
    return 0
}

# Validate resolved variables
ops_validate_variables() {
    local function_name="$1"
    local resolved_vars="$2"
    
    case "$OPS_VALIDATE" in
        strict)
            # Check for empty variables
            for var in $resolved_vars; do
                if [[ "$var" == '""' || "$var" == "''" ]]; then
                    echo "Error: Required variable is empty for function '$function_name'"
                    return 1
                fi
            done
            ;;
        warn)
            # Warn about empty variables
            for var in $resolved_vars; do
                if [[ "$var" == '""' || "$var" == "''" ]]; then
                    echo "Warning: Variable is empty for function '$function_name': $var"
                fi
            done
            ;;
        silent)
            # No validation
            ;;
    esac
    
    return 0
}

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# Check if a function is a utility function that doesn't need injection
ops_is_utility_function() {
    local function_name="$1"
    
    # Utility functions that call ana_laf, ana_acu, aux_tec etc.
    case "$function_name" in
        *_fun|*_var)
            ops_debug "Detected utility function: $function_name"
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Sanitize hostname to get short name (remove domain)
ops_get_short_hostname() {
    local full_hostname=$(hostname)
    
    # Extract just the first part before any dots
    echo "${full_hostname%%.*}"
}

# Resolve a single variable for a parameter
ops_resolve_single_variable() {
    local function_name="$1"
    local param="$2"
    
    # Try convention-based resolution first
    local resolved_value=""
    local hostname=$(ops_get_short_hostname)
    
    ops_debug "Using sanitized hostname: $hostname"
    
    # Apply naming conventions
    case "$param" in
        vm_id|vmid)
            resolved_value="${VM_ID:-}"
            ;;
        cluster_nodes|cluster_nodes_str)
            ops_debug "Resolving cluster_nodes: checking CLUSTER_NODES array"
            ops_debug "CLUSTER_NODES array length: ${#CLUSTER_NODES[@]}"
            ops_debug "CLUSTER_NODES content: [${CLUSTER_NODES[*]}]"
            if [[ -n "${CLUSTER_NODES[*]}" ]]; then
                resolved_value="${CLUSTER_NODES[*]}"
                ops_debug "Resolved cluster_nodes to: [$resolved_value]"
            else
                resolved_value=""
                ops_debug "CLUSTER_NODES is empty, resolved to empty string"
            fi
            ;;
        pci0_id)
            local var_name="${hostname}_NODE_PCI0"
            resolved_value="${!var_name:-}"
            ;;
        pci1_id)
            local var_name="${hostname}_NODE_PCI1"
            resolved_value="${!var_name:-}"
            ;;
        core_count_on)
            local var_name="${hostname}_CORE_COUNT_ON"
            resolved_value="${!var_name:-}"
            ;;
        core_count_off)
            local var_name="${hostname}_CORE_COUNT_OFF"
            resolved_value="${!var_name:-}"
            ;;
        usb_devices_str|usb_devices)
            # Handle USB device arrays with newline separation
            local usb_array_name="${hostname}_USB_DEVICES"
            if declare -p "$usb_array_name" >/dev/null 2>&1; then
                local usb_array_ref="${usb_array_name}[@]"
                if [[ -n "${!usb_array_ref}" ]]; then
                    resolved_value=$(printf '%s\n' "${!usb_array_ref}")
                fi
            fi
            ;;
        pve_conf_path)
            resolved_value="${PVE_CONF_PATH_QEMU:-}"
            ;;
        lib_ops_dir)
            resolved_value="${LIB_OPS_DIR:-}"
            ;;
        driver_mode|gpu_driver_preference)
            # Handle GPU driver preference for -d flag
            resolved_value="${GPU_DRIVER_PREFERENCE:-lookup}"
            ;;
        *)
            # Generic uppercase conversion
            local global_var=$(echo "$param" | tr '[:lower:]' '[:upper:]')
            resolved_value="${!global_var:-}"
            ;;
    esac
    
    ops_debug "Resolved $param -> $resolved_value"
    echo "$resolved_value"
}

# Show main help
ops_show_help() {
    cat << 'EOF'
Dependency Injection Container (DIC) - Generic Operations Engine

USAGE:
    ops MODULE FUNCTION [ARGS...]       Execute operation directly
    ops MODULE FUNCTION -j              Execute with dependency injection  
    ops MODULE FUNCTION -x              Execute with explicit flag (if required by function)
    ops --list                          List all available modules
    ops MODULE --list                   List functions in specific module
    ops MODULE FUNCTION --help          Show function help
    ops --debug MODULE FUNCTION ARGS    Execute with debug output

EXAMPLES:
    ops pve vpt 100 on                  Enable passthrough for VM 100
    ops pve vpt -j                      Enable passthrough with dependency injection
    ops gpu pts -x                      Check GPU status (function requires -x flag)
    ops gpu vck 101                     Check GPU configuration for VM 101
    ops sys sca usr all                 System scan all users
    ops pve --list                      List all PVE functions
    ops pve vpt --help                  Show help for pve_vpt function

ENVIRONMENT VARIABLES:
    OPS_DEBUG=1                         Enable debug output
    OPS_VALIDATE=strict                 Validation level (strict|warn|silent)
    OPS_CACHE=1                         Enable caching (default)
    OPS_METHOD=auto                     Injection method (auto|convention|config)

DEPENDENCY INJECTION:
    The DIC automatically injects global variables into pure library functions
    based on naming conventions and configuration mappings:
    
    - Convention: vm_id → VM_ID, cluster_nodes → CLUSTER_NODES
    - Configuration: Complex mappings defined in config files
    - Hostname-specific: pci0_id → ${hostname}_NODE_PCI0
    
    This eliminates the need for individual wrapper functions while maintaining
    the same functionality as the legacy arc/mgt/ approach.

For more information, see: src/dic/README.md
EOF
}

# Show usage
ops_show_usage() {
    echo "Usage: ops MODULE FUNCTION [ARGS...]"
    echo "Try 'ops --help' for more information."
}

# List available modules
ops_list_modules() {
    echo "Available modules:"
    if [[ -d "$LIB_OPS_DIR" ]]; then
        for module in "$LIB_OPS_DIR"/*; do
            if [[ -f "$module" ]]; then
                local module_name=$(basename "$module")
                echo "  $module_name"
            fi
        done
    else
        echo "  Error: LIB_OPS_DIR not found. Please run 'source bin/ini' first."
    fi
}

# List functions in a module
ops_list_functions() {
    local module="$1"
    local lib_path="${LIB_OPS_DIR}/${module}"
    
    if [[ ! -f "$lib_path" ]]; then
        echo "Error: Module '$module' not found"
        return 1
    fi
    
    echo "Functions in module '$module':"
    # Extract function names from the library file
    grep "^${module}_[a-z_]*(" "$lib_path" | cut -d'(' -f1 | sed "s/^${module}_/  /"
}

# Show module help
ops_show_module_help() {
    local module="$1"
    echo "Help for module '$module':"
    echo "  Use 'ops $module --list' to see available functions"
    echo "  Use 'ops $module FUNCTION --help' for function-specific help"
}

# Show function help
ops_show_function_help() {
    local module="$1"
    local function="$2"
    
    # Simply call the actual function with --help to trigger aux_tec
    "${module}_${function}" --help
}

# Show injection preview - display parameters and available global variable mappings
ops_show_injection_preview() {
    local module="$1"
    local function="$2"
    local full_function="${module}_${function}"
    
    # Validate and source the library module
    local lib_path="${LIB_OPS_DIR}/${module}"
    if [[ ! -f "$lib_path" ]]; then
        echo "Error: Library module not found: $lib_path"
        return 1
    fi
    
    source "$lib_path"
    
    # Check if function exists
    if ! declare -f "$full_function" >/dev/null 2>&1; then
        echo "Error: Function '$full_function' not found in module '$module'"
        return 1
    fi
    
    echo "Function: $full_function"
    echo "Usage preview with variable injection:"
    echo
    
    # Call the function with no arguments to get aux_use output
    # Some functions output usage to stdout, others to stderr when they fail
    local usage_output
    
    # First try capturing stdout (normal case)
    usage_output=$("$full_function" 2>/dev/null)
    
    # If no stdout output, try capturing stderr (functions that output usage on error)
    if [[ -z "$usage_output" ]]; then
        usage_output=$("$full_function" 2>&1 >/dev/null)
    fi
    
    # If still no output, it means the function doesn't provide usage via aux_use
    if [[ -z "$usage_output" ]]; then
        echo "  Parameter injection preview not available"
        echo "  This function requires specific arguments"
        echo "  Use: ops $module $function --help for function documentation"
        return 1
    fi
    
    # Process the usage output to inject global variable values into placeholders
    local enhanced_output
    enhanced_output=$(echo "$usage_output" | while IFS= read -r line; do
        # Process each line, looking for <parameter> patterns
        local processed_line="$line"
        
        # Find all <parameter> patterns in the line
        while [[ $processed_line =~ \<([^>]+)\> ]]; do
            local param="${BASH_REMATCH[1]}"
            local placeholder="<$param>"
            
            # Try to find matching global variable using existing ops logic
            local var_value
            var_value=$(ops_resolve_single_variable "$full_function" "$param" 2>/dev/null || true)
            
            # Replace placeholder with enhanced version
            if [[ -n "$var_value" ]]; then
                local enhanced_placeholder="<$param:$var_value>"
                processed_line="${processed_line/$placeholder/$enhanced_placeholder}"
            else
                # No match found, keep original placeholder
                processed_line="${processed_line/$placeholder/$placeholder}"
            fi
        done
        
        echo "$processed_line"
    done)
    
    echo "$enhanced_output"
    echo
    echo "Legend: <param:value> shows injected values, <param> shows missing variables"
    echo
    echo "Usage examples:"
    echo "  ops $module $function -x      # Execute with auto-injection"
    echo "  ops $module $function --help  # Show function help"
}

# Get global variable name for a parameter (for display purposes)
ops_get_global_variable_name() {
    local param="$1"
    local hostname=$(ops_get_short_hostname)
    
    case "$param" in
        vm_id|vmid)
            echo "VM_ID"
            ;;
        cluster_nodes|cluster_nodes_str)
            echo "CLUSTER_NODES"
            ;;
        pci0_id)
            echo "${hostname}_NODE_PCI0"
            ;;
        pci1_id)
            echo "${hostname}_NODE_PCI1"
            ;;
        core_count_on)
            echo "${hostname}_CORE_COUNT_ON"
            ;;
        core_count_off)
            echo "${hostname}_CORE_COUNT_OFF"
            ;;
        usb_devices_str|usb_devices)
            echo "${hostname}_USB_DEVICES"
            ;;
        pve_conf_path)
            echo "PVE_CONF_PATH_QEMU"
            ;;
        lib_ops_dir)
            echo "LIB_OPS_DIR"
            ;;
        driver_mode|gpu_driver_preference)
            echo "GPU_DRIVER_PREFERENCE"
            ;;
        *)
            # Generic uppercase conversion
            echo "$(echo "$param" | tr '[:lower:]' '[:upper:]')"
            ;;
    esac
}


# ============================================================================
# MAIN EXECUTION
# ============================================================================

# If script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Check if running in correct environment
    if [[ -z "$LIB_OPS_DIR" ]]; then
        echo "Error: Environment not initialized. Please run 'source bin/ini' first."
        exit 1
    fi
    
    # Execute main function with all arguments
    ops_main "$@"
fi
