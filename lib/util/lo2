#!/bin/bash
#
# -----------------------------------------------------------------------------
# Module: Runtime Control Structure Tracking (lo2)
# -----------------------------------------------------------------------------
# Purpose:     Monitor and report the depth of nested control structures (if, for,
#              while, etc.) during script execution.
# File:        lib/util/lo2
#
# Description: This module provides functionality to track the depth of shell
#              control structures at runtime. It uses a DEBUG trap to monitor
#              commands and identify control flow statements, maintaining a stack
#              to calculate the current depth. It also includes debug logging
#              for its own operations.
#
# Dependencies: Relies on 'verify_module' for module integrity.
#               Uses environment variables: LOG_DEBUG_ENABLED, LOG_DEBUG_FILE,
#               LOG_CONTROL_STATE_FILE, HOME, LOG_DIR, TMP_DIR.
#
# Usage:       Sourced by other scripts or modules.
#              'setlogcontrol on/off' enables/disables the tracking.
#              'calculate_final_depth' can be used to get the current depth,
#              potentially combined with a base depth from other modules (e.g., lo1).
#              'lo2_debug_log' provides specific debug messages for this module.
#
# Notes:       The core functionality relies on setting a DEBUG trap.
#              LOG_CONTROL_DEPTH_ENABLED globally controls if this tracking is active.
#              The module attempts to deduplicate control structures to avoid
#              over-counting in certain scenarios.
# -----------------------------------------------------------------------------

verify_module "lo2" || exit 1

# Enhanced debug logging - moved to top
lo2_debug_log() {
    [[ "${LOG_DEBUG_ENABLED:-0}" != "1" ]] && return 0
    local timestamp=$(date '+%H:%M:%S')
    local message="$1"
    local source="${2:-unknown}"
    printf "[LO2-DEBUG] %s - [%s] %s\n" "$timestamp" "$source" "$message" >> "$LOG_DEBUG_FILE"
}

lo2_debug_log "Entering lo2 module initialization" "init"
lo2_debug_log "Validating environment variables in lo2" "init"
lo2_debug_log "HOME=$HOME" "init"
lo2_debug_log "LOG_DIR=$LOG_DIR" "init"
lo2_debug_log "TMP_DIR=$TMP_DIR" "init"
lo2_debug_log "Setting up lo2 module directories" "init"

# Global state
declare -g LOG_CONTROL_DEPTH_ENABLED=false

# Runtime control structure tracking
declare -ga CONTROL_DEPTH_STACK=()
declare -g LAST_COMMAND=""

# Add a hash function to identify unique control structures
hash_command() {
    local cmd="$1"
    # Get line number and file from DEBUG trap if available
    local lineno="${BASH_LINENO[0]:-0}"
    local source="${BASH_SOURCE[1]:-unknown}"
    echo "${source}:${lineno}:${cmd}"
}

# Modified tracking function with deduplication
track_control_depth() {
    local command="$1"

    # Skip if it's the same command as last time
    [[ "$command" == "$LAST_COMMAND" ]] && return
    LAST_COMMAND="$command"

    # Generate unique hash for this command
    local cmd_hash=$(hash_command "$command")

    lo2_debug_log "Processing command: $command (hash: $cmd_hash)" "track_depth"

    case "$command" in
        if\ *|for\ *|while\ *|until\ *|case\ *|select\ *)
            # Check if this exact control structure is already in the stack
            local duplicate=false
            for structure in "${CONTROL_DEPTH_STACK[@]}"; do
                if [[ "$structure" == "$cmd_hash" ]]; then
                    duplicate=true
                    break
                fi
            done

            if ! $duplicate; then
                CONTROL_DEPTH_STACK+=("$cmd_hash")
                lo2_debug_log "Entered unique control structure: $command (depth: ${#CONTROL_DEPTH_STACK[@]})" "track_depth"
            else
                lo2_debug_log "Skipped duplicate control structure: $command" "track_depth"
            fi
            ;;
        fi|done|esac)
            # Only remove if it matches the last added structure
            if [ ${#CONTROL_DEPTH_STACK[@]} -gt 0 ]; then
                local last_structure="${CONTROL_DEPTH_STACK[-1]}"
                if [[ "$last_structure" == *"$command"* ]]; then
                    unset 'CONTROL_DEPTH_STACK[-1]'
                    lo2_debug_log "Exited control structure (new depth: ${#CONTROL_DEPTH_STACK[@]})" "track_depth"
                fi
            fi
            ;;
    esac
}

# Get current runtime control structure depth
get_current_control_depth() {
    lo2_debug_log "Current control depth: ${#CONTROL_DEPTH_STACK[@]}" "get_depth"
    echo ${#CONTROL_DEPTH_STACK[@]}
}

print_control_stack() {
    lo2_debug_log "Control structure stack:" "stack_debug"
    local i=0
    for structure in "${CONTROL_DEPTH_STACK[@]}"; do
        # Extract original command from hash
        local cmd="${structure##*:}"
        lo2_debug_log "  $i: $cmd (hash: $structure)" "stack_debug"
        ((i++))
    done
}

# Calculate control structure depth
calculate_control_depth() {
    local depth=$(get_current_control_depth)
    lo2_debug_log "Calculated control depth: $depth" "calc_depth"
    if ((depth > 0)); then
        print_control_stack
    fi
    echo "$depth"
}

# Override calculate_final_depth to use runtime tracking
calculate_final_depth() {
    if [[ "$LOG_CONTROL_DEPTH_ENABLED" == "true" ]]; then
        local base_depth
        base_depth=$(get_base_depth)
        lo2_debug_log "Base depth: $base_depth" "final_depth"

        local control_depth
        control_depth=$(calculate_control_depth)
        local total_depth=$((base_depth + control_depth))

        lo2_debug_log "Control depth: $control_depth, Total depth: $total_depth" "final_depth"
        echo "$total_depth"
    else
        get_base_depth
    fi
}

# Install the debug trap for control structure tracking
install_depth_tracking() {
    # Save any existing DEBUG trap
    local old_trap=$(trap -p DEBUG)

    # Set our new trap while preserving any existing trap
    if [[ -n "$old_trap" && "$old_trap" != *"track_control_depth"* ]]; then
        local old_command=${old_trap#trap -- \'}
        old_command=${old_command%\' DEBUG}
        trap 'track_control_depth "$BASH_COMMAND"; '"$old_command" DEBUG
    else
        trap 'track_control_depth "$BASH_COMMAND"' DEBUG
    fi

    lo2_debug_log "Installed control structure tracking" "init"
}

# Remove the debug trap
remove_depth_tracking() {
    trap - DEBUG
    lo2_debug_log "Removed control structure tracking" "cleanup"
}

# Control structure tracking toggle
setlogcontrol() {
    case "$1" in
        "on")
            LOG_CONTROL_DEPTH_ENABLED=true
            echo "true" > "$LOG_CONTROL_STATE_FILE"
            install_depth_tracking
            CONTROL_DEPTH_STACK=()
            lo2_debug_log "Control structure depth tracking enabled" "setlogcontrol"
            printf "%s      └─ Control structure depth tracking enabled%s\n" "$LOG_NC"
            ;;
        "off")
            LOG_CONTROL_DEPTH_ENABLED=false
            echo "false" > "$LOG_CONTROL_STATE_FILE"
            remove_depth_tracking
            CONTROL_DEPTH_STACK=()
            lo2_debug_log "Control structure depth tracking disabled" "setlogcontrol"
            printf "%s      └─ Control structure depth tracking disabled%s\n" "$LOG_NC"
            ;;
        *)
            printf "Usage: setlogcontrol on|off\n"
            return 1
            ;;
    esac
}

cleanup_lo2() {
    lo2_debug_log "Starting cleanup" "cleanup_lo2"
    remove_depth_tracking
    CONTROL_DEPTH_STACK=()
    LAST_COMMAND=""
    lo2_debug_log "Cleanup complete" "cleanup_lo2"
}

# Debug message function for modules to use
debug_message() {
    local message="$1"
    local component="${2:-${FUNCNAME[1]:-main}}"
    local level="${3:-1}" # Default verbosity level
    
    # Skip if debug logging is disabled
    [[ "${LOG_DEBUG_ENABLED:-0}" != "1" ]] && return 0
    
    # Format timestamp and get execution context depth
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local depth=$(get_current_control_depth)
    local indent=$(printf '%*s' "$depth" "" | tr ' ' '·')
    
    # Format the log message
    local formatted_message="[$component] ${indent}$message"
    
    # Log to debug file
    printf "[DEBUG] %s - %s\n" "$timestamp" "$formatted_message" >> "$LOG_DEBUG_FILE"
    
    # Output to stderr if verbosity level allows
    if (( DEBUG_VERBOSITY >= level )); then
        printf "[DEBUG] %s - %s\n" "$timestamp" "$formatted_message" >&2
    fi
    
    return 0
}

# Debug message with timer integration
debug_with_timer() {
    local message="$1"
    local component="${2:-${FUNCNAME[1]:-main}}"
    local level="${3:-1}"
    
    # Check if TME module functions are available
    if type -t get_elapsed_time &>/dev/null; then
        local elapsed=$(get_elapsed_time "$component")
        debug_message "$message (elapsed: ${elapsed}s)" "$component" "$level"
    else
        debug_message "$message (timing unavailable)" "$component" "$level"
    fi
    
    return 0
}

# Export necessary functions and variables
export LOG_CONTROL_DEPTH_ENABLED
export -f setlogcontrol
export -f lo2_debug_log debug_message debug_with_timer
export -f calculate_final_depth
export -f track_control_depth
export -f get_current_control_depth

# Set up cleanup trap
trap cleanup_lo2 EXIT

# Initialize control tracking based on saved state
[[ -f "$LOG_CONTROL_STATE_FILE" ]] && {
    saved_state=$(cat "$LOG_CONTROL_STATE_FILE")
    [[ "$saved_state" == "true" ]] && setlogcontrol on
}

# Add final debug log
lo2_debug_log "lo2 module initialization completed successfully" "init"
