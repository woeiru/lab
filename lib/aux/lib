#!/bin/bash

# ============================================================================
# aux/src - Function Summary
#
#   aux-fun      : Shows a summary of selected functions in the script, displaying their usage, shortname, and description.
#   aux-var      : Displays an overview of specific variables defined in the configuration file, showing their names, values, and usage across different files.
#   aux-log      : Logging function. Prints a timestamped log message with a log level.
#   aux-ffl      : Recursively processes files in a directory and its subdirectories using a specified function, allowing for additional arguments to be passed.
#   aux-laf      : Lists all functions in a file, displaying their usage, shortname, and description. Supports truncation and line break options for better readability.
#   aux-acu      : Analyzes the usage of variables from a config file across target folders, displaying variable names, values, and occurrence counts in various files.
#   aux-mev      : Prompts the user to input or confirm a variable's value, allowing for easy customization of script parameters.
#   aux-nos      : Logs a function's execution status with a timestamp, providing a simple way to track script progress and debugging information.
#   aux-flc      : Displays the source code of a specified function from the library folder, including its description, shortname, and usage.
#   aux-use      : Displays the usage information, shortname, and description of the calling function, helping users understand how to use it.
#
# ============================================================================

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Shows a summary of selected functions in the script, displaying their usage, shortname, and description
# overview functions
#
aux-fun() {
    # Pass all arguments directly to aux-laf
    aux-laf "$FILEPATH_lib" "$@"
}

# Displays an overview of specific variables defined in the configuration file, showing their names, values, and usage across different files
# overview variables
#
aux-var() {
    aux-acu -o "$CONFIG_gpu" "$DIR_FUN/.."
}

# Logging function
aux-log() {
    local log_level="$1"
    local message="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$log_level] $message"
}

# Recursively processes files in a directory and its subdirectories using a specified function, allowing for additional arguments to be passed
# function folder loop
# <function> <flag> <path> [extra_args ..]
aux-ffl() {
    local fnc
    local flag
    local folder
    local extra_args=()
    fnc="$1"
    flag="$2"
    folder="$3"
    shift 3
    # Collect remaining arguments as extra_args
    while [[ $# -gt 0 ]]; do
        extra_args+=("$1")
        shift
    done

    if [[ -d "$folder" ]]; then
        for file in "$folder"/{*,.[!.]*,..?*}; do
            if [[ -f "$file" ]]; then
                line_count=$(wc -l < "$file")
                
                # Get the file extension
                file_extension="${file##*.}"
                
                if [[ "$file_extension" == "conf" ]]; then
                    # Count variables in .conf files
                    variable_count=$(grep -cE '^[a-zA-Z0-9_]+=' "$file")
                    count_type="Variables"
                    count_value=$variable_count
                else
                    # Count functions in other files
                    function_count=$(grep -cE '^[a-zA-Z0-9_-]+\(\)[[:space:]]*\{' "$file")
                    count_type="Functions"
                    count_value=$function_count
                fi
                
                # Get the real path of the file
                real_path=$(realpath "$file")
                # Extract the filename (prefix) from the path
                filename=$(basename "$real_path")
                # Extract the prefix (part before the first dot)
                prefix="${filename%%.*}"
                # Get the directory path with the trailing slash
                dir_path=$(dirname "$real_path")/
                
                echo -e "$dir_path\e[32m$prefix\e[0m${filename#$prefix} - Contains \e[31m$line_count\e[0m Lines and \e[33m$count_value\e[0m $count_type"
                
                "$fnc" "$flag" "$file" "${extra_args[@]}"
            elif [[ -d "$file" && "$file" != "$folder"/. && "$file" != "$folder"/.. ]]; then
                aux-ffl "$fnc" "$flag" "$file" "${extra_args[@]}"
            fi
        done
    else
        echo "Invalid folder: $folder"
        return 1
    fi
}

# Lists all functions in a file, displaying their usage, shortname, and description. Supports truncation and line break options for better readability
# list all functions
# <file name> [-t] [-b]
aux-laf() {
    local truncate_mode=false
    local break_mode=false
    local file_name

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -t)
                truncate_mode=true
                shift
                ;;
            -b)
                break_mode=true
                shift
                ;;
            *)
                file_name="$1"
                shift
                ;;
        esac
    done

    if [ -z "$file_name" ]; then
        aux-use
        return 1
    fi

    # Column width parameters
    local col_width_1=7
    local col_width_2=16
    local col_width_3=18
    local col_width_4=36
    local col_width_5=4
    local col_width_6=4
    local col_width_7=4
    local col_width_8=4
    local col_width_9=4

    # Function to truncate and pad strings
    truncate_and_pad() {
        local str="$1"
        local width="$2"
        if [ ${#str} -gt $width ]; then
            echo "${str:0:$((width-2))}.."
        else
            printf "%-${width}s" "$str"
        fi
    }

    # Function to wrap text
    wrap_text() {
        local text="$1"
        local width="$2"
        echo "$text" | fold -s -w "$width"
    }

    # Function to print a row (including header and data rows)
    print_row() {
        if $break_mode; then
            local col1=$(wrap_text "$1" $col_width_1)
            local col2=$(wrap_text "$2" $col_width_2)
            local col3=$(wrap_text "$3" $col_width_3)
            local col4=$(wrap_text "$4" $col_width_4)
            local col5=$(wrap_text "$5" $col_width_5)
            local col6=$(wrap_text "$6" $col_width_6)
            local col7=$(wrap_text "$7" $col_width_7)
            local col8=$(wrap_text "$8" $col_width_8)
            local col9=$(wrap_text "$9" $col_width_9)
            
            local IFS=$'\n'
            local lines1=($col1)
            local lines2=($col2)
            local lines3=($col3)
            local lines4=($col4)
            local lines5=($col5)
            local lines6=($col6)
            local lines7=($col7)
            local lines8=($col8)
            local lines9=($col9)
            
            local max_lines=$(( ${#lines1[@]} > ${#lines2[@]} ? ${#lines1[@]} : ${#lines2[@]} ))
            max_lines=$(( max_lines > ${#lines3[@]} ? max_lines : ${#lines3[@]} ))
            max_lines=$(( max_lines > ${#lines4[@]} ? max_lines : ${#lines4[@]} ))
            max_lines=$(( max_lines > ${#lines5[@]} ? max_lines : ${#lines5[@]} ))
            max_lines=$(( max_lines > ${#lines6[@]} ? max_lines : ${#lines6[@]} ))
            max_lines=$(( max_lines > ${#lines7[@]} ? max_lines : ${#lines7[@]} ))
            max_lines=$(( max_lines > ${#lines8[@]} ? max_lines : ${#lines8[@]} ))
            max_lines=$(( max_lines > ${#lines9[@]} ? max_lines : ${#lines9[@]} ))
            
            for i in $(seq 0 $((max_lines-1))); do
                printf "| %-${col_width_1}s | %-${col_width_2}s | %-${col_width_3}s | %-${col_width_4}s | %-${col_width_5}s | %-${col_width_6}s | %-${col_width_7}s | %-${col_width_8}s | %-${col_width_9}s |\n" \
                    "${lines1[$i]:-}" \
                    "${lines2[$i]:-}" \
                    "${lines3[$i]:-}" \
                    "${lines4[$i]:-}" \
                    "${lines5[$i]:-}" \
                    "${lines6[$i]:-}" \
                    "${lines7[$i]:-}" \
                    "${lines8[$i]:-}" \
                    "${lines9[$i]:-}"
            done
        elif $truncate_mode; then
            printf "| %s | %s | %s | %s | %s | %s | %s | %s | %s |\n" \
                "$(truncate_and_pad "$1" $col_width_1)" \
                "$(truncate_and_pad "$2" $col_width_2)" \
                "$(truncate_and_pad "$3" $col_width_3)" \
                "$(truncate_and_pad "$4" $col_width_4)" \
                "$(truncate_and_pad "$5" $col_width_5)" \
                "$(truncate_and_pad "$6" $col_width_6)" \
                "$(truncate_and_pad "$7" $col_width_7)" \
                "$(truncate_and_pad "$8" $col_width_8)" \
                "$(truncate_and_pad "$9" $col_width_9)"
        else
            printf "| %s | %s | %s | %s | %s | %s | %s | %s | %s |\n" \
                "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
        fi
    }

    # Function to print a separator line
    print_separator() {
        local total_width=$((col_width_1 + col_width_2 + col_width_3 + col_width_4 + col_width_5 + col_width_6 + col_width_7 + col_width_8 + col_width_9 + 26))
        printf "+%s+\n" "$(printf '%*s' $total_width '' | tr ' ' '-')"
    }

    print_separator_2() {
        local total_width=$((col_width_1 + col_width_2 + col_width_3 + col_width_4 + col_width_5 + col_width_6 + col_width_7 + col_width_8 + col_width_9 + 26))
        printf "+%s+\n" "$(printf '%*s' $total_width '' | tr ' ' ' ')"
    }

    local line_number=0
    declare -a comments=()

    # Read all comments into an array
    while IFS= read -r line; do
        ((line_number++))
        if [[ $line =~ ^[[:space:]]*# ]]; then
            comments[$line_number]="${line#"${line%%[![:space:]]*}"}"  # Remove leading whitespace
            comments[$line_number]="${comments[$line_number]#\# }"    # Remove leading '# '
            comments[$line_number]="${comments[$line_number]#\#}"     # Remove leading '#' if there's no space after it
        fi
    done < "$file_name"

    # Counts all function calls
    count_calls() {
        local func_name="$1"
        local count=$(awk -v func_name="$func_name" '{ for (i=1; i<=NF; i++) if ($i == func_name) count++ } END { print count }' "$file_name")
        echo "${count}"
    }

    # Counts all function calls in a folder, excluding a specific file
    count_calls_folder() {
        local func_name="$1"
        local folder_name="$2"
        local exclude_file="$3"
        local count=$(find "$folder_name" -type f ! -name "$(basename "$exclude_file")" -exec awk -v func_name="$func_name" '{ for (i=1; i<=NF; i++) if ($i == func_name) count++ } END { print count }' {} + | awk '{sum += $1} END {if (sum == 0) print ""; else print sum}')
        echo "${count}"
    }

    # Function to get comment or empty string
    get_comment() {
        local line_num=$1
        local comment="${comments[$line_num]:-}"
        # Return empty string if comment is just whitespace
        if [[ -z "${comment// }" ]]; then
            echo ""
        else
            echo "$comment"
        fi
    }

    # Print table header
    print_separator
    print_row "Func" "Arguments" "Shortname" "Description" "Size" "Loc" "file" "func" "gens"
    print_separator

    # Loop through all lines in the file again
    line_number=0
    while IFS= read -r line; do
        ((line_number++))
        if [[ $line =~ ^[a-zA-Z_][a-zA-Z0-9_-]*\(\) ]]; then
            # Extract function name without parentheses
            func_name=$(echo "$line" | awk -F '[(|)]' '{print $1}')
            # Calculate function size
            func_start_line=$line_number
            func_end_line=$(tail -n +$((func_start_line+1)) "$file_name" | grep -n '^}' | head -1 | cut -d: -f1)
            func_size=$((func_end_line + 1))  # +1 to include the closing brace
            
            # Count the number of calls to the function
            func_calls=$(count_calls "$func_name")
            callsfun=$(count_calls_folder "$func_name" "$LIB_DEP_DIR" "$file_name")
            callsgen=$(count_calls_folder "$func_name" "$SRC_SET_DIR" "$file_name")
            
            # Get comments for arguments, shortname, and description
            description=$(get_comment $((line_number-3)))
            shortname=$(get_comment $((line_number-2)))
            arguments=$(get_comment $((line_number-1)))

            # Print function information
            print_row "$func_name" "$arguments" "$shortname" "$description" "$func_size" "$line_number" "$func_calls" "$callsfun" "$callsgen"
            if $break_mode; then
                print_separator_2
            fi
        fi
    done < "$file_name"

    if ! $break_mode; then
        print_separator
    fi
    echo ""
}

# Analyzes the usage of variables from a config file across target folders, displaying variable names, values, and occurrence counts in various files
# analyze config usage
# <sort mode: -o|-a|""|> <config file or directory> <target folder1> [target folder2 ...]
aux-acu() {
    local sort_mode_arg="$1"
    local conf_source="$2"
    shift 2 # Remove sort_mode and conf_source from arguments
    local target_folders_input=("$@") # Remaining arguments are the target folders

    # Customizable column widths
    local tab_width_var_names=24
    local tab_width_var_values=30
    local tab_width_total_occ=10
    # Adjusted width for individual target directory occurrence columns to show details
    local tab_width_per_dir_occ=40 # Increased width

    local usage_message="Usage: aux-acu <-o|-a|\"\"> <config file or directory> <target folder1> [target folder2 ...]"
    local sort_mode_details="  -o: original order from config file\n  -a: alphanumeric order of variable names\n  \"\": defaults to -o (original order)"

    if [ ${#target_folders_input[@]} -eq 0 ]; then
        echo "Error: At least one target folder must be specified."
        echo -e "$usage_message\n$sort_mode_details"
        return 1
    fi

    local sort_mode
    if [[ -z "$sort_mode_arg" ]]; then
        sort_mode="-o" # Default to original order if sort_mode_arg is empty
    else
        sort_mode="$sort_mode_arg"
    fi

    if [[ "$sort_mode" != "-o" && "$sort_mode" != "-a" ]]; then
        echo "Invalid sort mode: '$sort_mode_arg'. Use -o, -a, or an empty string (which defaults to -o)."
        echo -e "$usage_message\n$sort_mode_details"
        # Consider calling aux-use if it's generic enough or pass specific usage.
        return 1
    fi

    if [[ ! -f "$conf_source" && ! -d "$conf_source" ]]; then
        echo "Config source '$conf_source' is not a valid file or directory."
        return 1
    fi

    for tf_path in "${target_folders_input[@]}"; do
        if [[ ! -d "$tf_path" ]]; then
            echo "Error: Target folder '$tf_path' does not exist."
            return 1
        fi
    done

    declare -A config_vars
    declare -a var_order # To store variables in their original order from the config

    # --- Helper function to read config file (no changes needed from previous version) ---
    _aux_acu_read_config_file() {
        local current_conf_source_path="$1"
        local files_to_process=()

        if [[ -d "$current_conf_source_path" ]]; then
            local item
            for item in "$current_conf_source_path"/*; do
                if [[ -f "$item" ]]; then
                    files_to_process+=("$item")
                fi
            done
            if [ ${#files_to_process[@]} -eq 0 ]; then
                echo "Warning: No configuration files found in directory '$current_conf_source_path'." >&2
                return
            fi
        elif [[ -f "$current_conf_source_path" ]]; then
            files_to_process+=("$current_conf_source_path")
        else
            echo "Error: Invalid config source path '$current_conf_source_path' in _aux_acu_read_config_file." >&2
            return 1
        fi

        local current_conf_file var value line
        for current_conf_file in "${files_to_process[@]}"; do
            while IFS= read -r line || [[ -n "$line" ]]; do
                if [[ "$line" =~ ^[[:space:]]*# || -z "$line" || "$line" =~ ^[[:space:]]*declare || ! "$line" =~ = ]]; then
                    continue
                fi
                local var_raw value_raw
                var_raw=$(echo "$line" | cut -d'=' -f1)
                value_raw=$(echo "$line" | cut -d'=' -f2-)
                var=$(echo "$var_raw" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                if [[ ! "$var" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    continue
                fi
                value=$(echo "$value_raw" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/^"\\(.*\\)"$/\\1/' -e "s/^'\\([^']*\)'$/\\1/")
                if [[ -n "$var" ]]; then
                    config_vars["$var"]="$value"
                    if ! printf '%s\\n' "${var_order[@]}" | grep -qFx "$var"; then
                        var_order+=("$var")
                    fi
                fi
            done < "$current_conf_file"
        done
    }

    # --- Helper function to truncate strings (no changes needed) ---
    _aux_acu_truncate_string() {
        local str="$1"
        local max_length="$2"
        if [ "${#str}" -gt "$max_length" ]; then
            if [ "$max_length" -lt 2 ]; then
                 printf "%.*s" "$max_length" "$str"
            else
                printf "%.*s.." "$((max_length-2))" "$str"
            fi
        else
            printf "%-${max_length}s" "$str" # Ensures left alignment and padding
        fi
    }
    
    # --- Helper functions for table printing (MODIFIED) ---
    _aux_acu_print_separator() {
        local line="+"
        local h_var_segment h_val_segment h_occ_segment h_dir_segment # Declared on one line

        # For "Variable" column
        h_var_segment=$(printf '%*s' "$((${tab_width_var_names} + 1))" '' | tr ' ' '-')
        line+="${h_var_segment}-+"

        # For "Value" column
        h_val_segment=$(printf '%*s' "$((${tab_width_var_values} + 1))" '' | tr ' ' '-')
        line+="${h_val_segment}-+"

        # For "Total Occ." column
        h_occ_segment=$(printf '%*s' "$((${tab_width_total_occ} + 1))" '' | tr ' ' '-')
        line+="${h_occ_segment}-+"

        # For each target directory column
        for _ in "${target_folders_input[@]}"; do # No need for target_folder_path variable here
            h_dir_segment=$(printf '%*s' "$((${tab_width_per_dir_occ} + 1))" '' | tr ' ' '-')
            line+="${h_dir_segment}-+"
        done
        printf "%s\n" "$line"
    }

    _aux_acu_print_header() {
        _aux_acu_print_separator
        local header_string="| "
        header_string+=$(printf "%-${tab_width_var_names}s | " "Variable")
        header_string+=$(printf "%-${tab_width_var_values}s | " "Value")
        header_string+=$(printf "%-${tab_width_total_occ}s | " "Total Occ.")
        for target_folder_path in "${target_folders_input[@]}"; do
            local dir_name_header=$(_aux_acu_truncate_string "$(basename "$target_folder_path")" "$tab_width_per_dir_occ")
            header_string+=$(printf "%-${tab_width_per_dir_occ}s | " "$dir_name_header")
        done
        printf "%s\n" "$header_string"
        _aux_acu_print_separator
    }

    _aux_acu_print_row() {
        local var_name_in_row="$1"
        local var_value_in_row="$2"
        local overall_total_occurrences_in_row="$3"
        shift 3
        local per_dir_detail_strings_in_row=("$@") # Array of "file:count,..." strings or "0"

        local row_string="| "
        row_string+=$(printf "%s | " "$(_aux_acu_truncate_string "$var_name_in_row" "$tab_width_var_names")")
        row_string+=$(printf "%s | " "$(_aux_acu_truncate_string "$var_value_in_row" "$tab_width_var_values")")
        row_string+=$(printf "%${tab_width_total_occ}s | " "$overall_total_occurrences_in_row")

        for detail_str_for_dir in "${per_dir_detail_strings_in_row[@]}"; do
            # Truncate and left-align the detail string for the directory column
            row_string+=$(printf "%s | " "$(_aux_acu_truncate_string "$detail_str_for_dir" "$tab_width_per_dir_occ")")
        done
        printf "%s\n" "$row_string"
    }

    _aux_acu_print_footer() {
        _aux_acu_print_separator
    }

    # --- Main logic ---
    _aux_acu_read_config_file "$conf_source"
    if [ ${#var_order[@]} -eq 0 ]; then
        echo "No variables found in config source '$conf_source'."
        return
    fi
    
    local -a vars_to_iterate
    if [[ "$sort_mode" == "-a" ]]; then
        mapfile -t vars_to_iterate < <(printf "%s\n" "${var_order[@]}" | sort)
    else # -o (original order) or default
        vars_to_iterate=("${var_order[@]}")
    fi

    _aux_acu_print_header

    for var_name in "${vars_to_iterate[@]}"; do
        local var_value="${config_vars[$var_name]}"
        local overall_total_occurrences_for_var=0
        local per_dir_details_for_row=() # Stores "file:count,..." or "0" for each target dir

        for target_folder_path in "${target_folders_input[@]}"; do
            local occurrences_in_current_dir_total=0
            local files_with_occurrences_details_in_dir=() # Collects "basename:count" for this dir
            local current_target_files_in_dir=()
            
            mapfile -t current_target_files_in_dir < <(find "$target_folder_path" \( -name ".git" -o -name ".svn" -o -name "node_modules" -o -name "vendor" \) -prune -o -type f -print 2>/dev/null | sort)

            if [ ${#current_target_files_in_dir[@]} -gt 0 ]; then
                for target_file_in_dir in "${current_target_files_in_dir[@]}"; do
                    if [[ -f "$target_file_in_dir" && -r "$target_file_in_dir" ]]; then
                        local occurrences_in_file=$(grep -E -o "\\b${var_name}\\b" "$target_file_in_dir" 2>/dev/null | wc -l)
                        if [[ "$occurrences_in_file" -gt 0 ]]; then
                            occurrences_in_current_dir_total=$((occurrences_in_current_dir_total + occurrences_in_file))
                            files_with_occurrences_details_in_dir+=("$(basename "$target_file_in_dir"):$occurrences_in_file")
                        fi
                    fi
                done
            fi

            local dir_details_display_str="0" # Default to "0"
            if [ ${#files_with_occurrences_details_in_dir[@]} -gt 0 ]; then
                dir_details_display_str=$(IFS=,; echo "${files_with_occurrences_details_in_dir[*]}")
            fi
            per_dir_details_for_row+=("$dir_details_display_str")
            
            overall_total_occurrences_for_var=$((overall_total_occurrences_for_var + occurrences_in_current_dir_total))
        done
        
        _aux_acu_print_row "$var_name" "$var_value" "$overall_total_occurrences_for_var" "${per_dir_details_for_row[@]}"
    done

    _aux_acu_print_footer
}

# Prompts the user to input or confirm a variable's value, allowing for easy customization of script parameters
# main eval variable
# <var_name> <prompt_message> <current_value>
aux-mev() {
    local var_name=$1
    local prompt_message=$2
    local current_value=$3

    if [ $# -ne 3 ]; then
	aux-use
        return 1
    fi

    read -p "$prompt_message [$current_value]: " input
    if [ -n "$input" ]; then
        eval "$var_name=\"$input\""
    else
        eval "$var_name=\"$current_value\""
    fi
}

# Logs a function's execution status with a timestamp, providing a simple way to track script progress and debugging information
# main display notification
# <function_name> <status>
aux-nos() {
    local function_name="$1"
    local status="$2"


    echo "[$(date +"%Y-%m-%d %H:%M:%S")] $function_name: $status"
}

# Displays the source code of a specified function from the library folder, including its description, shortname, and usage
# function library cat
# <function_name>
aux-flc() {
    # Check if a function name is provided
    if [ -z "$1" ]; then
        aux-use
        return 1
    fi

    # Extract the library prefix from the function name
    func_name="$1"
    lib_prefix="${func_name%%-*}"
    lib_file="/root/lab/lib/${lib_prefix}.bash"

    # Check if the library file exists
    if [ ! -f "$lib_file" ]; then
        echo "Library file $lib_file not found!"
        return 1
    fi

    # Search for the function definition in the library file
    start_line=$(grep -n "^[[:space:]]*${func_name}[[:space:]]*()" "$lib_file" | cut -d: -f1)
    start_line=$((start_line - 3))

    if [ -z "$start_line" ]; then
        echo "Function $func_name not found in $lib_file"
        return 1
    fi

    # Extract the function source code
    awk "NR >= $start_line { print; if (/^\}$/) exit }" "$lib_file"
}

# Displays the usage information, shortname, and description of the calling function, helping users understand how to use it
# function usage information
#
aux-use() {
    local caller_line=$(caller 0)
    local caller_function=$(echo $caller_line | awk '{print $2}')
    local script_file="${BASH_SOURCE[1]}"

    # Use grep to locate the function's declaration line number
    local function_start_line=$(grep -n -m 1 "^[[:space:]]*${caller_function}()" "$script_file" | cut -d: -f1)

    if [ -z "$function_start_line" ]; then
        echo "Function not found."
        return
    fi

    # Calculate the line number of the comment
    local description_line=$((function_start_line - 3))
    local shortname_line=$((function_start_line - 2))
    local usage_line=$((function_start_line - 1))

    # Use sed to get the comment line and strip off leading "# "
    local description=$(sed -n "${description_line}s/^# //p" "$script_file")
    local shortname=$(sed -n "${shortname_line}s/^# //p" "$script_file")
    local usage=$(sed -n "${usage_line}s/^# //p" "$script_file")
    local funcname=${caller_function}

    # Display the comment
    echo "Description:    $description"
    echo "Shortname:      $shortname"
    echo "Usage:          $funcname" "$usage"

}
