#!/bin/bash

# ==============================================================================
# Script: aux/src
#
# Description:
#   This script provides a framework for executing shell scripts with
#   interactive and direct execution modes. It includes utilities for
#   setting up the environment, parsing script sections, displaying usage
#   information, and managing different output display formats.
#
#   It is designed to be sourced or used by other scripts to provide a
#   consistent command-line interface and execution flow.
#
# Key Functions:
#   - setup_source: Initializes the environment by sourcing necessary files.
#   - get_section_ids: Identifies executable sections within a script.
#   - get_section_description: Retrieves descriptions for script sections.
#   - print_usage: Displays help and usage instructions.
#   - setup_main: Parses command-line arguments and routes to execution modes.
#   - setup_interactive_mode: Provides a menu-driven interface for users.
#   - setup_executing_mode: Allows direct execution of specified sections.
#   - setup_display_menu: Formats and displays script content based on user
#                         preferences (e.g., expanding variables, showing
#                         function descriptions).
#
# Usage:
#   Typically, a master script would call 'setup_main' from this file,
#   passing mode and arguments.
#   Example: ./master_script.sh -i (for interactive mode)
#            ./master_script.sh -x section_name (to execute a specific section)
#
# Dependencies:
#   - Relies on a specific project structure for sourcing environment and
#     function files (e.g., ../depl, ../env relative to the script's dir).
#   - Assumes scripts using this framework define sections as functions
#     ending with "_xall()".
# ==============================================================================

# Enable error handling only if executed directly, not when sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    set -e
fi

# Dynamically source all environment configuration files

# Determine the absolute path to the directory containing this script.
# BASH_SOURCE[0] is the path to the current script.
_AUX_SRC_SCRIPT_DIR_TEMP="$(dirname "${BASH_SOURCE[0]}")"

# Construct the path to the cfg/env directory: two levels up from this script's dir, then into cfg/env.
# Use realpath to resolve to an absolute, canonical path.
_CFG_ENV_DIR_TEMP="$(realpath "${_AUX_SRC_SCRIPT_DIR_TEMP}/../../cfg/env")"

if [[ -d "$_CFG_ENV_DIR_TEMP" ]]; then
    printf "INFO: Sourcing environment configuration files from: %s\n" "$_CFG_ENV_DIR_TEMP" >&2
    for _env_file_temp in "$_CFG_ENV_DIR_TEMP"/*; do
        if [[ -f "$_env_file_temp" ]] && [[ -r "$_env_file_temp" ]]; then
            printf "  ├─ Loading: %s\n" "$(basename "$_env_file_temp")" >&2
            # shellcheck source=/dev/null
            source "$_env_file_temp" || printf "WARNING: Failed to source %s\n" "$(basename "$_env_file_temp")" >&2
        fi
    done
else
    printf "WARNING: Environment configuration directory not found: %s\n" "$_CFG_ENV_DIR_TEMP" >&2
fi
# Clean up temporary variables
unset _AUX_SRC_SCRIPT_DIR_TEMP _CFG_ENV_DIR_TEMP _env_file_temp

# Dynamically source all function library files from lib/dep/

# Determine the absolute path to the directory containing this script again (or reuse if scope allows and it's clean).
# For clarity and safety, especially if this script could be sourced in complex ways, re-determining is safer.
_AUX_SRC_SCRIPT_DIR_TEMP2="$(dirname "${BASH_SOURCE[0]}")"

# Construct the path to the lib/dep directory: two levels up, then into lib/dep.
_LIB_DEP_DIR_TEMP="$(realpath "${_AUX_SRC_SCRIPT_DIR_TEMP2}/../../lib/dep")"

if [[ -d "$_LIB_DEP_DIR_TEMP" ]]; then
    printf "INFO: Sourcing function library files from: %s\n" "$_LIB_DEP_DIR_TEMP" >&2
    for _lib_file_temp in "$_LIB_DEP_DIR_TEMP"/*; do
        if [[ -f "$_lib_file_temp" ]] && [[ -r "$_lib_file_temp" ]]; then
            printf "  ├─ Loading: %s\n" "$(basename "$_lib_file_temp")" >&2
            # shellcheck source=/dev/null
            source "$_lib_file_temp" || printf "WARNING: Failed to source library file %s\n" "$(basename "$_lib_file_temp")" >&2
        fi
    done
else
    printf "WARNING: Function library directory not found: %s\n" "$_LIB_DEP_DIR_TEMP" >&2
fi
# Clean up temporary variables for this block
unset _AUX_SRC_SCRIPT_DIR_TEMP2 _LIB_DEP_DIR_TEMP _lib_file_temp

# Dynamically source all other files from the same directory as this script.

# Determine the absolute path to the directory containing this script.
_AUX_SRC_SELF_DIR_TEMP="$(dirname "${BASH_SOURCE[0]}")"
# Get the basename of the current script to exclude it from sourcing.
_AUX_SRC_SELF_BASENAME_TEMP="$(basename "${BASH_SOURCE[0]}")"

if [[ -d "$_AUX_SRC_SELF_DIR_TEMP" ]]; then
    printf "INFO: Sourcing other files from script's own directory: %s\n" "$_AUX_SRC_SELF_DIR_TEMP" >&2
    for _self_dir_file_temp in "$_AUX_SRC_SELF_DIR_TEMP"/*; do
        # Check if it's a regular file, readable, and not the script itself
        if [[ -f "$_self_dir_file_temp" ]] && [[ -r "$_self_dir_file_temp" ]] && [[ "$(basename "$_self_dir_file_temp")" != "$_AUX_SRC_SELF_BASENAME_TEMP" ]]; then
            printf "  ├─ Loading: %s\n" "$(basename "$_self_dir_file_temp")" >&2
            # shellcheck source=/dev/null
            source "$_self_dir_file_temp" || printf "WARNING: Failed to source file %s\n" "$(basename "$_self_dir_file_temp")" >&2
        fi
    done
else
    printf "WARNING: Script's own directory not found: %s\n" "$_AUX_SRC_SELF_DIR_TEMP" >&2
fi
# Clean up temporary variables for this block
unset _AUX_SRC_SELF_DIR_TEMP _AUX_SRC_SELF_BASENAME_TEMP _self_dir_file_temp

setup_source() {
    local dir="$1"
    local file="$2"
    local base="$3"
    local base_indent="          "
    local BOLD='\033[1m'
    local RESET='\033[0m'

    # Calculate lab root by going up one directory from the script location
    local lab_root="$(dirname "$dir")"
    local fun_dir="$lab_root/depl"  # CHANGED from fun to depl
    local env_dir="$lab_root/env"

    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    printf "%s┃ ${BOLD}Environment Setup${RESET}\n" "$base_indent"
    printf "%s┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" "$base_indent"

    if [[ -z "$SOURCE_RC_SUCCESS" ]]; then
        # Source all files in env directory
        printf "%s┃ Sourcing environment files from: %s\n" "$base_indent" "$env_dir"
        for conf_file in "$env_dir"/*; do
            if [[ -f "$conf_file" ]]; then
                printf "%s┃ ├─ Loading: %s\n" "$base_indent" "$(basename "$conf_file")"
                source "$conf_file" || printf "%s┃ │  └─ Failed to source %s\n" "$base_indent" "$(basename "$conf_file")"
            fi
        done

        # Source all files in depl directory (was fun)
        printf "%s┃ Sourcing function files from: %s\n" "$base_indent" "$fun_dir"
        for func_file in "$fun_dir"/*; do
            if [[ -f "$func_file" ]]; then
                printf "%s┃ ├─ Loading: %s\n" "$base_indent" "$(basename "$func_file")"
                source "$func_file" || printf "%s┃ │  └─ Failed to source %s\n" "$base_indent" "$(basename "$func_file")"
            fi
        done

        export SOURCE_RC_SUCCESS=1
        printf "%s┃ ${BOLD}Environment setup completed successfully${RESET}\n" "$base_indent"
    else
        printf "%s┃ ${BOLD}Environment already sourced, skipping...${RESET}\n" "$base_indent"
    fi

    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"
}

# Helper function to get section IDs from the calling script
get_section_ids() {
    local script_path="$1"
    local -n ids_array="$2"  # nameref to array for storing results

    # Clear the array
    ids_array=()

    # Read the script and find all *_xall functions
    while IFS= read -r line; do
        if [[ $line =~ ^([a-zA-Z_]+)_xall\(\) ]]; then
            ids_array+=("${BASH_REMATCH[1]}")
        fi
    done < "$script_path"

    # Sort the array
    IFS=$'\n' ids_array=($(sort <<<"${ids_array[*]}"))
    unset IFS

    printf "      Found sections: %s\n" "${ids_array[*]}"
}

# Helper function to get section descriptions
get_section_description() {
    local script_path="$1"
    local section_id="$2"

    # Look for the comment line before the function definition
    local description
    description=$(awk -v fname="${section_id}_xall" '
        /^#/ {
            desc = substr($0, 3)  # Remove "# " prefix
            next
        }
        $0 ~ "^"fname"\\(\\)" {
            if (desc != "") {
                print desc
            } else {
                print "Section " fname
            }
            exit
        }
    ' "$script_path")

    # If no description found or awk failed, provide a default
    if [[ -z "$description" ]]; then
        description="Section ${section_id}"
    fi

    echo "$description"
}

print_usage() {
    local base_indent="          "
    # Get directory name and base name dynamically
    local dir_name=$(dirname "$0")
    dir_name=$(basename "$dir_name")  # Get just the last directory name
    local base_name=$(basename "$0")
    base_name="${base_name%.*}"       # Remove extension
    local header="${dir_name}/${base_name} usage guide"

    # Get the calling script's path
    local calling_script
    if [[ -n "${BASH_SOURCE[1]}" ]]; then
        calling_script="${BASH_SOURCE[1]}"
    else
        calling_script="$0"
    fi

    # Get section IDs
    local -a section_ids
    get_section_ids "$calling_script" section_ids

    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    printf "%s┃ %s\n" "$base_indent" "$header"
    printf "%s┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" "$base_indent"
    printf "%s┃ COMMAND SYNTAX:\n" "$base_indent"
    printf "%s┃   ./%s MODE [ARGUMENT]\n" "$base_indent" "$(basename "$0")"
    printf "%s┃ \n" "$base_indent"
    printf "%s┃ AVAILABLE MODES:\n" "$base_indent"
    printf "%s┃   -i : Interactive Mode\n" "$base_indent"
    printf "%s┃        Provides a menu-driven interface for executing functions\n" "$base_indent"
    printf "%s┃        Optional: Add display mode (1-6) for different output formats\n" "$base_indent"
    printf "%s┃        Example: ./%s -i 2\n" "$base_indent" "$(basename "$0")"
    printf "%s┃ \n" "$base_indent"
    printf "%s┃   -x : Execution Mode\n" "$base_indent"
    printf "%s┃        Directly executes specified section(s)\n" "$base_indent"
    printf "%s┃        Required: Section name or '-all'\n" "$base_indent"
    printf "%s┃        Example: ./%s -x a\n" "$base_indent" "$(basename "$0")"
    printf "%s┃ \n" "$base_indent"
    printf "%s┃ SECTIONS:\n" "$base_indent"

    # Print each section with its description
    for section_id in "${section_ids[@]}"; do
        local description
        description=$(get_section_description "$calling_script" "$section_id")
        printf "%s┃   %-4s : %s\n" "$base_indent" "$section_id" "$description"
    done
    printf "%s┃   -all : Execute All Sections\n" "$base_indent"
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"
}

setup_main() {
    local base_indent="          "

    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Incorrect number of arguments."
        print_usage
        return 1
    fi

    local mode="$1"
    local argument="$2"

    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    printf "%s┃ Script Execution\n" "$base_indent"
    printf "%s┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" "$base_indent"
    printf "%s┃ Mode: %s\n" "$base_indent" "$mode"
    if [ -n "$argument" ]; then
        printf "%s┃ Argument: %s\n" "$base_indent" "$argument"
    fi
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"

    case "$mode" in
        -i)
            setup_interactive_mode "$argument"
            ;;
        -x)
            if [ -z "$argument" ]; then
                echo "Section argument is required for executing mode."
                print_usage
                return 1
            fi
            setup_executing_mode "$argument"
            ;;
        *)
            echo "Invalid mode. Use -i for interactive or -x for executing."
            print_usage
            return 1
            ;;
    esac
}

setup_interactive_mode() {
    local display_choice="$1"
    printf "    Setup interactive mode with display choice: %s\n" "$display_choice"

    local base_indent="          "
    local BOLD='\033[1m'
    local RESET='\033[0m'

    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    printf "%s┃ ${BOLD}Choose a display option:${RESET}\n" "$base_indent"
    printf "%s┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" "$base_indent"
    printf "%s┃ 1. Default display\n" "$base_indent"
    printf "%s┃ 2. Expand variables\n" "$base_indent"
    printf "%s┃ 3. Show function descriptions\n" "$base_indent"
    printf "%s┃ 4. Expand variables and show function descriptions\n" "$base_indent"
    printf "%s┃ 5. Show only function names and descriptions\n" "$base_indent"
    printf "%s┃ 6. Show only function descriptions\n" "$base_indent"
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"

    if [ -z "$display_choice" ]; then
        read -p "${base_indent}Enter your choice (1-6): " display_choice
    fi

    # Validate user input
    if ! [[ "$display_choice" =~ ^[1-6]$ ]]; then
        echo "Invalid choice. Using default display (1)."
        display_choice=1
    fi

    setup_display_menu "$DIR_SH" "$FILE_SH" "$display_choice" "-all"
    select_and_execute_sections
}

setup_executing_mode() {
    echo "DEBUG: Enter setup_executing_mode - PACKAGES_ALL: ${PACKAGES_ALL[@]}"
    local section="$1"
    printf "    Setup executing mode for section: %s\n" "$section"

    if [[ "$section" == "-all" ]]; then
        printf "      Executing all sections\n"
        for func in "${!MENU_OPTIONS[@]}"; do
            printf "        Executing section: %s\n" "$func"
            ${MENU_OPTIONS[$func]}
        done
    else
        if [[ -n "${MENU_OPTIONS[$section]}" ]]; then
            printf "      Executing section: %s\n" "$section"
            ${MENU_OPTIONS[$section]}
        else
            echo "Invalid section: $section"
            exit 1
        fi
    fi
}

select_and_execute_sections() {
    printf "    Entering select_and_execute_sections\n"
    local base_indent="          "
    local BOLD='\033[1m'
    local RESET='\033[0m'

    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    printf "%s┃ ${BOLD}Select sections to execute:${RESET}\n" "$base_indent"
    printf "%s┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" "$base_indent"
    printf "%s┃ Available sections: ${BOLD}%s${RESET}\n" "$base_indent" "${!MENU_OPTIONS[*]}"
    printf "%s┃ Type 'all' to select all sections\n" "$base_indent"
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"

    read -p "${base_indent}Enter section(s) separated by space, or 'all': " sections

    if [[ "$sections" == "all" ]]; then
        sections="${!MENU_OPTIONS[*]}"
        printf "      User selected all sections\n"
    else
        printf "      User selected sections: %s\n" "$sections"
    fi

    for section in $sections; do
        if [[ -n "${MENU_OPTIONS[$section]}" ]]; then
            printf "      Executing section: %s\n" "$section"
            setup_executing_mode "$section"
        else
            echo "Invalid section: $section. Skipping."
        fi
    done
}

# Function to expand variables
expand_variables() {
    local line="$1"
    local _ef_result_line="$line"  # Renamed to avoid collision

    # Find potential variable names (words)
    # Ensure grep output is handled safely if it could be empty or contain special characters for the loop
    local vars_found
    vars_found=$(echo "$line" | grep -o '\<[a-zA-Z_][a-zA-Z0-9_]*\>')

    # IFS is set to newline to handle variable names with spaces if grep could produce them (not with this pattern)
    # and to prevent word splitting on spaces within a single found var_name (already handled by grep -o)
    local OLD_IFS="$IFS"
    IFS=$'\n'
    for var_name in $vars_found; do
        IFS="$OLD_IFS" # Restore IFS for commands inside the loop if any relied on it
        # Check if this word is a currently set variable
        # Ensure $var_name is quoted for the -v test
        if [[ -v "$var_name" ]]; then
            # Ensure we are not trying to expand our own accumulator variable
            # This check is mostly defensive if _ef_result_line was not unique enough
            if [[ "$var_name" == "_ef_result_line" ]]; then
                continue
            fi

            local value_of_var="${!var_name}"
            # Replace all occurrences of the variable name (as a whole word)
            # with its value.
            _ef_result_line="${_ef_result_line//"$var_name"/"$value_of_var"}"
        fi
        OLD_IFS="$IFS" # Re-set IFS before next iteration if it was changed
        IFS=$'\n'
    done
    IFS="$OLD_IFS" # Restore IFS permanently after the loop

    echo "$_ef_result_line"
}

# Function to get function description
get_function_description() {
    local func_name="$1"
    local lib_name="${func_name%%-*}"
    local lib_file="${LIB_DEP_DIR}/${lib_name}"

    if [ ! -f "$lib_file" ]; then
        printf "      Library file not found: %s\n" "$lib_file"
        return
    fi

    local description=$(awk -v fn="$func_name" '
        $0 ~ "^"fn"\\(\\)" {
            if (NR > 2) print lines[NR-3];
            exit;
        }
        {
            lines[NR] = $0;
        }
    ' "$lib_file" | sed 's/^# *//')

    if [ -n "$description" ]; then
        printf "        Function description: %s\n" "$description"
        echo "--( $description )--"
    else
        printf "        No description found for function: %s\n" "$func_name"
    fi
}

setup_display_menu() {
    local dir="$1"
    local file="$2"
    local display_choice="$3"
    local section="$4"
    local base_indent="          "
    local content_indent="            "

    # ANSI escape codes for bold text and reset
    local BOLD='\033[1m'
    local RESET='\033[0m'

    printf "      Scanning file %s for *_xall functions\n" "$file"
    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    grep -E '^[a-zA-Z_]+_xall\(\)' "$dir/$file" | while IFS= read -r line; do
        func_name=$(echo "$line" | awk -F'(' '{print $1}')
        if [[ "$section" == "-all" || "${func_name%%_xall}" == "$section" ]]; then
            printf "%s┣━━━ ${BOLD}( %s )${RESET}\n" "$base_indent" "${func_name%%_xall}"
            in_function=false
            first_line=true
            while IFS= read -r inner_line; do
                if $first_line; then
                    first_line=false
                    in_function=true
                    continue
                fi
                if [[ "$inner_line" == "}" ]]; then
                    in_function=false
                    printf "%s┃\n" "$base_indent"
                elif $in_function; then
                    case "$display_choice" in
                        1)
                            printf "%s┃ %s\n" "$base_indent" "$inner_line"
                            ;;
                        2)
                            printf "%s┃ %s\n" "$base_indent" "$(expand_variables "$inner_line")"
                            ;;
                        3)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                printf "%s┃ %s %s\n" "$base_indent" "${inner_line#"${inner_line%%[![:space:]]*}"}" "$desc"
                            else
                                printf "%s┃ %s\n" "$base_indent" "${inner_line#"${inner_line%%[![:space:]]*}"}"
                            fi
                            ;;
                        4)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                printf "%s┃ %s %s\n" "$base_indent" "$(expand_variables "${inner_line#"${inner_line%%[![:space:]]*}"}")" "$desc"
                            else
                                printf "%s┃ %s\n" "$base_indent" "$(expand_variables "${inner_line#"${inner_line%%[![:space:]]*}"}")"
                            fi
                            ;;
                        5)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                if [ -n "$desc" ]; then
                                    printf "%s┃ %s: %s\n" "$base_indent" "$func" "$desc"
                                fi
                            fi
                            ;;
                        6)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                if [ -n "$desc" ]; then
                                    printf "%s┃ %s\n" "$base_indent" "$desc"
                                fi
                            fi
                            ;;
                    esac
                fi
            done < <(sed -n "/^${func_name}()/,/^}/p" "$dir/$file")
        fi
    done
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"
}

# Main execution is not needed in .up file as it's sourced by gen.sh
