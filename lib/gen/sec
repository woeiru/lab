#!/bin/bash
#######################################################################
# Security Utilities Library
#######################################################################
# File: /home/es/lab/lib/gen/sec
# Module Prefix: sec_
# Description: Comprehensive security management system providing secure
#              password generation, storage, and credential management
#              for lab environment infrastructure components.
#
# Dependencies:
#   - /dev/urandom (for cryptographically secure random generation)
#   - tr command (for character filtering)
#   - head command (for length limiting)
#   - Standard file system utilities (mkdir, chmod, cat)
#
# Purpose:
#   Eliminates hardcoded passwords and insecure credential management
#   by providing cryptographically secure password generation and
#   storage mechanisms with proper file permissions and access controls.
#
# Key Features:
#   - Cryptographically secure password generation using /dev/urandom
#   - Configurable password length and character complexity
#   - Secure file-based password storage with 600 permissions
#   - Service-specific password management and isolation
#   - Automatic password initialization and loading
#   - Fallback mechanisms for missing or corrupted passwords
#   - Module prefix convention (sec_) for namespace isolation
#   - Backward compatibility aliases for existing scripts
#
# Security Model:
#   - Passwords stored in protected directory (700 permissions)
#   - Individual password files have 600 permissions (owner read/write only)
#   - No passwords stored in memory longer than necessary
#   - Secure random source (/dev/urandom) for all generation
#   - Character filtering to avoid shell metacharacter issues
#
# Password Categories:
#   - Container root passwords (ct_*.pwd)
#   - Service user passwords (service_user.pwd)
#   - Database credentials (db_*.pwd)
#   - Application-specific passwords (app_*.pwd)
#
# Usage Example:
#   source /home/es/lab/lib/gen/sec
#   sec_init_password_management "/secure/passwords"
#   password=$(sec_generate_secure_password 20)
#   sec_store_secure_password "DB_PASSWORD" 24
#
# File Structure:
#   /secure/passwords/
#   ├── ct_pbs.pwd          # PBS container root password
#   ├── ct_nfs.pwd          # NFS container root password
#   ├── ct_smb.pwd          # SMB container root password
#   ├── nfs_user.pwd        # NFS service user password
#   ├── smb_user.pwd        # SMB service user password
#   └── db_root.pwd         # Database root password
#
# Functions Provided:
#   - sec_generate_secure_password: Create cryptographically secure passwords
#   - sec_store_secure_password: Store password in variable with validation
#   - sec_generate_service_passwords: Create all service passwords at once
#   - sec_create_password_file: Create password file with proper permissions
#   - sec_load_stored_passwords: Load existing passwords from storage
#   - sec_init_password_management: Initialize complete password system
#
# Security Best Practices:
#   - Minimum 16-character passwords for user accounts
#   - Minimum 20-character passwords for system/root accounts
#   - Include special characters for increased entropy
#   - Avoid problematic characters that cause shell issues
#   - Regular password rotation (manual process)
#   - Secure backup of password directory
#
# Integration Points:
#   - Works with infrastructure utilities (/home/es/lab/lib/gen/inf)
#   - Integrates with configuration files (cfg/env/*)
#   - Compatible with deployment scripts
#   - Supports multiple password storage backends
#
# Error Handling:
#   - Graceful fallback for missing password directories
#   - Automatic password generation when files missing
#   - Validation of password file permissions
#   - Clear error messages for troubleshooting
#
# Performance Considerations:
#   - Password generation uses efficient /dev/urandom access
#   - File operations minimized for batch processing
#   - Memory cleanup for security-sensitive operations
#   - Lazy loading of passwords when needed
#
# Compliance Features:
#   - Audit trail through file timestamps
#   - Proper file permissions for security standards
#   - No cleartext passwords in logs or memory dumps
#   - Separation of concerns for different services
#######################################################################

# Security utility functions for the lab environment
# Provides secure password generation and credential management

# Generate a secure password with specified length
# Usage: sec_generate_secure_password [length] [exclude_special]
# Default length: 16, Default special chars: included
sec_generate_secure_password() {
    local length=${1:-16}
    local exclude_special=${2:-false}
    
    if [[ "$exclude_special" == "true" ]]; then
        # Alphanumeric only
        tr -dc 'A-Za-z0-9' < /dev/urandom | head -c "$length"
    else
        # Include special characters but avoid problematic ones
        tr -dc 'A-Za-z0-9!@#$%^&*()_+-=' < /dev/urandom | head -c "$length"
    fi
    echo
}

# Generate a secure password and store it in a variable
# store secure password
# <var_name> [length] [exclude_special]
sec_store_secure_password() {
    local var_name="$1"
    local length=${2:-16}
    local exclude_special=${3:-false}
    
    if [[ -z "$var_name" ]]; then
        echo "Error: Variable name required" >&2
        return 1
    fi
    
    local password
    password=$(sec_generate_secure_password "$length" "$exclude_special")
    declare -g "$var_name"="$password"
}

# Generate multiple passwords for different services and store them
# generate service passwords
#
sec_generate_service_passwords() {
    # Container root passwords
    sec_store_secure_password "CT_PBS_PASSWORD" 20
    sec_store_secure_password "CT_NFS_PASSWORD" 20
    sec_store_secure_password "CT_SMB_PASSWORD" 20
    
    # Service user passwords
    sec_store_secure_password "NFS_USER_PASSWORD" 16
    sec_store_secure_password "SMB_USER_PASSWORD" 16
    
    # Database passwords (if needed)
    sec_store_secure_password "DB_ROOT_PASSWORD" 24
    sec_store_secure_password "DB_USER_PASSWORD" 20
    
    echo "Generated secure passwords for all services"
}

# Create a password file with proper permissions and security
# create password file
# <filename> <password>
sec_create_password_file() {
    local filename="$1"
    local password="$2"
    
    if [[ -z "$filename" || -z "$password" ]]; then
        echo "Error: Filename and password required" >&2
        return 1
    fi
    
    echo "$password" > "$filename"
    chmod 600 "$filename"
    echo "Password file created: $filename"
}

# Load passwords from secure storage into environment variables
# load stored passwords
# [password_dir]
sec_load_stored_passwords() {
    local password_dir="${1:-/etc/lab/passwords}"
    
    if [[ -d "$password_dir" ]]; then
        for file in "$password_dir"/*.pwd; do
            if [[ -r "$file" ]]; then
                local var_name
                var_name=$(basename "$file" .pwd | tr '[:lower:]' '[:upper:]')
                declare -g "${var_name}_PASSWORD"="$(cat "$file")"
            fi
        done
        echo "Loaded passwords from $password_dir"
    fi
}

# Get the appropriate password directory based on system capabilities
# get password directory
#
sec_get_password_directory() {
    local base_dirs=("/etc/lab/passwords" "/var/lib/lab/passwords" "/home/es/.lab/passwords" "/tmp/lab_passwords")
    
    for dir in "${base_dirs[@]}"; do
        # Check if we can create/write to this directory
        if mkdir -p "$dir" 2>/dev/null && [[ -w "$dir" ]]; then
            chmod 700 "$dir" 2>/dev/null
            echo "$dir"
            return 0
        fi
    done
    
    # Fallback to current user's home if all else fails
    local fallback="$HOME/.lab_passwords"
    mkdir -p "$fallback" 2>/dev/null
    chmod 700 "$fallback" 2>/dev/null
    echo "$fallback"
}

# Initialize secure password management system with directory setup
# init password management
# [password_dir]
sec_init_password_management() {
    local password_dir="${1:-/tmp/lab_passwords}"
    
    # Create password directory if it doesn't exist
    if [[ ! -d "$password_dir" ]]; then
        mkdir -p "$password_dir"
        chmod 700 "$password_dir"
    fi
    
    # Check if password system is already initialized by looking for actual password files
    local password_files=("ct_pbs.pwd" "ct_nfs.pwd" "ct_smb.pwd" "nfs_user.pwd" "smb_user.pwd")
    local files_exist=true
    
    for file in "${password_files[@]}"; do
        if [[ ! -f "$password_dir/$file" ]]; then
            files_exist=false
            break
        fi
    done
    
    if [[ "$files_exist" == "false" ]]; then
        # Generate passwords only if they don't exist
        sec_generate_service_passwords
        
        # Store passwords in files
        sec_create_password_file "$password_dir/ct_pbs.pwd" "$CT_PBS_PASSWORD"
        sec_create_password_file "$password_dir/ct_nfs.pwd" "$CT_NFS_PASSWORD"
        sec_create_password_file "$password_dir/ct_smb.pwd" "$CT_SMB_PASSWORD"
        sec_create_password_file "$password_dir/nfs_user.pwd" "$NFS_USER_PASSWORD"
        sec_create_password_file "$password_dir/smb_user.pwd" "$SMB_USER_PASSWORD"
        sec_create_password_file "$password_dir/ct_root.pwd" "$CT_PBS_PASSWORD"  # Generic container root
        
        echo "Password management initialized in $password_dir"
    else
        sec_load_stored_passwords "$password_dir"
        echo "Loaded existing passwords from $password_dir"
    fi
}

# Initialize password management with smart directory selection
# Initialize password management with automatic directory selection
# init password management auto
#
sec_init_password_management_auto() {
    local password_dir
    password_dir=$(sec_get_password_directory)
    sec_init_password_management "$password_dir"
    echo "Using password directory: $password_dir"
}

# Get password file path with fallback mechanism and validation
# get password file
# <filename>
sec_get_password_file() {
    local filename="$1"
    local search_dirs=("/etc/lab/passwords" "/var/lib/lab/passwords" "/home/es/.lab/passwords" "/tmp/lab_passwords")
    
    for dir in "${search_dirs[@]}"; do
        if [[ -f "$dir/$filename" ]]; then
            echo "$dir/$filename"
            return 0
        fi
    done
    
    # Return temp location as fallback
    echo "/tmp/lab_passwords/$filename"
}

# Get password with smart lookup and generation fallback
# get secure password
# <filename> [length]
sec_get_secure_password() {
    local filename="$1"
    local length="${2:-16}"
    local password_file
    password_file=$(sec_get_password_file "$filename")
    
    if [[ -f "$password_file" ]]; then
        cat "$password_file" 2>/dev/null
    else
        sec_generate_secure_password "$length"
    fi
}

# Make functions available when sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    # Functions are loaded when sourced, no need to export
    :
fi

#######################################################################
# Backward Compatibility Aliases
# These aliases maintain compatibility with existing scripts
# that may use the old function names without the sec_ prefix
#######################################################################

# Legacy function aliases for backward compatibility
# These will be deprecated in future versions
generate_secure_password() { sec_generate_secure_password "$@"; }
store_secure_password() { sec_store_secure_password "$@"; }
generate_service_passwords() { sec_generate_service_passwords "$@"; }
create_password_file() { sec_create_password_file "$@"; }
load_stored_passwords() { sec_load_stored_passwords "$@"; }
get_password_directory() { sec_get_password_directory "$@"; }
init_password_management() { sec_init_password_management "$@"; }
init_password_management_auto() { sec_init_password_management_auto "$@"; }
get_password_file() { sec_get_password_file "$@"; }
get_secure_password() { sec_get_secure_password "$@"; }
