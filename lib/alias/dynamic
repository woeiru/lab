#!/bin/bash

# Improved readme aliases generation with error handling
generate_readme_aliases() {
    start_nested_timing "gen_readme_aliases"
    log "lvl" "Generating readme aliases"
    local FILEBASE_MD="readme.md"

    # Validate LAB_DIR
    if [[ -z "$LAB_DIR" ]]; then
        log "lvl" "Error: LAB_DIR is not defined"
        error_handler "$LINENO" "${ERROR_CODES[CONFIG_ERROR]}" "false"
        return 1
    fi

    # Check if LAB_DIR exists
    if [[ ! -d "$LAB_DIR" ]]; then
        log "lvl" "Error: LAB_DIR directory does not exist: $LAB_DIR"
        error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        return 1
    fi

    start_nested_timing "process_readme_files"
    local found_files=0
    while IFS= read -r -d '' file; do
        log "lvl" "Processing readme file: $file"
        dir=$(dirname "$file")
        dir_name=$(basename "$dir")
        parent_dir=$(basename "$(dirname "$dir")")

        if [[ "$parent_dir" != "lab" ]]; then
            alias_name="$parent_dir-$dir_name-md"
        else
            alias_name="$dir_name-md"
        fi

        alias "c-$alias_name=cat $file"
        alias "v-$alias_name=vim $file"
        log "lvl" "Created aliases: c-$alias_name and v-$alias_name for $file"
        ((found_files++))
    done < <(find "$LAB_DIR" -type f -name "$FILEBASE_MD" -print0 2>/dev/null)

    if ((found_files == 0)); then
        log "lvl" "Warning: No readme files found in $LAB_DIR"
        error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
    fi

    end_nested_timing "process_readme_files" "success"
    end_nested_timing "gen_readme_aliases" "success"
}

generate_level_one_vars_and_aliases() {
    start_nested_timing "gen_level_one"
    log "lvl" "Generating top-level directory aliases"

    # Single timer for directory processing
    start_nested_timing "process_directories"
    for dir in "$LAB_DIR"/*; do
        if [[ -d "$dir" ]]; then
            base=$(basename "$dir")
            if [[ ${#base} -eq 3 ]]; then
                log "lvl" "Processing directory: $base"
                var_name="${base^^}_DIR"
                dir_path=$(realpath "$dir")
                if [[ -z "${!var_name:-}" ]]; then
                    declare -g "$var_name=$dir_path"
                fi
                alias "d-$base=cd $dir_path"
                log "lvl" "Created alias: d-$base -> cd $dir_path"
            fi
        fi
    done
    end_nested_timing "process_directories" "success"

    end_nested_timing "gen_level_one" "success"
}

# Improved level two arrays generation with error handling
generate_level_two_arrays() {
    start_nested_timing "gen_level_two"
    log "lvl" "Generating level two arrays"

    local success_count=0
    for folder in "${GENERATION_FOLDERS[@]}"; do
        start_nested_timing "process_folder_${folder}"
        local dir_path="$LAB_DIR/$folder"
        log "lvl" "Processing folder: $folder, path: $dir_path"

        if [[ ! -d "$dir_path" ]]; then
            log "lvl" "Directory not found: $dir_path"
            error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
            end_nested_timing "process_folder_${folder}" "error"
            continue
        fi

        # Sanitize array name to be a valid Bash variable (replace / with _)
        local array_name="${folder//\//_}_files"
        local files=()

        log "lvl" "Searching for files in $dir_path"
        while IFS= read -r -d '' file; do
            base_name=$(basename "$file")
            if [[ "$base_name" =~ \. ]]; then
                name_without_ext="${base_name%.*}"
            else
                name_without_ext="$base_name"
            fi
            files+=("$name_without_ext")
            log "lvl" "Found file: $file"
            log "lvl" "Added file to $array_name: $name_without_ext"
        done < <(find "$dir_path" -maxdepth 1 -type f \( -name "*" ! -name ".*" \) -print0 2>/dev/null)

        if ((${#files[@]} > 0)); then
            log "lvl" "Creating array $array_name"
            local unique_files=($(printf "%s\n" "${files[@]}" | sort -u))
            eval "declare -ga $array_name=(${unique_files[*]})"
            log "lvl" "Created array $array_name with values: ${!array_name[*]}"
            ((success_count++))
        else
            log "lvl" "No files found in directory: $dir_path"
            error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        fi

        end_nested_timing "process_folder_${folder}" "success"
    done

    if ((success_count == 0)); then
        error_handler "$LINENO" "${ERROR_CODES[GENERAL_ERROR]}" "false"
    fi

    end_nested_timing "gen_level_two" "success"
}

# Improved alias generation with comprehensive error handling and logging
generate_aliases() {
    local alias_type=$1
    local directory=$2
    shift 2
    local files=("$@")

    start_nested_timing "gen_aliases_${alias_type}"
    log "lvl" "Generating ${alias_type} aliases"

    # Input validation
    if [[ -z "$directory" ]]; then
        log "lvl" "Error: Empty directory provided"
        error_handler "$LINENO" "${ERROR_CODES[CONFIG_ERROR]}" "false"
        end_nested_timing "gen_aliases_${alias_type}" "error"
        return 1
    fi

    if [[ ! -d "$directory" ]]; then
        log "lvl" "Error: Directory does not exist: $directory"
        error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        end_nested_timing "gen_aliases_${alias_type}" "error"
        return 1
    fi

    if ((${#files[@]} == 0)); then
        log "lvl" "Warning: No files provided for processing"
        error_handler "$LINENO" "${ERROR_CODES[CONFIG_ERROR]}" "false"
        end_nested_timing "gen_aliases_${alias_type}" "error"
        return 1
    fi

    log "lvl" "Directory: $directory, Files count: ${#files[@]}"
    local folder_name=$(basename "$directory" | tr '[:upper:]' '[:lower:]')
    log "lvl" "Using folder name: $folder_name"

    local success_count=0
    # Process all aliases under single timer
    for file in "${files[@]}"; do
        log "lvl" "Searching for file $file in directory $directory"
        # Search for both files with and without extensions
        local found_file=$(find "$directory" -maxdepth 1 -type f \( -name "$file" -o -name "$file.*" \) | head -n 1)

        if [[ -n "$found_file" ]]; then
            log "lvl" "Found file: $found_file"

            # Check if file has an extension
            if [[ "$found_file" =~ \. ]]; then
                local ext="${found_file##*.}"
                local base_name="$file"
                local display_name="${folder_name}.${base_name}.${ext}"
                local short_display_name="${folder_name}.${base_name}"
            else
                local ext=""
                local base_name="$file"
                local display_name="${folder_name}.${base_name}"
                local short_display_name="${folder_name}.${base_name}"
            fi

            local alias_prefix=""
            case "$alias_type" in
                "bash")
                    # For bash, only create alias if it's a .sh file or has execute permission
                    if [[ "$ext" == "sh" || "$ext" == "bash" ]] || [[ -x "$found_file" ]]; then
                        alias_prefix="b."
                    fi
                    ;;
                "cat") alias_prefix="c." ;;
                "vim") alias_prefix="v." ;;
            esac

            if [[ -n "$alias_prefix" ]]; then
                # Create alias with full name (including extension if present)
                alias "${alias_prefix}${display_name}=${alias_type} ${found_file}"
                log "lvl" "Created alias: ${alias_prefix}${display_name}"

                # Create additional short alias without extension if requested
                if [[ "$alias_type" == "bash" && "$ext" != "" ]]; then
                    alias "${alias_prefix}${short_display_name}=${alias_type} ${found_file}"
                    log "lvl" "Created additional short alias: ${alias_prefix}${short_display_name}"
                fi
                ((success_count++))
            fi
        else
            log "lvl" "No matching file found for: $file"
            error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        fi
    done

    if ((success_count == 0)); then
        log "lvl" "Error: No aliases were created"
        error_handler "$LINENO" "${ERROR_CODES[GENERAL_ERROR]}" "false"
        end_nested_timing "gen_aliases_${alias_type}" "error"
        return 1
    fi

    log "lvl" "Successfully created ${success_count} aliases"
    end_nested_timing "gen_aliases_${alias_type}" "success"
    return 0
}

# Main entry point function with cleaner timing structure
set_dynamic() {
    start_timer "set_dynamic"
    log "lvl" "Setting up Navigation"

    # Group all readme operations
    start_nested_timing "readme_processing"
    generate_readme_aliases
    end_nested_timing "readme_processing" "success"

    # Group all level one operations
    start_nested_timing "level_one_processing"
    generate_level_one_vars_and_aliases
    end_nested_timing "level_one_processing" "success"

    # Group all level two operations
    start_nested_timing "level_two_processing"
    generate_level_two_arrays
    end_nested_timing "level_two_processing" "success"

    # Group all alias generation
    start_nested_timing "alias_processing"
    log "lvl" "Generating all aliases"

    start_nested_timing "env_aliases"
    generate_aliases "cat" "$ENV_DIR" "${env_files[@]}"
    generate_aliases "vim" "$ENV_DIR" "${env_files[@]}"
    end_nested_timing "env_aliases" "success"

    start_nested_timing "fun_aliases"
    generate_aliases "cat" "$LIB_DEPL_DIR" "${fun_files[@]}"
    generate_aliases "vim" "$LIB_DEPL_DIR" "${fun_files[@]}"
    end_nested_timing "fun_aliases" "success"

    start_nested_timing "gem_aliases"
    generate_aliases "cat" "$GEN_DIR" "${gen_files[@]}"
    generate_aliases "vim" "$GEN_DIR" "${gen_files[@]}"
    generate_aliases "bash" "$GEN_DIR" "${gen_files[@]}"
    end_nested_timing "gem_aliases" "success"

    end_nested_timing "alias_processing" "success"

    end_timer "set_dynamic" "success"
}

