#!/bin/bash

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Shows a summary of specific functions in the script, displaying their usage, shortname, and description
# overview functions
# [function_name_filter]
sys_fun() {
    # TECHNICAL DETAILS:
    # Optional parameters - no validation needed
    # Pass all arguments to processing function
    # Supports filtering by function name pattern
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    # Optional parameters - no validation needed
    # Pass all arguments to processing function
    aux_laf "$FILEPATH_gen" "$@"
}

# Displays an overview of specific variables defined in the configuration file, showing their names, values, and usage across different files
# overview variables
# (no parameters)
sys_var() {
    # TECHNICAL DETAILS:
    # Scans configuration files and extracts variable definitions
    # Displays usage across different files and contexts
    # No parameters required - operates on default configuration
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 0 ]; then
        aux_use
        return 1
    fi
    
    aux_acu -o "$CONFIG_gen" "$DIR_FUN/.."
}

# Manages git operations, ensuring the local repository syncs with the remote.
# git sync operations
# [commit_message]
sys_gio() {
    # TECHNICAL DETAILS:
    # Performs status check, pull, commit, and push operations as needed
    # If commit message provided, uses it for commits
    # Otherwise commits with empty message when changes detected
    # Handles both clean working tree updates and dirty tree commits
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    # Optional parameters - no validation needed
    local dir="${DIR_FUN:-.}/.."
    local branch="${GIT_BRANCH:-master}"
    local commit_message=""

    # If arguments are provided, use them as the commit message
    if [ $# -gt 0 ]; then
        commit_message="$*"
    fi

    # Navigate to the git folder
    cd "$dir" || { echo "Failed to change directory to $dir"; return 1; }

    # Fetch updates from remote
    git fetch origin "$branch" || { echo "Failed to fetch from remote"; return 1; }

    # Get the current status
    local status_output
    status_output=$(git status --porcelain)
    if [[ -z "$status_output" ]]; then
        echo "Working tree clean. Checking for updates..."
        if git rev-list HEAD...origin/"$branch" --count | grep -q "^0$"; then
            echo "Local branch is up to date with origin/$branch."
        else
            echo "Updates available. Pulling changes..."
            git pull origin "$branch" || { echo "Failed to pull changes"; return 1; }
        fi
    else
        echo "Changes detected. Committing and pushing..."
        git add . || { echo "Failed to stage changes"; return 1; }
        if [[ -n "$commit_message" ]]; then
            git commit -m "$commit_message" || { echo "Failed to commit changes"; return 1; }
        else
            git commit --allow-empty-message -m "" || { echo "Failed to commit changes"; return 1; }
        fi
        git push origin "$branch" || { echo "Failed to push changes"; return 1; }
    fi

    # Return to the previous directory
    cd - > /dev/null || { echo "Failed to return to previous directory"; return 1; }
}

# Detects the system's package manager
# detect package manager
# (no parameters)
sys_dpa() {
    # TECHNICAL DETAILS:
    # Checks for common package managers: apt, dnf, yum, zypper
    # Returns the detected package manager name or 'unknown'
    # Used by other functions to determine installation commands
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 0 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local pman="unknown"

    if command -v apt &> /dev/null; then
        pman="apt"
    elif command -v dnf &> /dev/null; then
        pman="dnf"
    elif command -v yum &> /dev/null; then
        pman="yum"
    elif command -v zypper &> /dev/null; then
        pman="zypper"
    fi

    echo "$pman"
}

# Updates and upgrades system packages using the detected package manager
# update packages system
# (no parameters)
sys_upa() {
    # TECHNICAL DETAILS:
    # Uses sys_dpa to detect package manager automatically
    # Performs both update (refresh) and upgrade (install) operations
    # Supports apt, dnf, yum, and zypper package managers
    # Provides detailed success/failure feedback
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 0 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"

    # Get package manager using sys-dpa
    local pman
    pman=$(sys_dpa)

    if [ "$pman" = "unknown" ]; then
        aux_nos "$function_name" "Could not detect a supported package manager"
        return 1
    fi

    # Define commands based on package manager
    case "$pman" in
        apt)
            apt update -y && apt upgrade -y
            ;;
        dnf|yum)
            $pman update -y && $pman upgrade -y
            ;;
        zypper)
            zypper refresh -y && zypper update -y
            ;;
        *)
            aux_nos "$function_name" "Unsupported package manager: $pman"
            return 1
            ;;
    esac

    if [ $? -eq 0 ]; then
        aux_nos "$function_name" "System update and upgrade completed successfully"
        return 0
    else
        aux_nos "$function_name" "Failed to update and upgrade system"
        return 1
    fi
}

# Installs specified packages using the system's package manager
# install packages system
# <pak1> <pak2> ...
sys_ipa() {
    # TECHNICAL DETAILS:
    # Filters out already installed packages before attempting installation
    # Uses detected package manager from sys_dpa function
    # Supports multiple packages in single command
    # Provides feedback on installation status
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -lt 1 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"

    # Get package manager using sys-dpa
    local pman
    pman=$(sys_dpa)
    if [ "$pman" = "unknown" ]; then
        aux_nos "$function_name" "Could not detect a supported package manager"
        return 1
    fi

    # Filter out already installed packages
    local packages_to_install=()
    for package in "$@"; do
        case "$pman" in
            apt)
                if ! dpkg -l "$package" &>/dev/null; then
                    packages_to_install+=("$package")
                fi
                ;;
            dnf|yum)
                if ! rpm -q "$package" &>/dev/null; then
                    packages_to_install+=("$package")
                fi
                ;;
            zypper)
                if ! rpm -q "$package" &>/dev/null; then
                    packages_to_install+=("$package")
                fi
                ;;
        esac
    done

    # If no packages need installation, exit successfully
    if [ ${#packages_to_install[@]} -eq 0 ]; then
        aux_nos "$function_name" "All packages are already installed"
        return 0
    fi

    # Install filtered packages
    case "$pman" in
        apt)
            apt install -y "${packages_to_install[@]}"
            ;;
        dnf|yum)
            $pman install -y "${packages_to_install[@]}"
            ;;
        zypper)
            zypper install -y "${packages_to_install[@]}"
            ;;
    esac

    local exit_status=$?
    if [ $exit_status -eq 0 ]; then
        aux_nos "$function_name" "Successfully installed packages: ${packages_to_install[*]}"
        return 0
    else
        aux_nos "$function_name" "Failed to install packages: ${packages_to_install[*]}"
        return 1
    fi
}

# Configures git globally with a specified username and email, essential for proper commit attribution
# git set config
# <username> <usermail>
sys_gst() {
    # TECHNICAL DETAILS:
    # Sets global git configuration for user.name and user.email
    # Essential for proper commit attribution in git operations
    # Both username and email are required parameters
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local username="$1"
    local usermail="$2"

    git config --global user.name "$username"
    git config --global user.email "$usermail"

    aux_nos "$function_name" "executed ( $1 $2 )"
}

# Installs, enables, and starts the sysstat service for system performance monitoring. Modifies the configuration to ensure it's enabled
# setup sysstat service
# (no parameters)
sys_sst() {
    # TECHNICAL DETAILS:
    # Installs sysstat package for system performance monitoring
    # Enables sysstat in /etc/default/sysstat configuration
    # Starts and enables the systemd service
    # Essential for system performance data collection
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 0 ]; then
        aux_use
        return 1
    fi
    
    # Step 1: Install sysstat
    sys_ipa sysstat

  # Step 2: Enable sysstat
  sed -i 's/ENABLED="false"/ENABLED="true"/' /etc/default/sysstat

  # Step 3: Start the sysstat service
  systemctl enable sysstat
  systemctl start sysstat

  echo "sysstat has been installed, enabled, and started."
}

# Creates a new user with a specified username and password, prompting for input if not provided. Verifies successful user creation
# user setup
# <username> <password>
sys_ust() {
    # TECHNICAL DETAILS:
    # Creates new system user with home directory
    # Sets password using chpasswd for security
    # Validates successful user creation with id command
    # Provides interactive prompts if parameters missing
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local username="$1"
    local password="$2"

    # Prompt for user details
    aux_mev "username" "Enter new username" "$username"
    while [ -z "$password" ]; do
        aux_mev "password" "Enter password for $username" "$password"
    done

    # Create the user
    useradd -m "$username"
    echo "$username:$password" | chpasswd

    # Check if user creation was successful
    if id -u "$username" > /dev/null 2>&1; then
        aux_nos "$function_name" "User $username created successfully"
    else
        aux_nos "$function_name" "Failed to create user $username"
        return 1
    fi
}

# Enables and starts a specified systemd service. Checks if the service is active and prompts for continuation if it's not
# systemd setup service
# <service>
sys_sdc() {
    # TECHNICAL DETAILS:
    # Enables service for automatic startup on boot
    # Starts service immediately if not running
    # Verifies service status and provides interactive continuation
    # Handles service activation failures gracefully
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local service="$1"

    # Enable and start smbd service
    systemctl enable "$service"
    systemctl start "$service"

    # Check if service is active
    systemctl is-active --quiet "$service"
    if [ $? -eq 0 ]; then
        aux_nos "$function_name" "$service is active"
    else
        read -p "$service is not active. Do you want to continue anyway? [Y/n] " choice
        case "$choice" in
            [yY]|[yY][eE][sS])
                aux_nos "$function_name" "$service is not active"
                ;;
            *)
                aux_nos "$function_name" "$service is not active. Exiting."
                return 1
                ;;
        esac
    fi
}

# Uploads an SSH key from a plugged-in device to a specified folder (default: /root/.ssh). Handles mounting, file copying, and unmounting of the device
# ssh upload keyfile
# <device_path> <mount_point> <subfolder_path> <upload_path> <file_name>
sys_suk() {
    # TECHNICAL DETAILS:
    # Mounts external device at specified mount point
    # Copies SSH key from device subfolder to target location
    # Handles mount point creation if needed
    # Safely unmounts device after operation
    # Provides interactive confirmation for all paths
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 5 ]; then
        aux_use
        return 1
    fi
    
    local device_path="$1"
    local mount_point="$2"
    local subfolder_path="$3"
    local upload_path="$4"
    local file_name="$5"

    local full_path
    local upload_full_path

    echo ""
    lsblk
    echo ""
    echo "ls /mnt output :"
    ls /mnt
    echo ""

    # Evaluate and confirm variables
    aux_mev "device_path" "Enter the device path" $device_path
    aux_mev "mount_point" "Enter the mount point" $mount_point
    aux_mev "subfolder_path" "Enter the subfolder(s) on the device" $subfolder_path
    aux_mev "file_name" "Enter the file name" $file_name
    aux_mev "upload_path" "Enter the upload path" $upload_path

    full_path="$mount_point/$subfolder_path/$file_name"
    upload_full_path="$upload_path/$file_name"

    # Check if mount point exists
    if [ ! -d "$mount_point" ]; then
        echo "Mount Point $mount_point will be created."
	mkdir -p $mount_point
    fi

    # Mount the device
    mount $device_path $mount_point

    # Check if mount was successful
    if [ $? -ne 0 ]; then
        echo "Failed to mount $device_path at $mount_point"
        return 1
    fi

    # Copy the SSH key to the upload path
    cp $full_path $upload_full_path

    # Check if copy was successful
    if [ $? -ne 0 ]; then
        echo "Failed to copy $full_path to $upload_path"
        umount $mount_point
        return 1
    fi

    # Unmount the device
    umount $mount_point

    echo "SSH key successfully uploaded to $upload_path"
}

# Appends a private SSH key identifier to the SSH config file for a specified user. Creates the .ssh directory and config file if they don't exist
# ssh private identifier
# <user> <keyname>
sys_spi() {
    # TECHNICAL DETAILS:
    # Creates .ssh directory structure if missing
    # Adds IdentityFile entry to SSH config for specified key
    # Handles both root and regular user configurations
    # Sets proper ownership and permissions (600) for security
    # Avoids duplicate entries in config file
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    local user="$1"
    local keyname="$2"
    local ssh_dir
    local config_file
    local user_home

    if [ "$user" == "root" ]; then
        ssh_dir="/root/.ssh"
        user_home="/root"
    else
        ssh_dir="/home/$user/.ssh"
        user_home="/home/$user"
    fi

    config_file="$ssh_dir/config"

    # Create the .ssh directory if it doesn't exist
    mkdir -p $ssh_dir

    # Define the configuration line to add
    identity_file_line="    IdentityFile $user_home/.ssh/$keyname"

    # Check if the IdentityFile line already exists
    if ! grep -qx "$identity_file_line" "$config_file" 2>/dev/null; then
        # Append the configuration to the config file
        echo -e "\nHost *\n$identity_file_line" >> $config_file

        # Set the correct permissions
        chown $user:$user $config_file
        chmod 600 $config_file

        echo "SSH config file updated at $config_file"
    else
        echo "Configuration already exists in $config_file"
    fi
}

# Generates an SSH key pair and handles the transfer process
# ssh key swap
# <mode> <remote_address> <key_name> [encryption_type]
sys_sks() {
    # TECHNICAL DETAILS:
    # Client-side generation: sys_sks -c [-d] <server_address> <key_name> [encryption_type]
    # Server-side generation: sys_sks -s [-d] <client_address> <key_name> [encryption_type]
    # Supports rsa, dsa, ecdsa, ed25519 encryption types (default: ed25519)
    # Optional -d flag removes original key after successful transfer
    # Handles secure key transfer via SCP
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    local mode=""
    local deduplicate=false
    local remote_address=""
    local key_name=""
    local encryption_type="ed25519"  # Default to ed25519
    local ssh_dir="/root/.ssh"

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -c|-s) mode="$1" ;;
            -d) deduplicate=true ;;
            *)
                if [[ -z "$remote_address" ]]; then
                    remote_address="$1"
                elif [[ -z "$key_name" ]]; then
                    key_name="$1"
                else
                    encryption_type="$1"
                fi
                ;;
        esac
        shift
    done

    # Check if required arguments are provided
    if [[ -z "$mode" || -z "$remote_address" || -z "$key_name" ]]; then
        aux_use
        return 1
    fi

    # Function to generate SSH key
    generate_key() {
        local key_path="$1"
        case "$encryption_type" in
            rsa)
                ssh-keygen -t rsa -b 4096 -f "$key_path" -N ""
                ;;
            dsa)
                ssh-keygen -t dsa -f "$key_path" -N ""
                ;;
            ecdsa)
                ssh-keygen -t ecdsa -b 521 -f "$key_path" -N ""
                ;;
            ed25519|*)
                ssh-keygen -t ed25519 -f "$key_path" -N ""
                ;;
        esac
    }

    case "$mode" in
        -s) # Server-side generation
            mkdir -p "$ssh_dir"
            chmod 700 "$ssh_dir"
            generate_key "$ssh_dir/$key_name"
            if [ $? -ne 0 ]; then
                echo "Failed to generate SSH key pair."
                return 1
            fi
            echo "SSH key pair generated on server using $encryption_type encryption."
            echo "Transferring private key to client..."
            scp "$ssh_dir/$key_name" "${remote_address}:~/.ssh/"
            if [ $? -ne 0 ]; then
                echo "Failed to transfer private key to client."
                return 1
            fi
            echo "Private key transferred to client successfully."
            if $deduplicate; then
                rm "$ssh_dir/$key_name"
                echo "Private key removed from server (deduplication)."
            fi
            echo "Public key file: $ssh_dir/${key_name}.pub"
            ;;
        -c) # Client-side generation
            generate_key "$HOME/.ssh/$key_name"
            if [ $? -ne 0 ]; then
                echo "Failed to generate SSH key pair."
                return 1
            fi
            echo "SSH key pair generated on client using $encryption_type encryption."
            echo "Transferring public key to server..."
            scp "$HOME/.ssh/${key_name}.pub" "${remote_address}:/tmp/"
            if [ $? -ne 0 ]; then
                echo "Failed to transfer public key to server."
                return 1
            fi
            ssh "$remote_address" "mkdir -p $ssh_dir && mv /tmp/${key_name}.pub $ssh_dir/"
            if [ $? -ne 0 ]; then
                echo "Failed to move public key on server."
                return 1
            fi
            echo "Public key transferred to server and saved in $ssh_dir/${key_name}.pub"
            echo "Private key file on client: $HOME/.ssh/$key_name"

            if $deduplicate; then
                rm "$HOME/.ssh/${key_name}.pub"
                echo "Public key removed from client's .ssh folder (deduplication)."
            fi
            ;;
        *)
            echo "Invalid mode. Use -s for server-side or -c for client-side generation."
            return 1
            ;;
    esac
    echo "SSH key generation and transfer completed successfully."
}

# Appends the content of a specified public SSH key file to the authorized_keys file.
# ssh append key
# <mode> <remote_address> <key_name>
sys_sak() {
    # TECHNICAL DETAILS:
    # Client-side operation: sys_sak -c <server_address> <key_name>
    # Server-side operation: sys_sak -s <client_address> <key_name>
    # Appends public key to authorized_keys file safely
    # Sets proper permissions (600) on authorized_keys
    # Restarts SSH service after key addition
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 3 ]; then
        aux_use
        return 1
    fi
    
    local mode="$1"
    local remote_address="$2"
    local key_name="$3"
    local ssh_dir="/root/.ssh"
    local authorized_keys_path="$ssh_dir/authorized_keys"
    case "$mode" in
        -c) # Client-side operation
            local public_key_path="$HOME/.ssh/${key_name}.pub"
            # Check if the public key exists
            if [ ! -f "$public_key_path" ]; then
                echo "Error: Public key '$public_key_path' does not exist."
                return 1
            fi
            # Transfer and append the public key on the server
            ssh "$remote_address" "mkdir -p $ssh_dir && cat >> $authorized_keys_path" < "$public_key_path"
            if [ $? -ne 0 ]; then
                echo "Error: Failed to append public key to authorized_keys on the server."
                return 1
            fi
            echo "Public key appended to authorized_keys on the server."
            ;;
        -s) # Server-side operation
            local public_key_path="$ssh_dir/${key_name}.pub"
            # Check if the public key exists
            if [ ! -f "$public_key_path" ]; then
                echo "Error: Public key '$public_key_path' does not exist on the server."
                return 1
            fi
            # Append the public key to authorized_keys
            cat "$public_key_path" >> "$authorized_keys_path"
            if [ $? -ne 0 ]; then
                echo "Error: Failed to append public key to authorized_keys."
                return 1
            fi
            echo "Public key appended to authorized_keys on the server."
            ;;
        *)
            echo "Invalid mode. Use -c for client-side or -s for server-side operation."
            return 1
            ;;
    esac
    # Ensure correct permissions
    chmod 600 "$authorized_keys_path"
    # Restart SSH service
    echo "Restarting SSH service..."
    if systemctl restart sshd; then
        echo "SSH service restarted successfully."
    else
        echo "Error: Failed to restart SSH service. Please check the service manually."
        return 1
    fi
    echo "SSH key append operation completed successfully."
}

# Loops a specified SSH operation (bypass StrictHostKeyChecking or refresh known_hosts) through a range of IPs defined in the configuration
# loop operation ip
# <ip_array> <operation>
sys_loi() {
    # TECHNICAL DETAILS:
    # ip_array: hy,ct - IP array name from configuration
    # operation: bypass = Perform initial SSH login to bypass StrictHostKeyChecking
    # operation: refresh = Remove the SSH key for the given IP from known_hosts
    # Iterates through all IPs in specified array and performs operation
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    local ip_type=$1
    local operation=$2
    local ip_array_name="${ip_type^^}_IPS"

    # Ensure the array exists
    if ! declare -p "$ip_array_name" >/dev/null 2>&1; then
        echo "Invalid IP type: $ip_type"
        return 1
    fi

    # Get the associative array
    declare -n IP_ARRAY="$ip_array_name"

    for KEY in "${!IP_ARRAY[@]}"; do
        IP=${IP_ARRAY[$KEY]}

        if [ -n "$IP" ]; then
            if [ "$operation" == "bypass" ]; then
                echo "Performing SSH login to bypass StrictHostKeyChecking for $IP"
                ssh -o StrictHostKeyChecking=no root@"$IP" "exit"
                if [ $? -ne 0 ]; then
                    echo "Failed to SSH into $IP"
                fi
            elif [ "$operation" == "refresh" ]; then
                echo "Removing SSH key for $IP from known_hosts"
                ssh-keygen -R "$IP"
                if [ $? -ne 0 ]; then
                    echo "Failed to remove SSH key for $IP"
                fi
            else
                echo "Invalid operation: $operation"
                return 1
            fi
        else
            echo "IP is empty for key $KEY"
        fi
    done
}

# Resolves custom SSH aliases using the configuration file. Supports connecting to single or multiple servers, executing commands remotely
# ssh custom aliases
# <usershortcut> <servershortcut> <ssh_users_array_name> <all_ip_arrays_array_name> <array_aliases_array_name> [command]
sys_sca() {
    # TECHNICAL DETAILS:
    # Resolves user and server shortcuts from configuration arrays
    # Supports single server, multiple servers, or entire arrays
    # Can execute commands remotely on multiple servers
    # Uses nameref declarations for dynamic array access
    # Handles 'all' keyword for operations across all server arrays
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -lt 5 ]; then
        aux_use
        return 1
    fi
    
    echo "Debug: Number of arguments: $#"
    echo "Debug: All arguments: $*"

    local user_shortcut=$1
    local server_shortcuts=$2
    local ssh_users_array_name=$3
    local all_ip_arrays_name=$4
    local array_aliases_name=$5
    shift 5
    local command="$*"

    # Declare namerefs to the passed associative array names
    declare -n _ssh_users_ref="$ssh_users_array_name"
    declare -n _all_ip_arrays_ref="$all_ip_arrays_name"
    declare -n _array_aliases_ref="$array_aliases_name"

    echo "Debug: User shortcut: $user_shortcut"

    # Resolve user name from shortcut
    local user_name="${_ssh_users_ref[$user_shortcut]}"
    echo "Debug: Resolved user name: $user_name"

    if [[ -z $user_name ]]; then
        echo "Error: Unknown user shortcut '$user_shortcut'"
        echo "Debug: SSH _ USERS (passed name: $ssh_users_array_name) array contents: ${_ssh_users_ref[@]}"
        echo "Debug: SSH _ USERS (passed name: $ssh_users_array_name) keys: ${!_ssh_users_ref[@]}"
        return 1
    fi

    echo "Debug: Server shortcuts (raw): $server_shortcuts"
    echo "Debug: ALL_IP_ARRAYS (passed name: $all_ip_arrays_name): ${_all_ip_arrays_ref[*]}"

    # Function to handle an array of servers
    handle_server_array() {
        local array_name=$1
        declare -n server_array=$array_name # This correctly refers to an individual IP array by its name
        echo "Debug: Processing array: $array_name"
        echo "Debug: Array contents: ${!server_array[*]}"
        for server_shortcut in "${!server_array[@]}"; do
            local server_ip=${server_array[$server_shortcut]}
            echo "Debug: Resolved server IP for $server_shortcut: $server_ip"
            # Construct the SSH command
            local ssh_command="ssh ${user_name}@${server_ip}"
            if [[ -n $command ]]; then
                ssh_command+=" \"$command\""
            fi
            # Execute the SSH command
            echo "Executing: $ssh_command"
            eval $ssh_command
        done
    }

    # Function to normalize server shortcuts
    normalize_shortcut() {
        local input=$1
        local normalized=$input

        # Check if input matches any array name or alias (case-insensitive)
        for array in "${!_array_aliases_ref[@]}"; do
            local aliases=(${_array_aliases_ref[$array]})
            for alias in "${aliases[@]}"; do
                if [[ ${input,,} == ${alias,,} ]]; then
                    normalized=$array
                    echo "Debug: Match found, normalized '$input' to '$normalized'" >&2
                    break 2
                fi
            done
        done

        echo "Debug: Normalized '$input' to '$normalized'" >&2
        echo "$normalized"
    }

    # Function to find server IP
    find_server_ip() {
        local shortcut=$1
        local ip=""
        local array_name_found="" # Renamed to avoid conflict with outer scope 'array_name' if any
        for current_array_name in "${_all_ip_arrays_ref[@]}"; do # Iterate over names in _all_ip_arrays_ref
            echo "Debug: Searching for '$shortcut' in '$current_array_name'" >&2
            declare -n current_array_ref=$current_array_name # Nameref to the actual IP array
            echo "Debug: $current_array_name contents: ${!current_array_ref[*]}" >&2
            if [[ -n ${current_array_ref[$shortcut]} ]]; then
                ip=${current_array_ref[$shortcut]}
                array_name_found=$current_array_name
                echo "Debug: Found '$shortcut' in '$current_array_name'" >&2
                break
            fi
        done
        echo "Debug: Found IP for $shortcut: $ip (from $array_name_found)" >&2
        echo "$ip"
    }

    # Function to check if input is an array name
    is_array_name() {
        local input=$1
        echo "Debug: Checking if '$input' is an array name" >&2
        if [[ $input == "all" ]]; then
            echo "Debug: '$input' is 'all'" >&2
            return 0
        fi
        for array_iter_name in "${_all_ip_arrays_ref[@]}"; do # Iterate over names in _all_ip_arrays_ref
            if [[ $input == $array_iter_name ]]; then
                echo "Debug: '$input' matches array '$array_iter_name'" >&2
                return 0
            fi
        done
        echo "Debug: '$input' is not an array name" >&2
        return 1
    }

    # Normalize the server shortcuts
    local normalized_shortcuts=$(normalize_shortcut "$server_shortcuts")
    echo "Debug: Normalized server shortcuts: $normalized_shortcuts"

    # Handle server_shortcuts
    if is_array_name "$normalized_shortcuts"; then
        echo "Debug: Processing as array name"
        if [[ $normalized_shortcuts == "all" ]]; then
            echo "Debug: Processing all servers"
            for array_to_handle in "${_all_ip_arrays_ref[@]}"; do # Iterate over names in _all_ip_arrays_ref
                handle_server_array $array_to_handle
            done
        else
            echo "Debug: Processing specific IP array: $normalized_shortcuts"
            handle_server_array $normalized_shortcuts
        fi
    else
        echo "Debug: Processing as individual server(s)"
        IFS=',' read -ra servers <<< "$normalized_shortcuts"
        if [[ ${#servers[@]} -gt 1 && -z $command ]]; then
            echo "Error: No command provided for multiple servers"
            return 1
        fi
        for server_shortcut_iter in "${servers[@]}"; do
            local server_ip=$(find_server_ip "$server_shortcut_iter")
            if [[ -z $server_ip ]]; then
                echo "Error: Unknown server shortcut '$server_shortcut_iter'"
                return 1
            fi
            local ssh_command="ssh ${user_name}@${server_ip}"
            if [[ -n $command ]]; then
                ssh_command+=" \"$command\""
            fi
            echo "Executing: $ssh_command"
            eval $ssh_command
        done
    fi
    echo "Debug: Raw command: $command"
}

# An interactive Bash function that guides users through Git history navigation, offering options for reset type and subsequent actions, with built-in safeguards and explanations.
# git reset explorer
# (no parameters)
sys_gre() {
    # TECHNICAL DETAILS:
    # Interactive Git Reset Explorer with guided prompts
    # Offers soft, mixed, and hard reset options with explanations
    # Provides post-reset actions: keep state, create branch, force push, new commit
    # Includes safety prompts and status display
    # Educational tool for understanding git reset operations
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 0 ]; then
        aux_use
        return 1
    fi
    
    echo "Welcome to the Git Reset Explorer (sys-gre)!"
    echo "This function will guide you through the process of moving back in Git history."
    echo

    # Step 1: Determine how many commits to go back
    read -p "How many commits do you want to go back? " num_commits

    # Step 2: Determine the reset type
    echo
    echo "What type of reset do you want to perform?"
    echo "1. Soft (move HEAD but leave staging and working directory unchanged)"
    echo "2. Mixed (move HEAD and reset staging, but leave working directory unchanged)"
    echo "3. Hard (move HEAD, reset staging, and reset working directory)"
    read -p "Enter your choice (1/2/3): " reset_type

    # Construct the reset command
    case $reset_type in
        1) reset_cmd="git reset --soft HEAD~$num_commits" ;;
        2) reset_cmd="git reset HEAD~$num_commits" ;;
        3) reset_cmd="git reset --hard HEAD~$num_commits" ;;
        *) echo "Invalid choice. Exiting."; return 1 ;;
    esac

    # Execute the reset command
    echo
    echo "Executing: $reset_cmd"
    eval $reset_cmd

    # Step 3: Handle the new state
    echo
    echo "Reset complete. What would you like to do with this new state?"
    echo "1. Keep this state (do nothing further)"
    echo "2. Create a new branch at this point"
    echo "3. Force push this state to the remote (caution: rewrites history)"
    echo "4. Create a new commit with this state"
    read -p "Enter your choice (1/2/3/4): " state_choice

    case $state_choice in
        1)
            echo "Keeping the current state. No further action needed."
            ;;
        2)
            read -p "Enter the name for the new branch: " branch_name
            git checkout -b $branch_name
            echo "Created and switched to new branch: $branch_name"
            ;;
        3)
            read -p "Enter the name of the remote branch to force push to: " remote_branch
            git push -f origin HEAD:$remote_branch
            echo "Force pushed to $remote_branch. Remote history has been rewritten."
            ;;
        4)
            read -p "Enter a commit message: " commit_message
            git commit -m "$commit_message"
            echo "Created a new commit with the message: $commit_message"
            ;;
        *)
            echo "Invalid choice. No further action taken."
            ;;
    esac

    echo
    echo "Gen-gre process complete. Your repository is now in the following state:"
    git status
    echo
    echo "Current commit:"
    git log -1 --oneline
}

# Adds or updates a host entry in /etc/hosts. If IP or hostname is empty, logs an error and exits.
# add host entry
# <ip_address> <hostname>
sys_hos() {
    # TECHNICAL DETAILS:
    # Manages /etc/hosts file entries safely
    # Updates existing entries if hostname exists with different IP
    # Adds new entries if hostname doesn't exist
    # Uses temporary file for safe sed operations
    # Validates input parameters before processing
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local ip_address="$1"
    local hostname="$2"
    local hosts_file="/etc/hosts"

    # Check if the entry already exists with the same IP
    if grep -q -w "$hostname" "$hosts_file"; then
        # Hostname exists, check if IP needs update
        if grep -q -w "$ip_address\\s\\+$hostname" "$hosts_file"; then
            echo "INF: $function_name: Host entry for $hostname ($ip_address) already exists and is correct."
            return 0
        else
            # Hostname exists, but IP is different. Update the line.
            # Use a temporary file for sed to avoid issues with /etc/hosts
            local temp_file
            temp_file=$(mktemp)
            sed "s/.*\\s\\+$hostname$/$ip_address\\t$hostname/" "$hosts_file" > "$temp_file" && sudo cp "$temp_file" "$hosts_file"
            rm "$temp_file"
            echo "INF: $function_name: Updated host entry for $hostname to $ip_address."
            return 0
        fi
    else
        # Hostname does not exist, add new entry
        echo -e "$ip_address\\t$hostname" | sudo tee -a "$hosts_file" > /dev/null
        echo "INF: $function_name: Added host entry for $hostname ($ip_address)."
        return 0
    fi
}
