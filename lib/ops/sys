#!/bin/bash

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Shows a summary of specific functions in the script, displaying their usage, shortname, and description
# overview functions
# [function_name_filter]
sys_fun() {
    # Technical Description:
    #   Analyzes function definitions within script files and displays comprehensive overview
    #   Supports optional filtering by function name patterns for targeted analysis
    #   Extracts function metadata including usage patterns, shortnames, and descriptions
    #   Processes function documentation and presents it in a structured format
    # Dependencies:
    #   - ana_laf function for function analysis and formatting
    #   - aux_tec function for technical details display
    #   - FILEPATH_gen variable for target file path
    #   - Read permissions on source files
    # Arguments:
    #   $1: [function_name_filter] - optional pattern to filter functions by name
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    # Optional parameters - no validation needed
    aux_dbg "Listing functions with filter: ${1:-none}"
    # Pass all arguments to processing function
    ana_laf "$FILEPATH_sys" "$@"
}

# Displays an overview of specific variables defined in the configuration file, showing their names, values, and usage across different files
# overview variables
# -x (execute)
sys_var() {
    # Technical Description:
    #   Scans configuration files and extracts variable definitions using auxiliary functions
    #   Displays variable usage patterns across different files and contexts
    #   Analyzes configuration structure and provides comprehensive overview of variable usage
    #   Operates on default configuration files within the project directory structure
    # Dependencies:
    #   - ana_acu function for configuration analysis
    #   - CONFIG_gen variable for configuration file path
    #   - DIR_FUN variable for directory navigation
    #   - Read permissions on configuration files
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Debug logging for development insights
    aux_dbg "Analyzing configuration variables in $CONFIG_sys"
    
    ana_acu -o "$CONFIG_sys" "$DIR_FUN/.."
}

# Manages git operations, ensuring the local repository syncs with the remote.
# git sync operations
# [--dir <path>] [--branch <name>] [--auto|--safe|--force|--dry-run] [--ai-commit] [commit_message]
sys_gio() {
    # Technical Description:
    #   Advanced parameterized git synchronization workflow with intelligent repository detection
    #   Auto-detects git repository location (current directory first, then fallback paths)
    #   Handles all file states: tracked changes, untracked files, and staged content
    #   Supports multiple sync strategies with comprehensive conflict resolution
    #   Includes pattern-based commit message templates and AI integration capabilities
    #   Completely parameterized - no dependency on legacy environment variables
    # Dependencies:
    #   - git command line tool with full functionality
    #   - Write permissions for git operations and directory access
    #   - Network connectivity for remote operations
    # Arguments:
    #   --dir <path>     : Target git repository directory (auto-detected if not specified)
    #   --branch <name>  : Git branch to sync with (defaults to current branch or 'master')
    #   --auto           : Intelligent sync with conflict detection (default)
    #   --safe           : Safe mode - create backup branch before operations
    #   --force          : Force sync - override conflicts with remote state
    #   --dry-run        : Preview operations without executing
    #   --ai-commit      : Generate AI-powered commit messages
    #   [commit_message] : Optional commit message or template pattern

    local USAGE="Usage: sys_gio [--dir <path>] [--branch <name>] [--auto|--safe|--force|--dry-run] [--ai-commit] [commit_message]"
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "$USAGE"
        echo ""
        echo "Directory Options:"
        echo "  --dir <path>    Target git repository (auto-detected if omitted)"
        echo ""
        echo "Branch Options:"
        echo "  --branch <name> Target branch (defaults to current branch or 'master')"
        echo ""
        echo "Sync Mode Options:"
        echo "  --auto          Intelligent sync with conflict detection (default)"
        echo "  --safe          Safe mode - create backup branch before operations"
        echo "  --force         Force sync - override conflicts with remote state"
        echo "  --dry-run       Preview operations without executing"
        echo ""
        echo "Commit Options:"
        echo "  --ai-commit     Generate AI-powered commit messages"
        echo ""
        echo "Commit Message Templates:"
        echo "  :fix            'fix: [AI generated description]'"
        echo "  :feat           'feat: [AI generated description]'"
        echo "  :docs           'docs: [AI generated description]'"
        echo "  :refactor       'refactor: [AI generated description]'"
        echo "  :chore          'chore: [AI generated description]'"
        echo "  :auto           Smart commit type detection based on changes"
        echo ""
        echo "Examples:"
        echo "  sys_gio                                    # Auto-detect repo, sync current branch"
        echo "  sys_gio --dir /path/to/repo               # Sync specific repository"
        echo "  sys_gio --branch develop                  # Sync specific branch"
        echo "  sys_gio --safe :fix                       # Safe mode with fix template"
        echo "  sys_gio --ai-commit 'custom message'      # AI-enhanced custom message"
        echo "  sys_gio --dry-run                         # Preview operations only"
        return 0
    fi
    
    # Parse parameters
    local target_dir=""
    local branch=""
    local sync_mode="auto"
    local ai_commit_enabled=false
    local dry_run=false
    local commit_message=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dir)
                if [[ -z "$2" ]]; then
                    aux_err "Missing argument for --dir option"
                    return 1
                fi
                target_dir="$2"
                shift 2
                ;;
            --branch)
                if [[ -z "$2" ]]; then
                    aux_err "Missing argument for --branch option"
                    return 1
                fi
                branch="$2"
                shift 2
                ;;
            --auto) sync_mode="auto"; shift ;;
            --safe) sync_mode="safe"; shift ;;
            --force) sync_mode="force"; shift ;;
            --dry-run) dry_run=true; shift ;;
            --ai-commit) ai_commit_enabled=true; shift ;;
            -*) aux_err "Unknown option: $1"; return 1 ;;
            *) commit_message="$*"; break ;;
        esac
    done
    
    # Smart directory detection
    local working_dir
    local original_dir=$(pwd)
    
    if [[ -n "$target_dir" ]]; then
        # Use specified directory
        working_dir="$target_dir"
        if ! aux_chk "dir_exists" "$working_dir"; then
            aux_err "Specified directory not found: $working_dir"
            return 2
        fi
    else
        # Auto-detect git repository
        working_dir="$original_dir"
        
        # Check if current directory is a git repo
        if ! git rev-parse --git-dir >/dev/null 2>&1; then
            # Fallback: check if we're in a subdirectory of a git repo
            local temp_dir="$original_dir"
            local found_repo=false
            
            while [[ "$temp_dir" != "/" ]]; do
                if [[ -d "$temp_dir/.git" ]]; then
                    working_dir="$temp_dir"
                    found_repo=true
                    break
                fi
                temp_dir=$(dirname "$temp_dir")
            done
            
            if ! $found_repo; then
                aux_err "No git repository found in current directory or parent directories"
                aux_info "Use --dir option to specify a git repository path"
                return 2
            fi
        fi
    fi
    
    # Enhanced dependency check
    if ! aux_chk "command" "git"; then
        aux_err "git command not found - required for repository operations"
        return 127
    fi
    
    # Navigate to working directory
    if ! cd "$working_dir" 2>/dev/null; then
        aux_err "Failed to change directory to: $working_dir"
        return 1
    fi
    
    # Verify we're in a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        aux_err "Not in a git repository: $working_dir"
        cd "$original_dir" 2>/dev/null
        return 2
    fi
    
    # Smart branch detection
    if [[ -z "$branch" ]]; then
        # Try to get current branch
        branch=$(git branch --show-current 2>/dev/null)
        if [[ -z "$branch" ]]; then
            # Fallback to default branch or master
            branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "master")
        fi
    fi
    
    local backup_branch="backup-$(date +%Y%m%d-%H%M%S)"
    
    aux_info "Starting intelligent git synchronization" "dir=$working_dir,mode=$sync_mode,branch=$branch,ai=$ai_commit_enabled"
    
    # Smart fetch with enhanced error handling
    aux_info "Fetching updates from remote..."
    if ! aux_cmd "git" "fetch" "origin" "$branch" "--prune"; then
        # Try to fetch all branches if specific branch fails
        if ! aux_cmd "git" "fetch" "origin" "--prune"; then
            aux_warn "Failed to fetch from remote - continuing with local operations only"
        else
            aux_info "Fetched all branches successfully"
        fi
    fi
    
    # Comprehensive repository state analysis
    local status_output changes_count ahead_count behind_count untracked_count modified_count staged_count
    status_output=$(git status --porcelain 2>/dev/null)
    
    # Enhanced change counting
    if [[ -n "$status_output" ]]; then
        changes_count=$(echo "$status_output" | wc -l)
        untracked_count=$(echo "$status_output" | grep -c "^??" 2>/dev/null | tr -d '\n' || echo "0")
        modified_count=$(echo "$status_output" | grep -c "^ M\|^MM\|^ T" 2>/dev/null | tr -d '\n' || echo "0")
        staged_count=$(echo "$status_output" | grep -c "^M \|^A \|^D \|^R \|^C " 2>/dev/null | tr -d '\n' || echo "0")
    else
        changes_count=0
        untracked_count=0
        modified_count=0
        staged_count=0
    fi
    
    # Calculate ahead/behind counts with error handling
    ahead_count=$(git rev-list origin/"$branch"..HEAD --count 2>/dev/null || echo "0")
    behind_count=$(git rev-list HEAD..origin/"$branch" --count 2>/dev/null || echo "0")
    
    aux_info "Repository analysis" "total_changes=$changes_count,untracked=$untracked_count,modified=$modified_count,staged=$staged_count,ahead=$ahead_count,behind=$behind_count"
    
    # Handle clean repository case
    if [[ "$changes_count" -eq 0 && "$behind_count" == "0" && "$ahead_count" == "0" ]]; then
        aux_info "Repository is clean and up-to-date"
        cd "$original_dir" 2>/dev/null
        return 0
    fi
    
    # Create safety backup in safe mode
    if [[ "$sync_mode" == "safe" && "$changes_count" -gt 0 ]]; then
        aux_info "Creating safety backup branch: $backup_branch"
        if $dry_run; then
            aux_info "[DRY-RUN] Would create backup branch: $backup_branch"
        else
            git branch "$backup_branch" 2>/dev/null || aux_warn "Failed to create backup branch"
        fi
    fi
    
    # Enhanced local changes handling
    if [[ "$changes_count" -gt 0 ]]; then
        aux_info "Processing local changes..." "untracked=$untracked_count,modified=$modified_count,staged=$staged_count"
        
        # Show what will be staged
        if [[ "$untracked_count" -gt 0 ]]; then
            aux_info "Found $untracked_count untracked files - will be staged"
        fi
        if [[ "$modified_count" -gt 0 ]]; then
            aux_info "Found $modified_count modified files - will be staged"
        fi
        if [[ "$staged_count" -gt 0 ]]; then
            aux_info "Found $staged_count already staged files"
        fi
        
        # Generate intelligent commit message
        local final_commit_message
        if [[ -n "$commit_message" ]]; then
            final_commit_message=$(sys_gio_generate_commit_message "$commit_message" "$ai_commit_enabled" "$status_output")
        elif $ai_commit_enabled; then
            final_commit_message=$(sys_gio_generate_commit_message ":auto" "$ai_commit_enabled" "$status_output")
        else
            final_commit_message="chore: automated sync $(date +%Y-%m-%d)"
        fi
        
        aux_info "Generated commit message: $final_commit_message"
        
        if $dry_run; then
            aux_info "[DRY-RUN] Would stage all changes and commit with message: $final_commit_message"
        else
            # Stage ALL changes (tracked, modified, and untracked)
            aux_info "Staging all changes..."
            if ! aux_cmd "git" "add" "."; then
                aux_err "Failed to stage changes"
                cd "$original_dir" 2>/dev/null
                return 1
            fi
            
            # Commit the staged changes
            if ! aux_cmd "git" "commit" "-m" "$final_commit_message"; then
                aux_err "Failed to commit changes"
                cd "$original_dir" 2>/dev/null
                return 1
            fi
            
            aux_info "Successfully committed changes" "files_committed=$changes_count"
        fi
    fi
    
    # Handle synchronization with remote
    if [[ "$behind_count" -gt 0 ]]; then
        aux_info "Syncing with remote changes..." "behind_count=$behind_count"
        
        case "$sync_mode" in
            "force")
                if $dry_run; then
                    aux_info "[DRY-RUN] Would force reset to origin/$branch"
                else
                    if ! aux_cmd "git" "reset" "--hard" "origin/$branch"; then
                        aux_err "Failed to force sync with remote"
                        cd "$original_dir" 2>/dev/null
                        return 1
                    fi
                    aux_info "Force synced with remote branch"
                fi
                ;;
            "safe")
                if $dry_run; then
                    aux_info "[DRY-RUN] Would attempt safe merge with origin/$branch"
                else
                    if ! aux_cmd "git" "merge" "origin/$branch" "--no-edit"; then
                        aux_warn "Merge conflicts detected - manual resolution required"
                        aux_info "Use 'git status' to see conflicts, resolve them, then 'git commit'"
                        cd "$original_dir" 2>/dev/null
                        return 3
                    fi
                    aux_info "Successfully merged remote changes"
                fi
                ;;
            *)
                if $dry_run; then
                    aux_info "[DRY-RUN] Would pull changes from origin/$branch"
                else
                    if ! aux_cmd "git" "pull" "origin" "$branch" "--no-edit"; then
                        aux_warn "Pull failed - checking for conflicts"
                        if git ls-files -u | grep -q .; then
                            aux_err "Merge conflicts detected - run with --safe or --force, or resolve manually"
                            cd "$original_dir" 2>/dev/null
                            return 3
                        fi
                        aux_err "Failed to pull changes"
                        cd "$original_dir" 2>/dev/null
                        return 1
                    fi
                    aux_info "Successfully pulled remote changes"
                fi
                ;;
        esac
    fi
    
    # Push local changes to remote
    local current_ahead_count
    current_ahead_count=$(git rev-list origin/"$branch"..HEAD --count 2>/dev/null || echo "0")
    
    if [[ "$current_ahead_count" -gt 0 ]]; then
        aux_info "Pushing local changes to remote..." "commits_to_push=$current_ahead_count"
        if $dry_run; then
            aux_info "[DRY-RUN] Would push $current_ahead_count commits to origin/$branch"
        else
            if ! aux_cmd "git" "push" "origin" "$branch"; then
                aux_err "Failed to push changes to remote"
                cd "$original_dir" 2>/dev/null
                return 1
            fi
            aux_info "Successfully pushed $current_ahead_count commits to origin/$branch"
        fi
    fi
    
    # Cleanup and final status
    if [[ "$sync_mode" == "safe" && -n "$backup_branch" ]] && ! $dry_run; then
        # Clean up backup branch if everything succeeded
        git branch -d "$backup_branch" 2>/dev/null || aux_warn "Could not clean up backup branch: $backup_branch"
    fi
    
    aux_info "Git synchronization completed successfully" "mode=$sync_mode,branch=$branch,directory=$working_dir"
    
    # Return to original directory
    if ! cd "$original_dir" 2>/dev/null; then
        aux_warn "Failed to return to original directory: $original_dir"
    fi
}

sys_gio_generate_commit_message() {
    # Helper function to generate intelligent commit messages based on templates and AI
    # Arguments:
    #   $1: template or message - commit message template or pattern
    #   $2: ai_enabled - boolean flag for AI generation
    #   $3: status_output - git status output for analysis
    
    local template="$1"
    local ai_enabled="$2"
    local status_output="$3"
    
    # Handle template patterns
    case "$template" in
        ":fix"|":bugfix")
            if $ai_enabled && command -v sys_ai_commit >/dev/null 2>&1; then
                sys_ai_commit "fix" "$status_output" 2>/dev/null || echo "fix: resolve issues and improve stability"
            else
                echo "fix: resolve issues and improve stability"
            fi
            ;;
        ":feat"|":feature")
            if $ai_enabled && command -v sys_ai_commit >/dev/null 2>&1; then
                sys_ai_commit "feat" "$status_output" 2>/dev/null || echo "feat: add new functionality"
            else
                echo "feat: add new functionality"
            fi
            ;;
        ":docs"|":documentation")
            if $ai_enabled && command -v sys_ai_commit >/dev/null 2>&1; then
                sys_ai_commit "docs" "$status_output" 2>/dev/null || echo "docs: update documentation"
            else
                echo "docs: update documentation"
            fi
            ;;
        ":refactor"|":refactoring")
            if $ai_enabled && command -v sys_ai_commit >/dev/null 2>&1; then
                sys_ai_commit "refactor" "$status_output" 2>/dev/null || echo "refactor: improve code structure"
            else
                echo "refactor: improve code structure"
            fi
            ;;
        ":chore"|":maintenance")
            if $ai_enabled && command -v sys_ai_commit >/dev/null 2>&1; then
                sys_ai_commit "chore" "$status_output" 2>/dev/null || echo "chore: maintain and update"
            else
                echo "chore: maintain and update"
            fi
            ;;
        ":auto"|":smart")
            if $ai_enabled && command -v sys_ai_commit >/dev/null 2>&1; then
                # Analyze changes to determine type
                local change_type="chore"
                if echo "$status_output" | grep -q '\.md$\|README\|docs/'; then
                    change_type="docs"
                elif echo "$status_output" | grep -q 'test\|spec'; then
                    change_type="test"
                elif echo "$status_output" | grep -q 'fix\|bug\|error'; then
                    change_type="fix"
                elif echo "$status_output" | grep -q 'new\|add\|create'; then
                    change_type="feat"
                fi
                sys_ai_commit "$change_type" "$status_output" 2>/dev/null || echo "$change_type: automated intelligent commit"
            else
                echo "chore: automated intelligent sync $(date +%H:%M)"
            fi
            ;;
        "")
            echo "chore: automated sync $(date +%Y-%m-%d)"
            ;;
        *)
            # Use the message as-is if it doesn't match a template
            echo "$template"
            ;;
    esac
}

# Detects the system's package manager
# detect package manager
# -x (execute)
sys_dpa() {
    # Technical Description:
    #   Scans system for available package managers using command availability checks
    #   Tests for presence of common package managers: apt, dnf, yum, zypper in priority order
    #   Returns detected package manager name for use by other package management functions
    #   Provides fallback 'unknown' result when no supported package manager found
    # Dependencies:
    #   - command utility for testing command availability
    #   - Standard package managers: apt, dnf, yum, or zypper installed on system
    #   - No special permissions required beyond command execution
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local pman="unknown"

    aux_dbg "Detecting system package manager"

    if aux_chk "command" "apt"; then
        pman="apt"
    elif aux_chk "command" "dnf"; then
        pman="dnf"
    elif aux_chk "command" "yum"; then
        pman="yum"
    elif aux_chk "command" "zypper"; then
        pman="zypper"
    fi

    aux_dbg "Detected package manager: $pman"
    echo "$pman"
}

# Updates and upgrades system packages using the detected package manager
# update packages system
# -x (execute)
sys_upa() {
    # Technical Description:
    #   Performs comprehensive system package update and upgrade operations
    #   Uses sys_dpa to automatically detect the appropriate package manager
    #   Executes both refresh (update) and upgrade operations in sequence
    #   Supports apt, dnf, yum, and zypper package managers with appropriate commands
    #   Provides detailed feedback on operation success or failure with specific error messages
    # Dependencies:
    #   - sys_dpa function for package manager detection
    #   - Detected package manager (apt, dnf, yum, or zypper) installed and functional
    #   - Root or sudo privileges for package management operations
    #   - Network connectivity for downloading package updates
    #   - aux_log function for status reporting
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"

    # Get package manager using sys_dpa
    local pman
    pman=$(sys_dpa -x)

    if [ "$pman" = "unknown" ]; then
        aux_err "Could not detect a supported package manager"
        return 1
    fi

    aux_info "Starting system package update and upgrade" "package_manager=$pman"
    
    # Define commands based on package manager
    case "$pman" in
        apt)
            if aux_cmd "apt" "update" "-y" && aux_cmd "apt" "upgrade" "-y"; then
                aux_info "System update and upgrade completed successfully" "package_manager=$pman"
                return 0
            else
                aux_err "Failed to update and upgrade system" "package_manager=$pman"
                return 1
            fi
            ;;
        dnf|yum)
            if aux_cmd "$pman" "update" "-y" && aux_cmd "$pman" "upgrade" "-y"; then
                aux_info "System update and upgrade completed successfully" "package_manager=$pman"
                return 0
            else
                aux_err "Failed to update and upgrade system" "package_manager=$pman"
                return 1
            fi
            ;;
        zypper)
            if aux_cmd "zypper" "refresh" "-y" && aux_cmd "zypper" "update" "-y"; then
                aux_info "System update and upgrade completed successfully" "package_manager=$pman"
                return 0
            else
                aux_err "Failed to update and upgrade system" "package_manager=$pman"
                return 1
            fi
            ;;
        *)
            aux_err "Unsupported package manager: $pman"
            return 1
            ;;
    esac
}

# Installs specified packages using the system's package manager
# install packages system
# <pak1> <pak2> ...
sys_ipa() {
    # Technical Description:
    #   Intelligently installs system packages using detected package manager
    #   Filters out already installed packages to avoid redundant operations
    #   Supports installation of multiple packages in a single operation
    #   Handles different package managers with appropriate installation commands
    #   Provides comprehensive feedback on installation status and results
    # Dependencies:
    #   - sys_dpa function for package manager detection
    #   - Package manager utilities: dpkg (apt), rpm (dnf/yum/zypper)
    #   - Root or sudo privileges for package installation
    #   - Network connectivity for downloading packages
    #   - aux_log function for status reporting
    # Arguments:
    #   $1, $2, ...: package_name - names of packages to install from system repositories
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -lt 1 ]; then
        aux_use
        return 1
    fi
    
    # Validate input parameters
    for package in "$@"; do
        if ! aux_val "$package" "not_empty"; then
            aux_err "Package name cannot be empty: $package"
            aux_use
            return 1
        fi
    done
    
    local function_name="${FUNCNAME[0]}"

    # Get package manager using sys_dpa
    local pman
    pman=$(sys_dpa -x)
    if [ "$pman" = "unknown" ]; then
        aux_err "Could not detect a supported package manager"
        return 1
    fi

    aux_info "Starting package installation" "package_manager=$pman,packages=$*"
    aux_dbg "Filtering already installed packages"

    # Filter out already installed packages using improved validation
    local packages_to_install=()
    aux_dbg "Checking installation status for ${#@} packages"
    
    for package in "$@"; do
        local is_installed=false
        case "$pman" in
            apt)
                if aux_cmd "dpkg" "-l" "$package" >/dev/null 2>&1; then
                    is_installed=true
                fi
                ;;
            dnf|yum|zypper)
                if aux_cmd "rpm" "-q" "$package" >/dev/null 2>&1; then
                    is_installed=true
                fi
                ;;
        esac
        
        if [[ "$is_installed" == "true" ]]; then
            aux_dbg "Package already installed: $package"
        else
            packages_to_install+=("$package")
            aux_dbg "Package needs installation: $package"
        fi
    done

    # If no packages need installation, exit successfully
    if [[ ${#packages_to_install[@]} -eq 0 ]]; then
        aux_info "All packages are already installed"
        return 0
    fi

    local package_list
    printf -v package_list '%s,' "${packages_to_install[@]}"
    package_list="${package_list%,}"  # Remove trailing comma
    aux_info "Installing packages" "count=${#packages_to_install[@]},packages=$package_list"

    # Install filtered packages with improved error handling
    case "$pman" in
        apt)
            if aux_cmd "apt" "install" "-y" "${packages_to_install[@]}"; then
                aux_info "Successfully installed packages" "packages=$package_list"
                return 0
            else
                aux_err "Failed to install packages" "packages=$package_list"
                return 1
            fi
            ;;
        dnf|yum)
            if aux_cmd "$pman" "install" "-y" "${packages_to_install[@]}"; then
                aux_info "Successfully installed packages" "packages=$package_list"
                return 0
            else
                aux_err "Failed to install packages" "packages=$package_list"
                return 1
            fi
            ;;
        zypper)
            if aux_cmd "zypper" "install" "-y" "${packages_to_install[@]}"; then
                aux_info "Successfully installed packages" "packages=$package_list"
                return 0
            else
                aux_err "Failed to install packages" "packages=$package_list"
                return 1
            fi
            ;;
        *)
            aux_err "Unsupported package manager: $pman"
            return 1
            ;;
    esac
}

# Configures git globally with a specified username and email, essential for proper commit attribution
# git set config
# <username> <usermail>
sys_gst() {
    # Technical Description:
    #   Configures global git user identity settings for proper commit attribution
    #   Sets both user.name and user.email in the global git configuration
    #   Essential prerequisite for git operations requiring user identification
    #   Configuration persists across all git repositories for the current user
    #   Validates successful configuration and provides execution feedback
    # Dependencies:
    #   - git command line tool with configuration capabilities
    #   - Write permissions for git global configuration file (~/.gitconfig)
    #   - aux_log function for status notification
    # Arguments:
    #   $1: username - git user name for commit attribution (spaces allowed)
    #   $2: usermail - git user email address for commit identification
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    # Validate input parameters
    if ! aux_val "$1" "not_empty"; then
        aux_err "Username cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$2" "not_empty"; then
        aux_err "Email cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency check
    if ! aux_chk "command" "git"; then
        aux_err "git command not found - required for configuration"
        return 127
    fi
    
    local function_name="${FUNCNAME[0]}"
    local username="$1"
    local usermail="$2"

    aux_info "Configuring global git user identity" "username=$username,email=$usermail"

    if aux_cmd "git" "config" "--global" "user.name" "$username" && aux_cmd "git" "config" "--global" "user.email" "$usermail"; then
        aux_info "Git configuration completed successfully" "username=$username,email=$usermail"
    else
        aux_err "Failed to configure git user identity" "username=$username,email=$usermail"
        return 1
    fi
}

# Installs, enables, and starts the sysstat service for system performance monitoring. Modifies the configuration to ensure it's enabled
# setup sysstat service
# -x (execute)
sys_sst() {
    # Technical Description:
    #   Comprehensive setup of sysstat service for system performance monitoring
    #   Installs sysstat package using system package manager
    #   Modifies /etc/default/sysstat configuration to enable data collection
    #   Enables and starts the systemd service for automatic startup and immediate operation
    #   Essential for system performance data collection and historical analysis
    # Dependencies:
    #   - sys_ipa function for package installation
    #   - systemctl command for service management
    #   - sed command for configuration file modification
    #   - Root or sudo privileges for system service and configuration changes
    #   - Write permissions for /etc/default/sysstat file
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "systemctl"; then
        aux_err "systemctl command not found - required for service management"
        return 127
    fi
    
    if ! aux_chk "command" "sed"; then
        aux_err "sed command not found - required for configuration modification"
        return 127
    fi
    
    aux_info "Setting up sysstat service for system monitoring"
    
    # Step 1: Install sysstat
    aux_info "Installing sysstat package"
    if ! sys_ipa sysstat; then
        aux_err "Failed to install sysstat package"
        return 1
    fi

    # Step 2: Enable sysstat
    aux_info "Enabling sysstat data collection"
    if ! aux_cmd "sed" "-i" "s/ENABLED=\"false\"/ENABLED=\"true\"/" "/etc/default/sysstat"; then
        aux_err "Failed to modify sysstat configuration"
        return 1
    fi

    # Step 3: Start the sysstat service
    aux_info "Enabling and starting sysstat service"
    if aux_cmd "systemctl" "enable" "sysstat" && aux_cmd "systemctl" "start" "sysstat"; then
        aux_info "sysstat service setup completed successfully"
    else
        aux_err "Failed to enable or start sysstat service"
        return 1
    fi
}

# Creates a new user with a specified username and password, prompting for input if not provided. Verifies successful user creation
# user setup
# <username> <password>
sys_ust() {
    # Technical Description:
    #   Creates new system user account with home directory and specified credentials
    #   Uses useradd command for user creation with automatic home directory creation
    #   Sets user password securely using chpasswd for encrypted password storage
    #   Validates successful user creation using id command verification
    #   Provides interactive prompts and comprehensive error handling
    # Dependencies:
    #   - useradd command for user account creation
    #   - chpasswd command for secure password setting
    #   - id command for user existence verification
    #   - aux_log function for status notification
    #   - Root or sudo privileges for user management operations
    # Arguments:
    #   $1: username - desired username for the new system account
    #   $2: password - initial password for the new user account
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    # Validate input parameters
    if ! aux_val "$1" "not_empty"; then
        aux_err "Username cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$2" "not_empty"; then
        aux_err "Password cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "useradd"; then
        aux_err "useradd command not found - required for user creation"
        return 127
    fi
    
    if ! aux_chk "command" "chpasswd"; then
        aux_err "chpasswd command not found - required for password setting"
        return 127
    fi
    
    if ! aux_chk "command" "id"; then
        aux_err "id command not found - required for user verification"
        return 127
    fi
    
    local function_name="${FUNCNAME[0]}"
    local username="$1"
    local password="$2"

    aux_info "Creating new user account" "username=$username"

    # Create the user
    if ! aux_cmd "useradd" "-m" "$username"; then
        aux_err "Failed to create user account" "username=$username"
        return 1
    fi
    
    if ! echo "$username:$password" | aux_cmd "chpasswd"; then
        aux_err "Failed to set user password" "username=$username"
        return 1
    fi

    # Verify user creation was successful using aux_chk
    if aux_chk "command" "id" && id -u "$username" > /dev/null 2>&1; then
        aux_info "User created successfully" "username=$username"
        aux_dbg "User verification completed: $(id "$username")"
    else
        aux_err "Failed to create user or verify creation" "username=$username"
        return 1
    fi
}

# Enables and starts a specified systemd service. Checks if the service is active and prompts for continuation if it's not
# systemd setup service
# <service>
sys_sdc() {
    # Technical Description:
    #   Comprehensive systemd service management with enable, start, and verification operations
    #   Enables service for automatic startup on system boot using systemctl enable
    #   Starts service immediately for current session using systemctl start
    #   Verifies service activation status and provides interactive continuation options
    #   Handles service activation failures gracefully with user choice prompts
    # Dependencies:
    #   - systemctl command for systemd service management
    #   - systemctl is-active command for service status verification
    #   - aux_tec and aux_use functions for help and usage display
    #   - aux_log function for status notification
    #   - Root or sudo privileges for service management operations
    # Arguments:
    #   $1: service - name of the systemd service to enable and start
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    # Validate input parameter
    if ! aux_val "$1" "not_empty"; then
        aux_err "Service name cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency check
    if ! aux_chk "command" "systemctl"; then
        aux_err "systemctl command not found - required for service management"
        return 127
    fi
    
    local function_name="${FUNCNAME[0]}"
    local service="$1"

    aux_info "Enabling and starting systemd service" "service=$service"

    # Enable and start service
    if aux_cmd "systemctl" "enable" "$service" && aux_cmd "systemctl" "start" "$service"; then
        aux_info "Service operations completed" "service=$service"
    else
        aux_err "Failed to enable or start service" "service=$service"
        return 1
    fi

    # Check if service is active using aux utilities
    aux_dbg "Verifying service status" "service=$service"
    if aux_cmd "systemctl" "is-active" "--quiet" "$service"; then
        aux_info "Service is active and running" "service=$service"
    else
        aux_warn "Service is not active after start attempt" "service=$service"
        local choice=$(aux_ask "$service is not active. Do you want to continue anyway?" "no")
        
        # Validate user input
        if ! aux_val "$choice" "not_empty"; then
            aux_err "Invalid input received"
            return 1
        fi
        
        case "${choice,,}" in  # Convert to lowercase
            "yes"|"y")
                aux_warn "Service is not active but continuing" "service=$service,user_choice=$choice"
                ;;
            *)
                aux_err "Service is not active, exiting" "service=$service,user_choice=$choice"
                return 1
                ;;
        esac
    fi
}

# An interactive Bash function that guides users through Git history navigation, offering options for reset type and subsequent actions, with built-in safeguards and explanations.
# git reset explorer
# -x (execute)
sys_gre() {
    # Technical Description:
    #   Interactive Git Reset Explorer providing guided workflow for git history manipulation
    #   Offers comprehensive reset options: soft, mixed, and hard with detailed explanations
    #   Provides post-reset action choices: keep state, create branch, force push, or new commit
    #   Includes safety prompts and educational information for understanding git reset operations
    #   Features status display and commit information for complete workflow transparency
    # Dependencies:
    #   - git command line tool with full reset, branch, and status capabilities
    #   - git log command for commit history display
    #   - Interactive shell environment for user input prompts
    #   - Working git repository with commit history
    #   - Network connectivity for push operations (if selected)
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "git"; then
        aux_err "git command not found - required for repository operations"
        return 127
    fi
    
    aux_info "Starting Git Reset Explorer"
    
    aux_info "Welcome to the Git Reset Explorer (sys-gre)!"
    aux_info "This function will guide you through the process of moving back in Git history."

    # Step 1: Determine how many commits to go back
    local num_commits=$(aux_ask "How many commits do you want to go back?" "1" "numeric")
    aux_dbg "User selected commits to go back: $num_commits"

    # Step 2: Determine the reset type with validation
    aux_info "Reset type options:"
    aux_info "1. Soft (move HEAD but leave staging and working directory unchanged)"
    aux_info "2. Mixed (move HEAD and reset staging, but leave working directory unchanged)"
    aux_info "3. Hard (move HEAD, reset staging, and reset working directory)"
    local reset_type=$(aux_ask "Enter your choice (1/2/3)" "2")
    
    # Validate reset type choice
    if ! aux_val "$reset_type" "regex" "^[123]$"; then
        aux_err "Invalid reset type choice: $reset_type"
        return 1
    fi

    # Construct the reset command
    local reset_cmd
    case $reset_type in
        1) reset_cmd="git reset --soft HEAD~$num_commits" ;;
        2) reset_cmd="git reset HEAD~$num_commits" ;;
        3) reset_cmd="git reset --hard HEAD~$num_commits" ;;
        *) 
            aux_err "Invalid choice: $reset_type"
            return 1 
            ;;
    esac

    # Execute the reset command
    aux_info "Executing git reset" "command=$reset_cmd"
    if ! aux_cmd "bash" "-c" "$reset_cmd"; then
        aux_err "Failed to execute git reset" "command=$reset_cmd"
        return 1
    fi

    # Step 3: Handle the new state
    aux_info "Reset complete. Post-reset action options:"
    aux_info "1. Keep this state (do nothing further)"
    aux_info "2. Create a new branch at this point"
    aux_info "3. Force push this state to the remote (caution: rewrites history)"
    aux_info "4. Create a new commit with this state"
    local state_choice=$(aux_ask "Enter your choice (1/2/3/4)" "1")
    
    # Validate state choice
    if ! aux_val "$state_choice" "regex" "^[1234]$"; then
        aux_err "Invalid state choice: $state_choice"
        return 1
    fi

    case $state_choice in
        1)
            aux_info "Keeping the current state. No further action needed."
            ;;
        2)
            local branch_name=$(aux_ask "Enter the name for the new branch" "")
            if ! aux_val "$branch_name" "not_empty"; then
                aux_err "Branch name cannot be empty"
                return 1
            fi
            if ! aux_val "$branch_name" "alphanum"; then
                aux_warn "Branch name contains special characters, proceeding anyway" "branch=$branch_name"
            fi
            if aux_cmd "git" "checkout" "-b" "$branch_name"; then
                aux_info "Created and switched to new branch" "branch=$branch_name"
            else
                aux_err "Failed to create new branch" "branch=$branch_name"
                return 1
            fi
            ;;
        3)
            local remote_branch=$(aux_ask "Enter the name of the remote branch to force push to" "")
            if ! aux_val "$remote_branch" "not_empty"; then
                aux_err "Remote branch name cannot be empty"
                return 1
            fi
            aux_warn "About to force push - this will rewrite remote history" "branch=$remote_branch"
            local confirm=$(aux_ask "Are you sure you want to force push? (yes/no)" "no")
            if [[ "${confirm,,}" != "yes" ]]; then
                aux_info "Force push cancelled by user"
                return 0
            fi
            if aux_cmd "git" "push" "-f" "origin" "HEAD:$remote_branch"; then
                aux_warn "Force pushed to remote - history has been rewritten" "branch=$remote_branch"
            else
                aux_err "Failed to force push" "branch=$remote_branch"
                return 1
            fi
            ;;
        4)
            local commit_message=$(aux_ask "Enter a commit message" "")
            if ! aux_val "$commit_message" "not_empty"; then
                aux_err "Commit message cannot be empty"
                return 1
            fi
            if aux_cmd "git" "commit" "-m" "$commit_message"; then
                aux_info "Created new commit" "message=$commit_message"
            else
                aux_err "Failed to create commit" "message=$commit_message"
                return 1
            fi
            ;;
        *)
            aux_warn "Invalid choice - no further action taken" "choice=$state_choice"
            ;;
    esac

    aux_info "Git Reset Explorer process complete"
    aux_info "Current repository state:"
    if ! aux_cmd "git" "status"; then
        aux_warn "Failed to display git status"
    fi
    aux_info "Current commit:"
    if ! aux_cmd "git" "log" "-1" "--oneline"; then
        aux_warn "Failed to display current commit"
    fi
}
