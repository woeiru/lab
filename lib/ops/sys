#!/bin/bash

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Shows a summary of specific functions in the script, displaying their usage, shortname, and description
# overview functions
# [function_name_filter]
sys_fun() {
    # Technical Description:
    #   Analyzes function definitions within script files and displays comprehensive overview
    #   Supports optional filtering by function name patterns for targeted analysis
    #   Extracts function metadata including usage patterns, shortnames, and descriptions
    #   Processes function documentation and presents it in a structured format
    # Dependencies:
    #   - ana_laf function for function analysis and formatting
    #   - aux_tec function for technical details display
    #   - FILEPATH_gen variable for target file path
    #   - Read permissions on source files
    # Arguments:
    #   $1: [function_name_filter] - optional pattern to filter functions by name
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    # Optional parameters - no validation needed
    # Pass all arguments to processing function
    ana_laf "$FILEPATH_sys" "$@"
}

# Displays an overview of specific variables defined in the configuration file, showing their names, values, and usage across different files
# overview variables
# -x (execute)
sys_var() {
    # Technical Description:
    #   Scans configuration files and extracts variable definitions using auxiliary functions
    #   Displays variable usage patterns across different files and contexts
    #   Analyzes configuration structure and provides comprehensive overview of variable usage
    #   Operates on default configuration files within the project directory structure
    # Dependencies:
    #   - ana_acu function for configuration analysis
    #   - CONFIG_gen variable for configuration file path
    #   - DIR_FUN variable for directory navigation
    #   - Read permissions on configuration files
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Debug logging for development insights
    aux_dbg "Analyzing configuration variables in $CONFIG_gen"
    
    ana_acu -o "$CONFIG_gen" "$DIR_FUN/.."
}

# Manages git operations, ensuring the local repository syncs with the remote.
# git sync operations
# [commit_message]
sys_gio() {
    # Technical Description:
    #   Comprehensive git synchronization workflow handling both clean and dirty working trees
    #   Performs fetch, status check, pull for clean trees, and add/commit/push for dirty trees
    #   Supports optional commit messages, defaults to empty message when not provided
    #   Handles branch management with configurable default branch via GIT_BRANCH variable
    #   Includes error handling for each git operation with descriptive failure messages
    # Dependencies:
    #   - git command line tool with full functionality
    #   - GIT_BRANCH environment variable for branch configuration
    #   - DIR_FUN variable for directory navigation
    #   - Write permissions for git operations and directory access
    #   - Network connectivity for remote operations
    # Arguments:
    #   $1: [commit_message] - optional commit message for changes, space-separated words combined
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    # Optional parameters - no validation needed
    local dir="${DIR_FUN:-.}/.."
    local branch="${GIT_BRANCH:-master}"
    local commit_message=""

    # If arguments are provided, use them as the commit message
    if [ $# -gt 0 ]; then
        commit_message="$*"
    fi

    # Dependency checks
    if ! aux_chk "command" "git"; then
        aux_err "git command not found - required for repository operations"
        return 127
    fi

    # Validate directory exists
    if ! aux_chk "dir_exists" "$dir"; then
        aux_err "Directory not found: $dir"
        return 2
    fi

    aux_info "Starting git synchronization" "dir=$dir,branch=$branch"
    aux_dbg "Commit message: ${commit_message:-empty}"

    # Store current directory and navigate to the git folder
    local original_dir
    original_dir=$(pwd)
    if ! cd "$dir" 2>/dev/null; then
        aux_err "Failed to change directory to $dir"
        return 1
    fi

    # Fetch updates from remote
    if ! aux_cmd "git" "fetch" "origin" "$branch"; then
        aux_err "Failed to fetch from remote" "branch=$branch"
        return 1
    fi

    # Get the current status
    local status_output
    status_output=$(git status --porcelain)
    if [[ -z "$status_output" ]]; then
        aux_info "Working tree clean, checking for updates"
        if git rev-list HEAD...origin/"$branch" --count | grep -q "^0$"; then
            aux_info "Local branch is up to date" "branch=origin/$branch"
        else
            aux_info "Updates available, pulling changes" "branch=$branch"
            if ! aux_cmd "git" "pull" "origin" "$branch"; then
                aux_err "Failed to pull changes" "branch=$branch"
                return 1
            fi
        fi
    else
        aux_info "Changes detected, committing and pushing"
        if ! aux_cmd "git" "add" "."; then
            aux_err "Failed to stage changes"
            return 1
        fi
        if [[ -n "$commit_message" ]]; then
            if ! aux_cmd "git" "commit" "-m" "$commit_message"; then
                aux_err "Failed to commit changes" "message=$commit_message"
                return 1
            fi
        else
            if ! aux_cmd "git" "commit" "--allow-empty-message" "-m" ""; then
                aux_err "Failed to commit changes" "message=empty"
                return 1
            fi
        fi
        if ! aux_cmd "git" "push" "origin" "$branch"; then
            aux_err "Failed to push changes" "branch=$branch"
            return 1
        fi
        aux_info "Successfully pushed changes" "branch=$branch"
    fi

    # Return to the original directory
    if ! cd "$original_dir" 2>/dev/null; then
        aux_warn "Failed to return to original directory: $original_dir"
    fi
}

# Detects the system's package manager
# detect package manager
# -x (execute)
sys_dpa() {
    # Technical Description:
    #   Scans system for available package managers using command availability checks
    #   Tests for presence of common package managers: apt, dnf, yum, zypper in priority order
    #   Returns detected package manager name for use by other package management functions
    #   Provides fallback 'unknown' result when no supported package manager found
    # Dependencies:
    #   - command utility for testing command availability
    #   - Standard package managers: apt, dnf, yum, or zypper installed on system
    #   - No special permissions required beyond command execution
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local pman="unknown"

    aux_dbg "Detecting system package manager"

    if aux_chk "command" "apt"; then
        pman="apt"
    elif aux_chk "command" "dnf"; then
        pman="dnf"
    elif aux_chk "command" "yum"; then
        pman="yum"
    elif aux_chk "command" "zypper"; then
        pman="zypper"
    fi

    aux_dbg "Detected package manager: $pman"
    echo "$pman"
}

# Updates and upgrades system packages using the detected package manager
# update packages system
# -x (execute)
sys_upa() {
    # Technical Description:
    #   Performs comprehensive system package update and upgrade operations
    #   Uses sys_dpa to automatically detect the appropriate package manager
    #   Executes both refresh (update) and upgrade operations in sequence
    #   Supports apt, dnf, yum, and zypper package managers with appropriate commands
    #   Provides detailed feedback on operation success or failure with specific error messages
    # Dependencies:
    #   - sys_dpa function for package manager detection
    #   - Detected package manager (apt, dnf, yum, or zypper) installed and functional
    #   - Root or sudo privileges for package management operations
    #   - Network connectivity for downloading package updates
    #   - aux_log function for status reporting
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"

    # Get package manager using sys_dpa
    local pman
    pman=$(sys_dpa -x)

    if [ "$pman" = "unknown" ]; then
        aux_err "Could not detect a supported package manager"
        return 1
    fi

    aux_info "Starting system package update and upgrade" "package_manager=$pman"
    
    # Define commands based on package manager
    case "$pman" in
        apt)
            if aux_cmd "apt" "update" "-y" && aux_cmd "apt" "upgrade" "-y"; then
                aux_info "System update and upgrade completed successfully" "package_manager=$pman"
                return 0
            else
                aux_err "Failed to update and upgrade system" "package_manager=$pman"
                return 1
            fi
            ;;
        dnf|yum)
            if aux_cmd "$pman" "update" "-y" && aux_cmd "$pman" "upgrade" "-y"; then
                aux_info "System update and upgrade completed successfully" "package_manager=$pman"
                return 0
            else
                aux_err "Failed to update and upgrade system" "package_manager=$pman"
                return 1
            fi
            ;;
        zypper)
            if aux_cmd "zypper" "refresh" "-y" && aux_cmd "zypper" "update" "-y"; then
                aux_info "System update and upgrade completed successfully" "package_manager=$pman"
                return 0
            else
                aux_err "Failed to update and upgrade system" "package_manager=$pman"
                return 1
            fi
            ;;
        *)
            aux_err "Unsupported package manager: $pman"
            return 1
            ;;
    esac
}

# Installs specified packages using the system's package manager
# install packages system
# <pak1> <pak2> ...
sys_ipa() {
    # Technical Description:
    #   Intelligently installs system packages using detected package manager
    #   Filters out already installed packages to avoid redundant operations
    #   Supports installation of multiple packages in a single operation
    #   Handles different package managers with appropriate installation commands
    #   Provides comprehensive feedback on installation status and results
    # Dependencies:
    #   - sys_dpa function for package manager detection
    #   - Package manager utilities: dpkg (apt), rpm (dnf/yum/zypper)
    #   - Root or sudo privileges for package installation
    #   - Network connectivity for downloading packages
    #   - aux_log function for status reporting
    # Arguments:
    #   $1, $2, ...: package_name - names of packages to install from system repositories
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -lt 1 ]; then
        aux_use
        return 1
    fi
    
    # Validate input parameters
    for package in "$@"; do
        if ! aux_val "$package" "not_empty"; then
            aux_err "Package name cannot be empty: $package"
            aux_use
            return 1
        fi
    done
    
    local function_name="${FUNCNAME[0]}"

    # Get package manager using sys_dpa
    local pman
    pman=$(sys_dpa -x)
    if [ "$pman" = "unknown" ]; then
        aux_err "Could not detect a supported package manager"
        return 1
    fi

    aux_info "Starting package installation" "package_manager=$pman,packages=$*"
    aux_dbg "Filtering already installed packages"

    # Filter out already installed packages
    local packages_to_install=()
    for package in "$@"; do
        case "$pman" in
            apt)
                if ! dpkg -l "$package" &>/dev/null; then
                    packages_to_install+=("$package")
                    aux_dbg "Package needs installation: $package"
                else
                    aux_dbg "Package already installed: $package"
                fi
                ;;
            dnf|yum)
                if ! rpm -q "$package" &>/dev/null; then
                    packages_to_install+=("$package")
                    aux_dbg "Package needs installation: $package"
                else
                    aux_dbg "Package already installed: $package"
                fi
                ;;
            zypper)
                if ! rpm -q "$package" &>/dev/null; then
                    packages_to_install+=("$package")
                    aux_dbg "Package needs installation: $package"
                else
                    aux_dbg "Package already installed: $package"
                fi
                ;;
        esac
    done

    # If no packages need installation, exit successfully
    if [ ${#packages_to_install[@]} -eq 0 ]; then
        aux_info "All packages are already installed"
        return 0
    fi

    aux_info "Installing packages" "packages=${packages_to_install[*]}"

    # Install filtered packages
    case "$pman" in
        apt)
            if aux_cmd "apt" "install" "-y" "${packages_to_install[@]}"; then
                aux_info "Successfully installed packages" "packages=${packages_to_install[*]}"
                return 0
            else
                aux_err "Failed to install packages" "packages=${packages_to_install[*]}"
                return 1
            fi
            ;;
        dnf|yum)
            if aux_cmd "$pman" "install" "-y" "${packages_to_install[@]}"; then
                aux_info "Successfully installed packages" "packages=${packages_to_install[*]}"
                return 0
            else
                aux_err "Failed to install packages" "packages=${packages_to_install[*]}"
                return 1
            fi
            ;;
        zypper)
            if aux_cmd "zypper" "install" "-y" "${packages_to_install[@]}"; then
                aux_info "Successfully installed packages" "packages=${packages_to_install[*]}"
                return 0
            else
                aux_err "Failed to install packages" "packages=${packages_to_install[*]}"
                return 1
            fi
            ;;
        *)
            aux_err "Unsupported package manager: $pman"
            return 1
            ;;
    esac
}

# Configures git globally with a specified username and email, essential for proper commit attribution
# git set config
# <username> <usermail>
sys_gst() {
    # Technical Description:
    #   Configures global git user identity settings for proper commit attribution
    #   Sets both user.name and user.email in the global git configuration
    #   Essential prerequisite for git operations requiring user identification
    #   Configuration persists across all git repositories for the current user
    #   Validates successful configuration and provides execution feedback
    # Dependencies:
    #   - git command line tool with configuration capabilities
    #   - Write permissions for git global configuration file (~/.gitconfig)
    #   - aux_log function for status notification
    # Arguments:
    #   $1: username - git user name for commit attribution (spaces allowed)
    #   $2: usermail - git user email address for commit identification
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    # Validate input parameters
    if ! aux_val "$1" "not_empty"; then
        aux_err "Username cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$2" "not_empty"; then
        aux_err "Email cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency check
    if ! aux_chk "command" "git"; then
        aux_err "git command not found - required for configuration"
        return 127
    fi
    
    local function_name="${FUNCNAME[0]}"
    local username="$1"
    local usermail="$2"

    aux_info "Configuring global git user identity" "username=$username,email=$usermail"

    if aux_cmd "git" "config" "--global" "user.name" "$username" && aux_cmd "git" "config" "--global" "user.email" "$usermail"; then
        aux_info "Git configuration completed successfully" "username=$username,email=$usermail"
    else
        aux_err "Failed to configure git user identity" "username=$username,email=$usermail"
        return 1
    fi
}

# Installs, enables, and starts the sysstat service for system performance monitoring. Modifies the configuration to ensure it's enabled
# setup sysstat service
# -x (execute)
sys_sst() {
    # Technical Description:
    #   Comprehensive setup of sysstat service for system performance monitoring
    #   Installs sysstat package using system package manager
    #   Modifies /etc/default/sysstat configuration to enable data collection
    #   Enables and starts the systemd service for automatic startup and immediate operation
    #   Essential for system performance data collection and historical analysis
    # Dependencies:
    #   - sys_ipa function for package installation
    #   - systemctl command for service management
    #   - sed command for configuration file modification
    #   - Root or sudo privileges for system service and configuration changes
    #   - Write permissions for /etc/default/sysstat file
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "systemctl"; then
        aux_err "systemctl command not found - required for service management"
        return 127
    fi
    
    if ! aux_chk "command" "sed"; then
        aux_err "sed command not found - required for configuration modification"
        return 127
    fi
    
    aux_info "Setting up sysstat service for system monitoring"
    
    # Step 1: Install sysstat
    aux_info "Installing sysstat package"
    if ! sys_ipa sysstat; then
        aux_err "Failed to install sysstat package"
        return 1
    fi

    # Step 2: Enable sysstat
    aux_info "Enabling sysstat data collection"
    if ! aux_cmd "sed" "-i" "s/ENABLED=\"false\"/ENABLED=\"true\"/" "/etc/default/sysstat"; then
        aux_err "Failed to modify sysstat configuration"
        return 1
    fi

    # Step 3: Start the sysstat service
    aux_info "Enabling and starting sysstat service"
    if aux_cmd "systemctl" "enable" "sysstat" && aux_cmd "systemctl" "start" "sysstat"; then
        aux_info "sysstat service setup completed successfully"
    else
        aux_err "Failed to enable or start sysstat service"
        return 1
    fi
}

# Creates a new user with a specified username and password, prompting for input if not provided. Verifies successful user creation
# user setup
# <username> <password>
sys_ust() {
    # Technical Description:
    #   Creates new system user account with home directory and specified credentials
    #   Uses useradd command for user creation with automatic home directory creation
    #   Sets user password securely using chpasswd for encrypted password storage
    #   Validates successful user creation using id command verification
    #   Provides interactive prompts and comprehensive error handling
    # Dependencies:
    #   - useradd command for user account creation
    #   - chpasswd command for secure password setting
    #   - id command for user existence verification
    #   - aux_log function for status notification
    #   - Root or sudo privileges for user management operations
    # Arguments:
    #   $1: username - desired username for the new system account
    #   $2: password - initial password for the new user account
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    # Validate input parameters
    if ! aux_val "$1" "not_empty"; then
        aux_err "Username cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$2" "not_empty"; then
        aux_err "Password cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "useradd"; then
        aux_err "useradd command not found - required for user creation"
        return 127
    fi
    
    if ! aux_chk "command" "chpasswd"; then
        aux_err "chpasswd command not found - required for password setting"
        return 127
    fi
    
    if ! aux_chk "command" "id"; then
        aux_err "id command not found - required for user verification"
        return 127
    fi
    
    local function_name="${FUNCNAME[0]}"
    local username="$1"
    local password="$2"

    aux_info "Creating new user account" "username=$username"

    # Create the user
    if ! aux_cmd "useradd" "-m" "$username"; then
        aux_err "Failed to create user account" "username=$username"
        return 1
    fi
    
    if ! echo "$username:$password" | aux_cmd "chpasswd"; then
        aux_err "Failed to set user password" "username=$username"
        return 1
    fi

    # Check if user creation was successful
    if id -u "$username" > /dev/null 2>&1; then
        aux_info "User created successfully" "username=$username"
    else
        aux_err "Failed to create user" "username=$username"
        return 1
    fi
}

# Enables and starts a specified systemd service. Checks if the service is active and prompts for continuation if it's not
# systemd setup service
# <service>
sys_sdc() {
    # Technical Description:
    #   Comprehensive systemd service management with enable, start, and verification operations
    #   Enables service for automatic startup on system boot using systemctl enable
    #   Starts service immediately for current session using systemctl start
    #   Verifies service activation status and provides interactive continuation options
    #   Handles service activation failures gracefully with user choice prompts
    # Dependencies:
    #   - systemctl command for systemd service management
    #   - systemctl is-active command for service status verification
    #   - aux_tec and aux_use functions for help and usage display
    #   - aux_log function for status notification
    #   - Root or sudo privileges for service management operations
    # Arguments:
    #   $1: service - name of the systemd service to enable and start
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    # Validate input parameter
    if ! aux_val "$1" "not_empty"; then
        aux_err "Service name cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency check
    if ! aux_chk "command" "systemctl"; then
        aux_err "systemctl command not found - required for service management"
        return 127
    fi
    
    local function_name="${FUNCNAME[0]}"
    local service="$1"

    aux_info "Enabling and starting systemd service" "service=$service"

    # Enable and start service
    if aux_cmd "systemctl" "enable" "$service" && aux_cmd "systemctl" "start" "$service"; then
        aux_info "Service operations completed" "service=$service"
    else
        aux_err "Failed to enable or start service" "service=$service"
        return 1
    fi

    # Check if service is active
    if systemctl is-active --quiet "$service"; then
        aux_info "Service is active and running" "service=$service"
    else
        local choice=$(aux_ask "$service is not active. Do you want to continue anyway?" "no" "yes_no")
        case "$choice" in
            "yes")
                aux_warn "Service is not active but continuing" "service=$service"
                ;;
            *)
                aux_err "Service is not active, exiting" "service=$service"
                return 1
                ;;
        esac
    fi
}

# An interactive Bash function that guides users through Git history navigation, offering options for reset type and subsequent actions, with built-in safeguards and explanations.
# git reset explorer
# -x (execute)
sys_gre() {
    # Technical Description:
    #   Interactive Git Reset Explorer providing guided workflow for git history manipulation
    #   Offers comprehensive reset options: soft, mixed, and hard with detailed explanations
    #   Provides post-reset action choices: keep state, create branch, force push, or new commit
    #   Includes safety prompts and educational information for understanding git reset operations
    #   Features status display and commit information for complete workflow transparency
    # Dependencies:
    #   - git command line tool with full reset, branch, and status capabilities
    #   - git log command for commit history display
    #   - Interactive shell environment for user input prompts
    #   - Working git repository with commit history
    #   - Network connectivity for push operations (if selected)
    # Arguments:
    #   $1: -x - explicit execution flag required for safety and consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "git"; then
        aux_err "git command not found - required for repository operations"
        return 127
    fi
    
    aux_info "Starting Git Reset Explorer"
    
    aux_info "Welcome to the Git Reset Explorer (sys-gre)!"
    aux_info "This function will guide you through the process of moving back in Git history."

    # Step 1: Determine how many commits to go back
    local num_commits=$(aux_ask "How many commits do you want to go back?" "1" "numeric")
    aux_dbg "User selected commits to go back: $num_commits"

    # Step 2: Determine the reset type
    aux_info "Reset type options:"
    aux_info "1. Soft (move HEAD but leave staging and working directory unchanged)"
    aux_info "2. Mixed (move HEAD and reset staging, but leave working directory unchanged)"
    aux_info "3. Hard (move HEAD, reset staging, and reset working directory)"
    local reset_type=$(aux_ask "Enter your choice (1/2/3)" "2" "choice_123")

    # Construct the reset command
    local reset_cmd
    case $reset_type in
        1) reset_cmd="git reset --soft HEAD~$num_commits" ;;
        2) reset_cmd="git reset HEAD~$num_commits" ;;
        3) reset_cmd="git reset --hard HEAD~$num_commits" ;;
        *) 
            aux_err "Invalid choice: $reset_type"
            return 1 
            ;;
    esac

    # Execute the reset command
    aux_info "Executing git reset" "command=$reset_cmd"
    if ! aux_cmd "bash" "-c" "$reset_cmd"; then
        aux_err "Failed to execute git reset" "command=$reset_cmd"
        return 1
    fi

    # Step 3: Handle the new state
    aux_info "Reset complete. Post-reset action options:"
    aux_info "1. Keep this state (do nothing further)"
    aux_info "2. Create a new branch at this point"
    aux_info "3. Force push this state to the remote (caution: rewrites history)"
    aux_info "4. Create a new commit with this state"
    local state_choice=$(aux_ask "Enter your choice (1/2/3/4)" "1" "choice_1234")

    case $state_choice in
        1)
            aux_info "Keeping the current state. No further action needed."
            ;;
        2)
            local branch_name=$(aux_ask "Enter the name for the new branch" "" "not_empty")
            if aux_cmd "git" "checkout" "-b" "$branch_name"; then
                aux_info "Created and switched to new branch" "branch=$branch_name"
            else
                aux_err "Failed to create new branch" "branch=$branch_name"
                return 1
            fi
            ;;
        3)
            local remote_branch=$(aux_ask "Enter the name of the remote branch to force push to" "" "not_empty")
            if aux_cmd "git" "push" "-f" "origin" "HEAD:$remote_branch"; then
                aux_warn "Force pushed to remote - history has been rewritten" "branch=$remote_branch"
            else
                aux_err "Failed to force push" "branch=$remote_branch"
                return 1
            fi
            ;;
        4)
            local commit_message=$(aux_ask "Enter a commit message" "" "not_empty")
            if aux_cmd "git" "commit" "-m" "$commit_message"; then
                aux_info "Created new commit" "message=$commit_message"
            else
                aux_err "Failed to create commit" "message=$commit_message"
                return 1
            fi
            ;;
        *)
            aux_warn "Invalid choice - no further action taken" "choice=$state_choice"
            ;;
    esac

    aux_info "Git Reset Explorer process complete"
    aux_info "Current repository state:"
    git status
    aux_info "Current commit:"
    git log -1 --oneline
}
