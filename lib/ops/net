#!/bin/bash

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Displays an overview of specific functions in the script, showing their usage, shortname, and description
# overview functions
# [function_name_filter]
net_fun() {
    # Technical Description:
    #   Scans the network operations module and extracts function documentation
    #   Provides formatted overview of available functions with descriptions
    #   Supports optional filtering by function name pattern
    #   Uses ana_laf utility for consistent function listing across modules
    # Dependencies:
    #   - ana_laf function from auxiliary module
    #   - aux_chk, aux_info, aux_err functions
    #   - Read access to network operations module file
    #   - Standard POSIX shell utilities for text processing
    # Arguments:
    #   $1: function_name_filter - optional pattern to filter function names (default: show all)
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    # Dependency checks (REQUIRED for functions using other modules)
    if ! aux_chk "function" "ana_laf"; then
        aux_err "ana_laf function not found - required for function listing"
        return 127
    fi
    
    if ! aux_chk "file_exists" "$FILEPATH_net"; then
        aux_err "Network operations module file not found: $FILEPATH_net"
        return 2
    fi
    
    # Optional parameter validation (no strict requirement)
    if [ $# -gt 0 ] && ! aux_val "$1" "not_empty"; then
        aux_err "Function name filter cannot be empty if provided"
        return 1
    fi
    
    # Operational logging
    aux_info "Displaying network operations functions" "filter=${1:-none}"
    
    ana_laf "$FILEPATH_net" "$@"
}
# Displays an overview of specific variables in network configuration
# Network Variables - NEV
# -x (execute)
net_var() {
    # Technical Description:
    #   Extracts and displays network-related configuration variables
    #   Scans configuration files and parent directories for variable definitions
    #   Uses ana_acu utility with output formatting for variable display
    #   Provides comprehensive view of network configuration state
    # Dependencies:
    #   - ana_acu function from auxiliary module
    #   - aux_chk, aux_info, aux_err functions
    #   - Read access to configuration files and parent directories
    #   - Network configuration file defined in CONFIG_net variable
    # Arguments:
    #   $1: -x - explicit execution flag required for consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Dependency checks (REQUIRED for functions using other modules)
    if ! aux_chk "function" "ana_acu"; then
        aux_err "ana_acu function not found - required for configuration analysis"
        return 127
    fi
    
    if ! aux_chk "dir_exists" "$DIR_FUN/.."; then
        aux_err "Parent directory not accessible for configuration scanning"
        return 2
    fi
    
    # Operational logging
    aux_info "Displaying network configuration variables"
    
    ana_acu -o "$CONFIG_net" "$DIR_FUN/.."
}

# Guides the user through renaming a network interface by updating udev rules and network configuration, with an option to reboot the system
# udev network interface
# -x (execute)
net_uni() {
    # Technical Description:
    #   Interactive network interface renaming utility with comprehensive system integration
    #   Displays available network interfaces and their MAC addresses for user selection
    #   Creates persistent udev rules to maintain interface naming across reboots
    #   Updates network configuration files to reflect new interface names
    #   Provides optional system reboot to apply changes immediately
    #   Uses temporary file operations for safe configuration updates
    # Dependencies:
    #   - 'ip' command for network interface enumeration
    #   - 'awk' for MAC address extraction from ip output
    #   - 'udevadm' for udev rule management and reloading
    #   - 'sed' for configuration file text replacement
    #   - Write access to /etc/udev/rules.d/ directory
    #   - Write access to /etc/network/interfaces file
    #   - Root privileges for system configuration changes
    #   - 'reboot' command for optional system restart
    #   - aux_ask, aux_chk, aux_info, aux_warn, aux_err functions
    # Arguments:
    #   $1: -x - explicit execution flag required for safety due to system-level changes
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Dependency checks (REQUIRED for system functions)
    if ! aux_chk "command" "ip"; then
        aux_err "ip command not found - required for network interface operations"
        return 127
    fi
    
    if ! aux_chk "command" "udevadm"; then
        aux_err "udevadm command not found - required for udev rule management"
        return 127
    fi
    
    if ! aux_chk "command" "awk"; then
        aux_err "awk command not found - required for MAC address extraction"
        return 127
    fi
    
    if ! aux_chk "command" "sed"; then
        aux_err "sed command not found - required for configuration file updates"
        return 127
    fi
    
    if ! aux_chk "dir_exists" "/etc/udev/rules.d"; then
        aux_err "Directory not found: /etc/udev/rules.d"
        return 2
    fi
    
    if ! aux_chk "permission" "/etc/udev/rules.d" "w"; then
        aux_err "Write access required to /etc/udev/rules.d directory"
        return 2
    fi
    
    if ! aux_chk "file_exists" "/etc/network/interfaces"; then
        aux_err "Network interfaces file not found: /etc/network/interfaces"
        return 2
    fi
    
    if ! aux_chk "permission" "/etc/network/interfaces" "w"; then
        aux_err "Write access required to /etc/network/interfaces file"
        return 2
    fi
    
    # Operational logging (REQUIRED for system changes)
    aux_info "Starting network interface renaming process"
    
    # User interaction (REQUIRED for interactive functions)
    local INTERFACE_NAME=$(aux_ask "Enter the new interface name (e.g., nic1)" "" "not_empty")
    
    # Input validation (REQUIRED) - enhanced validation for interface names
    if ! aux_val "$INTERFACE_NAME" "regex" "^[a-zA-Z][a-zA-Z0-9_-]{0,14}$"; then
        aux_err "Invalid interface name format. Must start with letter, contain only alphanumeric, underscore, or hyphen, max 15 chars" "interface=$INTERFACE_NAME"
        return 1
    fi
    
    # Check if interface name is already in use
    if ip addr show dev "$INTERFACE_NAME" >/dev/null 2>&1; then
        aux_err "Interface name already exists on system" "interface=$INTERFACE_NAME"
        return 1
    fi
    
    # Display available network interfaces
    aux_info "Available network interfaces and their MAC addresses:"
    ip addr
    
    local SELECTED_INTERFACE=$(aux_ask "Enter the network interface name whose MAC address you want to associate with the new name" "" "not_empty")
    
    # Enhanced validation of selected interface
    if ! aux_val "$SELECTED_INTERFACE" "not_empty"; then
        aux_err "Selected interface name cannot be empty"
        return 1
    fi
    
    # Validate selected interface exists
    if ! ip addr show dev "$SELECTED_INTERFACE" >/dev/null 2>&1; then
        aux_err "Network interface not found: $SELECTED_INTERFACE"
        return 2
    fi

    # Retrieve MAC address for the selected interface
    local MAC_ADDRESS=$(ip addr show dev "$SELECTED_INTERFACE" | awk '/ether/{print $2}')
    
    # Validate MAC address was found and has correct format
    if ! aux_val "$MAC_ADDRESS" "not_empty"; then
        aux_err "Could not retrieve MAC address for interface: $SELECTED_INTERFACE"
        return 2
    fi
    
    # Validate MAC address format
    local mac_regex="^([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2}$"
    if ! aux_val "$MAC_ADDRESS" "regex" "$mac_regex"; then
        aux_err "Invalid MAC address format retrieved" "mac=$MAC_ADDRESS,interface=$SELECTED_INTERFACE"
        return 2
    fi
    
    aux_info "MAC address for $SELECTED_INTERFACE: $MAC_ADDRESS"
    
    # Safe command execution with rollback mechanism (REQUIRED for system operations)
    local udev_rules_file="/etc/udev/rules.d/70-persistent-net.rules"
    local backup_file="${udev_rules_file}.backup.$(date +%s)"
    
    # Create backup if file exists
    if [ -f "$udev_rules_file" ]; then
        if ! cp "$udev_rules_file" "$backup_file"; then
            aux_err "Failed to create backup of udev rules file"
            return 2
        fi
        aux_info "Created backup of existing udev rules" "backup_file=$backup_file"
    fi
    
    aux_info "Creating udev rule for interface renaming" "interface=$INTERFACE_NAME,mac=$MAC_ADDRESS"
    
    # Create new udev rule with error handling
    local udev_rule='SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="'"$MAC_ADDRESS"'", NAME="'"$INTERFACE_NAME"'"'
    if ! echo "$udev_rule" > "$udev_rules_file"; then
        aux_err "Failed to create udev rule file"
        # Restore backup if it exists
        if [ -f "$backup_file" ]; then
            if cp "$backup_file" "$udev_rules_file"; then
                aux_info "Restored backup udev rules file"
            else
                aux_err "Failed to restore backup - manual intervention required"
            fi
        fi
        return 2
    fi
    
    # Reload udev rules with error handling
    if aux_cmd "udevadm" "control" "--reload-rules" && aux_cmd "udevadm" "trigger"; then
        aux_info "Udev rules reloaded successfully"
    else
        aux_err "Failed to reload udev rules"
        return 2
    fi
    
    aux_info "Udev rule applied. The interface name '$INTERFACE_NAME' has been assigned to MAC address '$MAC_ADDRESS'."
    
    # Update network configuration file safely with backup
    local interfaces_file="/etc/network/interfaces"
    local interfaces_backup="${interfaces_file}.backup.$(date +%s)"
    
    aux_info "Creating backup of network interfaces configuration"
    if ! cp "$interfaces_file" "$interfaces_backup"; then
        aux_err "Failed to backup network interfaces file"
        return 2
    fi
    
    aux_info "Updating network configuration file"
    if aux_cmd "sed" "-i" "s/$SELECTED_INTERFACE/$INTERFACE_NAME/g" "$interfaces_file"; then
        aux_info "Network configuration updated successfully" "backup_file=$interfaces_backup"
    else
        aux_err "Failed to update network configuration file - restoring backup"
        if cp "$interfaces_backup" "$interfaces_file"; then
            aux_info "Successfully restored network configuration backup"
        else
            aux_err "Failed to restore backup - manual intervention required" "backup_file=$interfaces_backup"
        fi
        return 2
    fi
    
    # User confirmation for reboot
    local REBOOT_CONFIRM=$(aux_ask "Do you want to reboot the system now to apply changes? (yes/no)" "no")
    if [ "$REBOOT_CONFIRM" = "yes" ]; then
        aux_info "Initiating system reboot"
        if aux_cmd "reboot"; then
            return 0
        else
            aux_err "Failed to initiate system reboot"
            return 2
        fi
    else
        aux_warn "System reboot was not executed. Please manually restart the system to apply the changes."
    fi
}

# Adds a specified service to the firewalld configuration and reloads the firewall. Checks for the presence of firewall-cmd before proceeding
# firewall (add) service (and) reload
# <service>
net_fsr() {
    # Technical Description:
    #   Adds a firewall service to the permanent firewalld configuration
    #   Checks for firewall-cmd availability before attempting configuration
    #   Makes service changes persistent across system reboots
    #   Reloads firewall configuration to apply changes immediately
    #   Provides notification of successful execution via aux_log
    # Dependencies:
    #   - 'firewall-cmd' command from firewalld package
    #   - aux_val, aux_chk, aux_info, aux_err, aux_cmd functions
    #   - Root privileges for firewall configuration changes
    # Arguments:
    #   $1: service - name of the firewall service to add (e.g., 'ssh', 'http', 'https')
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    # Parameter validation (REQUIRED) - enhanced service name validation
    if ! aux_val "$1" "not_empty"; then
        aux_err "Service name cannot be empty"
        aux_use
        return 1
    fi
    
    # Validate service name format (alphanumeric with hyphens allowed)
    if ! aux_val "$1" "regex" "^[a-zA-Z0-9][a-zA-Z0-9_-]{0,63}$"; then
        aux_err "Invalid service name format. Must be alphanumeric with optional hyphens/underscores, max 64 chars" "service=$1"
        return 1
    fi
    
    local fw_service="$1"
    
    # Dependency checks (REQUIRED for system functions)
    if ! aux_chk "command" "firewall-cmd"; then
        aux_err "firewall-cmd command not found - required for firewall operations"
        return 127
    fi
    
    # Check if firewalld service is running
    if ! aux_chk "process" "firewalld"; then
        aux_warn "Firewalld service does not appear to be running" "service=firewalld"
    fi
    
    # Validate service exists in firewalld
    if ! firewall-cmd --get-services | grep -q "\b$fw_service\b"; then
        aux_err "Service not recognized by firewalld" "service=$fw_service"
        aux_info "Available services: $(firewall-cmd --get-services | tr ' ' ',')"
        return 1
    fi
    
    # Operational logging (REQUIRED for system changes)
    aux_info "Adding firewall service to permanent configuration" "service=$fw_service"
    
    # Safe command execution (REQUIRED for system operations)
    if aux_cmd "firewall-cmd" "--permanent" "--add-service=$fw_service" && aux_cmd "firewall-cmd" "--reload"; then
        aux_info "Firewall service configuration successful" "service=$fw_service"
    else
        aux_err "Failed to configure firewall service" "service=$fw_service"
        return 2
    fi
}

# Allows a specified service through the firewall using firewall-cmd, making the change permanent and reloading the firewall configuration
# firewall allow service
# <service>
net_fas() {
    # Technical Description:
    #   Configures firewalld to allow a specific service through the firewall
    #   Checks firewall daemon state before attempting configuration changes
    #   Makes service allowance persistent across system reboots
    #   Reloads firewall configuration to apply changes immediately
    #   Provides notification of successful execution via aux_log
    # Dependencies:
    #   - 'firewall-cmd' command from firewalld package
    #   - aux_val, aux_chk, aux_info, aux_err, aux_cmd functions
    #   - Active firewalld daemon service
    #   - Root privileges for firewall configuration changes
    # Arguments:
    #   $1: service - name of the firewall service to allow (e.g., 'ssh', 'http', 'https')
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    # Parameter validation (REQUIRED) - enhanced service name validation
    if ! aux_val "$1" "not_empty"; then
        aux_err "Service name cannot be empty"
        aux_use
        return 1
    fi
    
    # Validate service name format (alphanumeric with hyphens allowed)
    if ! aux_val "$1" "regex" "^[a-zA-Z0-9][a-zA-Z0-9_-]{0,63}$"; then
        aux_err "Invalid service name format. Must be alphanumeric with optional hyphens/underscores, max 64 chars" "service=$1"
        return 1
    fi
    
    local fwd_service="$1"
    
    # Dependency checks (REQUIRED for system functions)
    if ! aux_chk "command" "firewall-cmd"; then
        aux_err "firewall-cmd command not found - required for firewall operations"
        return 127
    fi
    
    # Check firewall daemon state
    aux_info "Checking firewall daemon state"
    if ! aux_cmd "firewall-cmd" "--state"; then
        aux_err "Firewall daemon is not running"
        return 2
    fi
    
    # Validate service exists in firewalld
    if ! firewall-cmd --get-services | grep -q "\b$fwd_service\b"; then
        aux_err "Service not recognized by firewalld" "service=$fwd_service"
        aux_info "Available services: $(firewall-cmd --get-services | tr ' ' ',')"
        return 1
    fi
    
    # Operational logging (REQUIRED for system changes)
    aux_info "Allowing firewall service through firewall" "service=$fwd_service"
    
    # Safe command execution (REQUIRED for system operations)
    if aux_cmd "firewall-cmd" "--add-service=$fwd_service" "--permanent" && aux_cmd "firewall-cmd" "--reload"; then
        aux_info "Firewall service allowance successful" "service=$fwd_service"
    else
        aux_err "Failed to allow firewall service" "service=$fwd_service"
        return 2
    fi
}



# Adds or updates a host entry in /etc/hosts. If IP or hostname is empty, logs an error and exits.
# add host entry
# <ip_address> <hostname>
net_hos() {
    # Technical Description:
    #   Manages /etc/hosts file entries with safe update mechanisms
    #   Validates existing entries and updates IP addresses when hostnames conflict
    #   Creates new entries for previously unknown hostnames
    #   Uses temporary file operations for atomic updates to prevent corruption
    #   Provides detailed logging of all operations performed
    # Dependencies:
    #   - 'grep' for pattern matching in hosts file
    #   - 'sed' for text replacement operations
    #   - 'mktemp' for temporary file creation
    #   - 'sudo' for elevated privileges when modifying system files
    #   - 'tee' for appending to files with privilege escalation
    #   - aux_val, aux_chk, aux_info, aux_warn, aux_err functions
    #   - Write access to /etc/hosts file
    # Arguments:
    #   $1: ip_address - IP address to associate with hostname (IPv4 or IPv6 format)
    #   $2: hostname - hostname to add or update in hosts file
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    # Parameter validation (REQUIRED)
    if ! aux_val "$1" "not_empty"; then
        aux_err "IP address cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$2" "not_empty"; then
        aux_err "Hostname cannot be empty"
        aux_use
        return 1
    fi
    
    # Validate IP address format (using regex pattern)
    local ip_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$|^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$"
    if ! aux_val "$1" "regex" "$ip_regex"; then
        aux_err "Invalid IP address format: $1"
        return 1
    fi
    
    # Validate hostname format (using regex for basic hostname validation)
    local hostname_regex="^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$"
    if ! aux_val "$2" "regex" "$hostname_regex"; then
        aux_err "Invalid hostname format: $2"
        return 1
    fi
    
    local ip_address="$1"
    local hostname="$2"
    local hosts_file="/etc/hosts"
    
    # Dependency checks (REQUIRED for system functions)
    if ! aux_chk "command" "grep"; then
        aux_err "grep command not found - required for hosts file operations"
        return 127
    fi
    
    if ! aux_chk "command" "sed"; then
        aux_err "sed command not found - required for text operations"
        return 127
    fi
    
    if ! aux_chk "command" "mktemp"; then
        aux_err "mktemp command not found - required for temporary file operations"
        return 127
    fi
    
    if ! aux_chk "file_exists" "$hosts_file"; then
        aux_err "Hosts file not found: $hosts_file"
        return 2
    fi
    
    # Operational logging (REQUIRED for file operations)
    aux_info "Managing hosts file entry" "hostname=$hostname,ip=$ip_address"

    # Validate configuration before making changes
    aux_info "Validating hosts file configuration" "hostname=$hostname,ip=$ip_address"
    
    # Check for potential conflicts (same IP with different hostname)
    local existing_hostname=$(grep -E "^$ip_address\s+" "$hosts_file" | awk '{print $2}' | head -1)
    if [ -n "$existing_hostname" ] && [ "$existing_hostname" != "$hostname" ]; then
        aux_warn "IP address already assigned to different hostname" "ip=$ip_address,existing_hostname=$existing_hostname,new_hostname=$hostname"
        local confirm=$(aux_ask "Continue with this change? This will replace the existing hostname mapping (yes/no)" "no")
        if [ "$confirm" != "yes" ]; then
            aux_info "Operation cancelled by user"
            return 0
        fi
    fi
    
    # Check if the entry already exists with the same IP
    if grep -q -w "$hostname" "$hosts_file"; then
        # Hostname exists, check if IP needs update
        if grep -q -w "$ip_address\\s\\+$hostname" "$hosts_file"; then
            aux_info "Host entry already exists and is correct" "hostname=$hostname,ip=$ip_address"
            return 0
        else
            # Hostname exists, but IP is different. Update the line.
            aux_info "Updating existing host entry" "hostname=$hostname,old_ip=existing,new_ip=$ip_address"
            
            # Safe file operation with backup and atomic update
            local backup_file="${hosts_file}.backup.$(date +%s)"
            local temp_file
            
            # Create backup
            if ! cp "$hosts_file" "$backup_file"; then
                aux_err "Failed to create backup of hosts file"
                return 2
            fi
            
            # Use atomic update with temporary file
            if temp_file=$(mktemp); then
                if sed "s/.*\\s\\+$hostname$/$ip_address\\t$hostname/" "$hosts_file" > "$temp_file"; then
                    if sudo cp "$temp_file" "$hosts_file"; then
                        rm "$temp_file"
                        aux_info "Successfully updated host entry" "hostname=$hostname,ip=$ip_address,backup_file=$backup_file"
                        return 0
                    else
                        # Restore backup on failure
                        rm "$temp_file" 2>/dev/null
                        if cp "$backup_file" "$hosts_file"; then
                            aux_err "Failed to update hosts file - backup restored" "hostname=$hostname,ip=$ip_address"
                        else
                            aux_err "Failed to update hosts file and restore backup - manual intervention required" "backup_file=$backup_file"
                        fi
                        return 2
                    fi
                else
                    rm "$temp_file" 2>/dev/null
                    aux_err "Failed to process hosts file with sed" "hostname=$hostname,ip=$ip_address"
                    return 2
                fi
            else
                aux_err "Failed to create temporary file for hosts update"
                return 2
            fi
        fi
    else
        # Hostname does not exist, add new entry with backup
        local backup_file="${hosts_file}.backup.$(date +%s)"
        
        # Create backup before adding new entry
        if ! cp "$hosts_file" "$backup_file"; then
            aux_err "Failed to create backup of hosts file"
            return 2
        fi
        
        aux_info "Adding new host entry" "hostname=$hostname,ip=$ip_address,backup_file=$backup_file"
        
        if echo -e "$ip_address\\t$hostname" | sudo tee -a "$hosts_file" > /dev/null; then
            aux_info "Successfully added host entry" "hostname=$hostname,ip=$ip_address"
            return 0
        else
            aux_err "Failed to add host entry - restoring backup" "hostname=$hostname,ip=$ip_address"
            if cp "$backup_file" "$hosts_file"; then
                aux_info "Successfully restored hosts file backup"
            else
                aux_err "Failed to restore backup - manual intervention required" "backup_file=$backup_file"
            fi
            return 2
        fi
    fi
}
