#!/bin/bash

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Displays an overview of specific functions in the script, showing their usage, shortname, and description
# overview functions
# [function_name_filter]
net_fun() {
    # Technical Description:
    #   Scans the network operations module and extracts function documentation
    #   Provides formatted overview of available functions with descriptions
    #   Supports optional filtering by function name pattern
    #   Uses ana_laf utility for consistent function listing across modules
    # Dependencies:
    #   - ana_laf function from auxiliary module
    #   - Read access to network operations module file
    #   - Standard POSIX shell utilities for text processing
    # Arguments:
    #   $1: function_name_filter - optional pattern to filter function names (default: show all)
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    ana_laf "$FILEPATH_net" "$@"
}
# Displays an overview of specific variables in network configuration
# Network Variables - NEV
# -x (execute)
net_var() {
    # Technical Description:
    #   Extracts and displays network-related configuration variables
    #   Scans configuration files and parent directories for variable definitions
    #   Uses ana_acu utility with output formatting for variable display
    #   Provides comprehensive view of network configuration state
    # Dependencies:
    #   - ana_acu function from auxiliary module
    #   - Read access to configuration files and parent directories
    #   - Network configuration file defined in CONFIG_net variable
    # Arguments:
    #   $1: -x - explicit execution flag required for consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    ana_acu -o "$CONFIG_net" "$DIR_FUN/.."
}

# Guides the user through renaming a network interface by updating udev rules and network configuration, with an option to reboot the system
# udev network interface
# -x (execute)
net_uni() {
    # Technical Description:
    #   Interactive network interface renaming utility with comprehensive system integration
    #   Displays available network interfaces and their MAC addresses for user selection
    #   Creates persistent udev rules to maintain interface naming across reboots
    #   Updates network configuration files to reflect new interface names
    #   Provides optional system reboot to apply changes immediately
    #   Uses temporary file operations for safe configuration updates
    # Dependencies:
    #   - 'ip' command for network interface enumeration
    #   - 'awk' for MAC address extraction from ip output
    #   - 'udevadm' for udev rule management and reloading
    #   - 'sed' for configuration file text replacement
    #   - Write access to /etc/udev/rules.d/ directory
    #   - Write access to /etc/network/interfaces file
    #   - Root privileges for system configuration changes
    #   - 'reboot' command for optional system restart
    # Arguments:
    #   $1: -x - explicit execution flag required for safety due to system-level changes
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Prompt user for the new interface name
    read -p "Enter the new interface name (e.g., nic1): " INTERFACE_NAME

    # Get the list of available network interfaces and their MAC addresses
    echo "Available network interfaces and their MAC addresses:"
    ip addr

    # Prompt user to enter the NIC name from the list
    read -p "Enter the network interface name whose MAC address you want to associate with the new name: " SELECTED_INTERFACE

    # Retrieve MAC address for the selected interface
    MAC_ADDRESS=$(ip addr show dev "$SELECTED_INTERFACE" | awk '/ether/{print $2}')
    echo "MAC address for $SELECTED_INTERFACE: $MAC_ADDRESS"

    # Create or edit the udev rule file
    echo 'SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="'"$MAC_ADDRESS"'", NAME="'"$INTERFACE_NAME"'"' > /etc/udev/rules.d/70-persistent-net.rules

    # Reload udev rules
    udevadm control --reload-rules
    udevadm trigger

    echo "Udev rule applied. The interface name '$INTERFACE_NAME' has been assigned to MAC address '$MAC_ADDRESS'."

    # Make changes in the network configuration file
    sed -i 's/'"$SELECTED_INTERFACE"'/'"$INTERFACE_NAME"'/g' /etc/network/interfaces

    echo "Network configuration updated. The interface name has been replaced in the configuration file."

    # Perform system reboot
    read -p "Do you want to reboot the system now? (y/n): " REBOOT_CONFIRM
    if [ "$REBOOT_CONFIRM" = "y" ]; then
        reboot
    else
        echo "System reboot was not executed. Please manually restart the system to apply the changes."
    fi
}

# Adds a specified service to the firewalld configuration and reloads the firewall. Checks for the presence of firewall-cmd before proceeding
# firewall (add) service (and) reload
# <service>
net_fsr() {
    # Technical Description:
    #   Adds a firewall service to the permanent firewalld configuration
    #   Checks for firewall-cmd availability before attempting configuration
    #   Makes service changes persistent across system reboots
    #   Reloads firewall configuration to apply changes immediately
    #   Provides notification of successful execution via aux_log
    # Dependencies:
    #   - 'firewall-cmd' command from firewalld package
    #   - 'command' builtin for utility availability checking
    #   - aux_log function for operation notification
    #   - Root privileges for firewall configuration changes
    # Arguments:
    #   $1: service - name of the firewall service to add (e.g., 'ssh', 'http', 'https')
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local fw_service="$1"
    
   # Open firewall ports
    if command -v firewall-cmd > /dev/null; then
        firewall-cmd --permanent --add-service=$fw_service
        firewall-cmd --reload
	aux_log "INFO" "$function_name: executed ( $1 )"
    else
        echo "firewall-cmd not found, skipping firewall configuration."
    fi
}

# Allows a specified service through the firewall using firewall-cmd, making the change permanent and reloading the firewall configuration
# firewall allow service
# <service>
net_fas() {
    # Technical Description:
    #   Configures firewalld to allow a specific service through the firewall
    #   Checks firewall daemon state before attempting configuration changes
    #   Makes service allowance persistent across system reboots
    #   Reloads firewall configuration to apply changes immediately
    #   Provides notification of successful execution via aux_log
    # Dependencies:
    #   - 'firewall-cmd' command from firewalld package
    #   - aux_log function for operation notification
    #   - Active firewalld daemon service
    #   - Root privileges for firewall configuration changes
    # Arguments:
    #   $1: service - name of the firewall service to allow (e.g., 'ssh', 'http', 'https')
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local fwd_as_1="$1"

    firewall-cmd --state
    firewall-cmd --add-service="$fwd_as_1" --permanent
    firewall-cmd --reload

    aux_log "INFO" "$function_name: executed"
}



# Adds or updates a host entry in /etc/hosts. If IP or hostname is empty, logs an error and exits.
# add host entry
# <ip_address> <hostname>
net_hos() {
    # Technical Description:
    #   Manages /etc/hosts file entries with safe update mechanisms
    #   Validates existing entries and updates IP addresses when hostnames conflict
    #   Creates new entries for previously unknown hostnames
    #   Uses temporary file operations for atomic updates to prevent corruption
    #   Provides detailed logging of all operations performed
    # Dependencies:
    #   - 'grep' for pattern matching in hosts file
    #   - 'sed' for text replacement operations
    #   - 'mktemp' for temporary file creation
    #   - 'sudo' for elevated privileges when modifying system files
    #   - 'tee' for appending to files with privilege escalation
    #   - aux_tec function for technical help display
    #   - aux_use function for usage information display
    #   - Write access to /etc/hosts file
    # Arguments:
    #   $1: ip_address - IP address to associate with hostname (IPv4 or IPv6 format)
    #   $2: hostname - hostname to add or update in hosts file
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local ip_address="$1"
    local hostname="$2"
    local hosts_file="/etc/hosts"

    # Check if the entry already exists with the same IP
    if grep -q -w "$hostname" "$hosts_file"; then
        # Hostname exists, check if IP needs update
        if grep -q -w "$ip_address\\s\\+$hostname" "$hosts_file"; then
            echo "INF: $function_name: Host entry for $hostname ($ip_address) already exists and is correct."
            return 0
        else
            # Hostname exists, but IP is different. Update the line.
            # Use a temporary file for sed to avoid issues with /etc/hosts
            local temp_file
            temp_file=$(mktemp)
            sed "s/.*\\s\\+$hostname$/$ip_address\\t$hostname/" "$hosts_file" > "$temp_file" && sudo cp "$temp_file" "$hosts_file"
            rm "$temp_file"
            echo "INF: $function_name: Updated host entry for $hostname to $ip_address."
            return 0
        fi
    else
        # Hostname does not exist, add new entry
        echo -e "$ip_address\\t$hostname" | sudo tee -a "$hosts_file" > /dev/null
        echo "INF: $function_name: Added host entry for $hostname ($ip_address)."
        return 0
    fi
}
