#!/bin/bash

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Shows function overview with optional filtering
# overview functions
# [function_name_filter]
pbs_fun() {
    # Technical Description:
    #   Displays formatted list of all functions in the PBS module
    #   Uses ana_laf utility to parse function definitions and extract documentation
    #   Provides optional filtering by function name pattern
    #   Shows function descriptions, mnemonics, and parameter requirements
    # Dependencies:
    #   - ana_laf function from auxiliary library
    #   - Read access to PBS module file
    #   - grep for pattern matching if filtering is used
    # Arguments:
    #   $1: function_name_filter (optional) - pattern to filter function names
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    ana_laf "$FILEPATH_pbs" "$@"
}
# Shows configuration variables overview
# overview variables
# -x (execute)
pbs_var() {
    # Technical Description:
    #   Displays configuration variables specific to PBS module
    #   Uses ana_acu utility to scan and format variable definitions
    #   Shows variable names, values, and usage context from configuration files
    #   Provides organized view of PBS-related environment and configuration settings
    # Dependencies:
    #   - ana_acu function from auxiliary library
    #   - Read access to configuration files
    #   - CONFIG_pbs environment variable must be set
    # Arguments:
    #   $1: -x - explicit execution flag required for consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    ana_acu -o "$CONFIG_pbs" "$DIR_FUN/.."
}

# Download Proxmox GPG key and verify checksums
# download and verify
# -x (execute)
pbs_dav() {
    # Technical Description:
    #   Downloads the official Proxmox GPG key for Debian Bookworm from enterprise repository
    #   Performs dual checksum verification using both SHA512 and MD5 algorithms
    #   Validates downloaded key against known good checksums to ensure integrity
    #   Places key in system trusted keyring for APT package verification
    # Dependencies:
    #   - wget for downloading files from remote URLs
    #   - sha512sum for SHA512 checksum calculation
    #   - md5sum for MD5 checksum calculation
    #   - awk for text processing
    #   - Write permissions to /etc/apt/trusted.gpg.d/
    #   - Network access to enterprise.proxmox.com
    # Arguments:
    #   $1: -x - explicit execution flag required for safety due to system modifications
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "wget"; then
        aux_err "wget command not found - required for downloading files"
        return 127
    fi
    
    if ! aux_chk "command" "sha512sum"; then
        aux_err "sha512sum command not found - required for checksum verification"
        return 127
    fi
    
    if ! aux_chk "command" "md5sum"; then
        aux_err "md5sum command not found - required for checksum verification"
        return 127
    fi
    
    if ! aux_chk "permission" "/etc/apt/trusted.gpg.d" "w"; then
        aux_err "No write permission to GPG directory" "path=/etc/apt/trusted.gpg.d"
        return 2
    fi
    
    aux_info "Starting Proxmox GPG key download and verification" "operation=download_verify_gpg"
    aux_dbg "Downloading GPG key from enterprise.proxmox.com" "step=download_key"
    
    # Download the GPG key
    if aux_cmd "wget" "https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg" "-O" "/etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg"; then
        aux_info "GPG key downloaded successfully" "path=/etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg"
    else
        aux_err "Failed to download GPG key" "url=https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg"
        return 2
    fi

    aux_dbg "Starting checksum verification" "step=verify_checksums"
    
    # Verify SHA512 checksum
    sha512_expected="7da6fe34168adc6e479327ba517796d4702fa2f8b4f0a9833f5ea6e6b48f6507a6da403a274fe201595edc86a84463d50383d07f64bdde2e3658108db7d6dc87"
    sha512_actual=$(sha512sum /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg | awk '{print $1}')

    if [ "$sha512_actual" == "$sha512_expected" ]; then
        aux_info "SHA512 checksum verified successfully" "checksum_type=sha512,status=verified"
    else
        aux_err "SHA512 checksum verification failed" "expected=$sha512_expected,actual=$sha512_actual"
        return 2
    fi

    # Verify MD5 checksum
    md5_expected="41558dc019ef90bd0f6067644a51cf5b"
    md5_actual=$(md5sum /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg | awk '{print $1}')

    if [ "$md5_actual" == "$md5_expected" ]; then
        aux_info "MD5 checksum verified successfully" "checksum_type=md5,status=verified"
    else
        aux_err "MD5 checksum verification failed" "expected=$md5_expected,actual=$md5_actual"
        return 2
    fi
    
    aux_info "GPG key download and verification completed successfully" "operation=download_verify_gpg,status=completed"
}

# Add Proxmox repository to sources.list if not already present
# setup sources.list
# -x (execute)
pbs_adr() {
    # Technical Description:
    #   Adds the Proxmox Backup Server repository line to APT sources.list
    #   Checks for existing repository entry to prevent duplicates
    #   Uses no-subscription repository for free access to PBS packages
    #   Provides feedback on whether line was added or already existed
    # Dependencies:
    #   - grep for pattern matching in files
    #   - echo for writing to files
    #   - aux_log function for notification output
    #   - Write permissions to /etc/apt/sources.list
    # Arguments:
    #   $1: -x - explicit execution flag required for safety due to system modifications
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "grep"; then
        aux_err "grep command not found - required for file operations"
        return 127
    fi
    
    if ! aux_chk "file_exists" "/etc/apt/sources.list"; then
        aux_err "APT sources.list file not found" "path=/etc/apt/sources.list"
        return 2
    fi
    
    if ! aux_chk "permission" "/etc/apt/sources.list" "w"; then
        aux_err "No write permission to sources.list" "path=/etc/apt/sources.list"
        return 2
    fi
    
    local function_name="${FUNCNAME[0]}"
    line_to_add="deb http://download.proxmox.com/debian/pbs bookworm pbs-no-subscription"
    file="/etc/apt/sources.list"

    aux_info "Setting up Proxmox repository in sources.list" "operation=setup_repository"
    aux_dbg "Checking for existing repository entry" "step=check_existing"

    if grep -Fxq "$line_to_add" "$file"; then
        aux_warn "Repository line already exists in sources.list" "file=$file,status=exists"
    else
        aux_dbg "Adding repository line to sources.list" "step=add_repository"
        if echo "$line_to_add" >> "$file"; then
            aux_info "Repository line added successfully" "file=$file,repository=pbs-no-subscription"
        else
            aux_err "Failed to add repository line" "file=$file,operation=append"
            return 2
        fi
    fi
}

# Restore datastore configuration file with given parameters
# restore datastore
# <datastore_config> <datastore_name> <datastore_path>
pbs_rda() {
    # Technical Description:
    #   Creates or updates the Proxmox Backup Server datastore configuration
    #   Validates configuration parameters and file existence before processing
    #   Uses pattern matching to check for existing datastore entries
    #   Creates configuration file structure with proper formatting if missing
    # Dependencies:
    #   - grep with Perl regex support (-Pzo flags)
    #   - echo with escape sequence support (-e flag)
    #   - aux_use function for usage display
    #   - aux_log function for notification output
    #   - Write permissions to /etc/proxmox-backup/datastore.cfg
    # Arguments:
    #   $1: datastore_config - configuration identifier or backup source
    #   $2: datastore_name - unique name for the datastore entry
    #   $3: datastore_path - filesystem path where datastore will be located
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 3 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local datastore_config="$1"
    local datastore_name="$2"
    local datastore_path="$3"
    
    # Parameter validation
    if ! aux_val "$datastore_config" "not_empty"; then
        aux_err "Datastore config cannot be empty" "parameter=datastore_config"
        aux_use
        return 1
    fi
    
    if ! aux_val "$datastore_name" "not_empty"; then
        aux_err "Datastore name cannot be empty" "parameter=datastore_name"
        aux_use
        return 1
    fi
    
    if ! aux_val "$datastore_path" "not_empty"; then
        aux_err "Datastore path cannot be empty" "parameter=datastore_path"
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "grep"; then
        aux_err "grep command not found - required for file operations"
        return 127
    fi

    # Define the file path to the configuration file
    local file="/etc/proxmox-backup/datastore.cfg"
    # Define the combined lines to be checked within the file
    local combined_lines="datastore: $datastore_name\n\tpath $datastore_path"

    aux_info "Starting datastore configuration restore" "name=$datastore_name,path=$datastore_path"
    aux_dbg "Configuration parameters validated" "config=$datastore_config,name=$datastore_name"

    # Check if the file exists
    if [[ -f "$file" ]]; then
        aux_info "Configuration file exists" "file=$file"
        aux_dbg "Checking for existing datastore configuration" "step=check_existing"

        # Check if the combined lines are present in the file in sequence
        if grep -Pzo "(?s)$combined_lines" "$file" > /dev/null; then
            aux_warn "Datastore configuration already exists" "name=$datastore_name,file=$file"
        else
            aux_info "Adding datastore configuration to existing file" "name=$datastore_name"
            aux_dbg "Appending configuration lines" "step=append_config"
            # Append the combined lines to the file
            if echo -e "$combined_lines" >> "$file"; then
                aux_info "Datastore configuration added successfully" "name=$datastore_name,file=$file"
            else
                aux_err "Failed to add datastore configuration" "name=$datastore_name,file=$file"
                return 2
            fi
        fi
    else
        aux_info "Configuration file does not exist, creating new file" "file=$file"
        
        # Check if directory exists and is writable
        local config_dir=$(dirname "$file")
        if ! aux_chk "dir_exists" "$config_dir"; then
            aux_err "Configuration directory does not exist" "dir=$config_dir"
            return 2
        fi
        
        if ! aux_chk "permission" "$config_dir" "w"; then
            aux_err "No write permission to configuration directory" "dir=$config_dir"
            return 2
        fi
        
        aux_dbg "Creating new configuration file" "step=create_file"
        # Create the file and add the combined lines
        if echo -e "$combined_lines" > "$file"; then
            aux_info "Configuration file created with datastore settings" "file=$file,name=$datastore_name"
        else
            aux_err "Failed to create configuration file" "file=$file"
            return 2
        fi
    fi

    aux_info "Datastore configuration restore completed successfully" "name=$datastore_name,config=$datastore_config"
}

# Monitors and displays various aspects of the Proxmox Backup Server
# pbs monitor
# [option]
pbs_mon() {
    # Technical Description:
    #   Comprehensive monitoring tool for Proxmox Backup Server operations
    #   Provides interactive menu system when no option specified
    #   Executes specific monitoring commands based on user selection
    #   Covers service status, datastore info, tasks, configuration, and system metrics
    # Dependencies:
    #   - systemctl for service status checking
    #   - proxmox-backup-manager for PBS-specific operations
    #   - cat for file content display
    #   - ps and grep for process monitoring
    #   - journalctl for log analysis
    #   - df for storage usage statistics
    #   - ss for network connection monitoring
    #   - aux_log function for notification output
    # Arguments:
    #   $1: option (optional) - monitoring option number (1-11) or descriptive string
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    local function_name="${FUNCNAME[0]}"
    local option=""
    
    # Parameter validation for provided options
    if [ $# -gt 1 ]; then
        aux_err "Too many parameters provided" "expected=0_or_1,provided=$#"
        aux_use
        return 1
    fi
    
    # Dependency checks for monitoring commands
    local missing_deps=()
    if ! aux_chk "command" "systemctl"; then
        missing_deps+=("systemctl")
    fi
    if ! aux_chk "command" "proxmox-backup-manager"; then
        missing_deps+=("proxmox-backup-manager")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        aux_err "Missing required dependencies for monitoring" "missing=${missing_deps[*]}"
        return 127
    fi

    # If no argument is provided, prompt for option
    if [ $# -eq 0 ]; then
        aux_info "Starting PBS monitoring with interactive menu" "mode=interactive"
        echo "Proxmox Backup Server Monitoring Options:"
        echo "1. Show PBS service status"
        echo "2. Display datastore information"
        echo "3. Show running tasks"
        echo "4. Display server configuration"
        echo "5. Check PBS-related processes"
        echo "6. View recent PBS logs"
        echo "7. Show storage usage"
        echo "8. Display user and API token information"
        echo "9. Show backup schedule"
        echo "10. Display network statistics"
        echo "11. All of the above"
        option="11"
    else
        option="$1"
        aux_info "Starting PBS monitoring with specific option" "option=$option"
    fi
    
    # Validate option if provided
    if ! aux_val "$option" "not_empty"; then
        aux_err "Monitoring option cannot be empty" "parameter=option"
        aux_use
        return 1
    fi
    
    aux_dbg "PBS monitoring initialized" "option=$option,mode=${mode:-direct}"

    case "$option" in
        1|"Show PBS service status")
            echo "PBS Service Status:"
            systemctl status proxmox-backup
            ;;
        2|"Display datastore information")
            echo "Datastore Information:"
            proxmox-backup-manager datastore list
            ;;
        3|"Show running tasks")
            echo "Running Tasks:"
            proxmox-backup-manager task list --limit 10
            ;;
        4|"Display server configuration")
            echo "Server Configuration:"
            cat /etc/proxmox-backup/proxmox-backup.ini
            ;;
        5|"Check PBS-related processes")
            echo "PBS-related Processes:"
            ps aux | grep -E 'proxmox-backup'
            ;;
        6|"View recent PBS logs")
            echo "Recent PBS Logs:"
            journalctl -u proxmox-backup -n 50
            ;;
        7|"Show storage usage")
            echo "Storage Usage:"
            df -h /proxmox-backup
            ;;
        8|"Display user and API token information")
            echo "User and API Token Information:"
            proxmox-backup-manager user list
            proxmox-backup-manager api-token list
            ;;
        9|"Show backup schedule")
            echo "Backup Schedule:"
            proxmox-backup-manager schedule list
            ;;
        10|"Display network statistics")
            echo "Network Statistics:"
            ss -tuna | grep -E ':8007|:8008'
            ;;
        11|"All of the above")
            aux_dbg "Running comprehensive monitoring" "step=all_options"
            for i in {1..10}; do
                aux_dbg "Executing monitoring option $i" "step=option_$i"
                pbs_mon "$i"
                echo "----------------------------------------"
            done
            ;;
        *)
            aux_err "Invalid monitoring option provided" "option=$option,valid_range=1-11"
            aux_use
            return 1
            ;;
    esac

    aux_info "PBS monitoring completed successfully" "option=$option,status=completed"
}
