#!/bin/bash

# ============================================================================
# pbs - Function Summary
#
#   pbs_fun : Shows a summary of selected functions in the script.
#   pbs_var : Displays an overview of specific variables defined in the configuration file.
#   pbs-dav : Downloads Proxmox GPG key and verifies checksums.
#   pbs-adr : Adds Proxmox repository to sources.list.
#   pbs-rda : Restores datastore configuration file.
#   pbs-mon : Monitors and displays various aspects of the Proxmox Backup Server.
#
# ============================================================================

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# show an overview of specific functions
# overview functions
#  
pbs_fun() {
    aux_laf "$FILEPATH_pbs" "$@"
}
# show an overview of specific variables
# overview variables
#  
pbs_var() {
    aux_acu -o "$CONFIG_pbs" "$DIR_FUN/.."
}

# Download Proxmox GPG key and verify checksums.
# download and verify
#   
pbs_dav() {
    # Download the GPG key
    wget https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg

    # Verify SHA512 checksum
    sha512_expected="7da6fe34168adc6e479327ba517796d4702fa2f8b4f0a9833f5ea6e6b48f6507a6da403a274fe201595edc86a84463d50383d07f64bdde2e3658108db7d6dc87"
    sha512_actual=$(sha512sum /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg | awk '{print $1}')

    if [ "$sha512_actual" == "$sha512_expected" ]; then
        echo "SHA512 checksum verified successfully."
    else
        echo "SHA512 checksum verification failed."
    fi

    # Verify MD5 checksum
    md5_expected="41558dc019ef90bd0f6067644a51cf5b"
    md5_actual=$(md5sum /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg | awk '{print $1}')

    if [ "$md5_actual" == "$md5_expected" ]; then
        echo "MD5 checksum verified successfully."
    else
        echo "MD5 checksum verification failed."
    fi
}

# Add Proxmox repository to sources.list if not already present.
# setup sources.list
#   
pbs_adr() {
    local function_name="${FUNCNAME[0]}"
    line_to_add="deb http://download.proxmox.com/debian/pbs bookworm pbs-no-subscription"
    file="/etc/apt/sources.list"

    if grep -Fxq "$line_to_add" "$file"; then
        aux_nos "$function_name" "Line already exists in $file"
    else
        echo "$line_to_add" >> "$file"
        aux_nos "$function_name" "Line added to $file"
    fi
}

# Restore datastore configuration file with given parameters.
# restore datastore
# <datastore_config> <datastore_name> <datastore_path>
pbs_rda() {
        local function_name="${FUNCNAME[0]}"
	local datastore_config="$1"
	local datastore_name="$2"
	local datastore_path="$3"

     if [ $# -ne 3 ]; then
       aux_use
       return 1
     fi

 # Define the file path to the configuration file
    local file="/etc/proxmox-backup/datastore.cfg"
    # Define the combined lines to be checked within the file
    local combined_lines="datastore: $datastore_name\n\tpath $datastore_path"

    # Check if the file exists
    if [[ -f "$file" ]]; then
        echo "$file exists."

        # Check if the combined lines are present in the file in sequence
        if grep -Pzo "(?s)$combined_lines" "$file"; then
            echo "The lines are present in sequence in $file."
        else
            echo "The lines are not present in sequence in $file. Adding the lines."
            # Append the combined lines to the file
            echo -e "$combined_lines" >> "$file"
            echo "Lines added to $file."
        fi
    else
        echo "$file does not exist. Creating the file and adding the lines."
        # Create the file and add the combined lines
        echo -e "$combined_lines" > "$file"
        echo "File created and lines added."
        echo "$combined_lines"
    fi

    aux_nos "$function_name" "executed ( $1 $2 $3 )"
}

# Monitors and displays various aspects of the Proxmox Backup Server
# pbs monitor
# [option]
pbs_mon() {
    local function_name="${FUNCNAME[0]}"
    local option=""

    # If no argument is provided, prompt for option
    if [ $# -eq 0 ]; then
        echo "Proxmox Backup Server Monitoring Options:"
        echo "1. Show PBS service status"
        echo "2. Display datastore information"
        echo "3. Show running tasks"
        echo "4. Display server configuration"
        echo "5. Check PBS-related processes"
        echo "6. View recent PBS logs"
        echo "7. Show storage usage"
        echo "8. Display user and API token information"
        echo "9. Show backup schedule"
        echo "10. Display network statistics"
        echo "11. All of the above"
        aux_mev "option" "Enter option number" "11"
    else
        option="$1"
    fi

    case "$option" in
        1|"Show PBS service status")
            echo "PBS Service Status:"
            systemctl status proxmox-backup
            ;;
        2|"Display datastore information")
            echo "Datastore Information:"
            proxmox-backup-manager datastore list
            ;;
        3|"Show running tasks")
            echo "Running Tasks:"
            proxmox-backup-manager task list --limit 10
            ;;
        4|"Display server configuration")
            echo "Server Configuration:"
            cat /etc/proxmox-backup/proxmox-backup.ini
            ;;
        5|"Check PBS-related processes")
            echo "PBS-related Processes:"
            ps aux | grep -E 'proxmox-backup'
            ;;
        6|"View recent PBS logs")
            echo "Recent PBS Logs:"
            journalctl -u proxmox-backup -n 50
            ;;
        7|"Show storage usage")
            echo "Storage Usage:"
            df -h /proxmox-backup
            ;;
        8|"Display user and API token information")
            echo "User and API Token Information:"
            proxmox-backup-manager user list
            proxmox-backup-manager api-token list
            ;;
        9|"Show backup schedule")
            echo "Backup Schedule:"
            proxmox-backup-manager schedule list
            ;;
        10|"Display network statistics")
            echo "Network Statistics:"
            ss -tuna | grep -E ':8007|:8008'
            ;;
        11|"All of the above")
            for i in {1..10}; do
                pbs-mon "$i"
                echo "----------------------------------------"
            done
            ;;
        *)
            echo "Invalid option"
            return 1
            ;;
    esac

    aux_nos "$function_name" "PBS monitoring completed"
}
