#!/bin/bash

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Displays an overview of specific NFS-related functions in the script, showing their usage, shortname, and description
# overview functions
# [function_name_filter]
srv_fun() {
    # Technical Description:
    #   Extracts and displays function information from the srv module file
    #   Uses aux_laf utility to parse function definitions and comments
    #   Provides formatted output showing function names, descriptions, and usage
    #   Supports optional filtering by function name pattern
    # Dependencies:
    #   - aux_laf function for parsing and formatting
    #   - Read access to srv module file
    #   - Standard POSIX shell utilities
    # Arguments:
    #   $1: [function_name_filter] - optional pattern to filter functions (default: show all)
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    aux_laf "$FILEPATH_srv" "$@"
}
# Displays an overview of NFS-specific variables defined in the configuration file, showing their names, values, and usage across different files
# overview variables
# -x (execute)
srv_var() {
    # Technical Description:
    #   Scans configuration files and related directories for srv-related variables
    #   Uses aux_acu utility with overview flag to extract variable definitions
    #   Displays variable names, values, and their usage context
    #   Provides comprehensive view of configuration state for troubleshooting
    # Dependencies:
    #   - aux_acu function for configuration analysis
    #   - Read access to configuration files and directories
    #   - Standard POSIX shell utilities
    # Arguments:
    #   $1: -x - explicit execution flag required for consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    aux_acu -o "$CONFIG_srv" "$DIR_FUN/.."
}

# Sets up an NFS share by prompting for necessary information (NFS header, shared folder, and options) and applying the configuration
# nfs setup
# <nfs_header> <shared_folder> <nfs_options>
nfs_set() {
    # Technical Description:
    #   Interactive NFS share setup function that collects required parameters
    #   Prompts user for missing information using aux_mev utility
    #   Validates inputs and delegates to nfs_apl for actual configuration
    #   Provides user-friendly interface for NFS share creation
    # Dependencies:
    #   - aux_mev function for interactive parameter collection
    #   - nfs_apl function for configuration application
    #   - aux_nos function for success notification
    #   - Standard POSIX shell utilities
    # Arguments:
    #   $1: nfs_header - identifier/name for the NFS export
    #   $2: shared_folder - absolute path to directory to be shared
    #   $3: nfs_options - NFS export options (e.g., "*(rw,sync,no_subtree_check)")
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 3 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local nfs_header="$1"
    local shared_folder="$2"
    local nfs_options="$3"

    # Prompt for missing inputs
    aux_mev "nfs_header" "Enter NFS header" "$nfs_header"
    aux_mev "shared_folder" "Enter path to shared folder" "$shared_folder"
    aux_mev "nfs_options" "Enter NFS options" "$nfs_options"

    # Apply the NFS configuration
    nfs_apl "$nfs_header" "$shared_folder" "$nfs_options"
    aux_nos "$function_name" "NFS setup complete"
}

# Applies NFS configuration by creating the shared folder if needed, updating /etc/exports, and restarting the NFS server
# nfs apply config
# <nfs_header> <shared_folder> <nfs_options>
nfs_apl() {
    # Technical Description:
    #   Direct NFS configuration application function without user interaction
    #   Creates shared directory with appropriate permissions if it doesn't exist
    #   Updates /etc/exports file with new NFS export entry
    #   Restarts NFS services to apply configuration changes
    #   Performs duplicate detection to avoid configuration conflicts
    # Dependencies:
    #   - mkdir command for directory creation
    #   - chmod command for permission setting
    #   - grep command for duplicate detection
    #   - tee command for file writing
    #   - exportfs command for NFS export management
    #   - systemctl command for service management
    #   - Root privileges for system configuration
    # Arguments:
    #   $1: nfs_header - identifier/name for the NFS export
    #   $2: shared_folder - absolute path to directory to be shared
    #   $3: nfs_options - NFS export options (e.g., "*(rw,sync,no_subtree_check)")
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 3 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local nfs_header="$1"
    local shared_folder="$2"
    local nfs_options="$3"

    # Check if the shared folder exists, create it if not
    if [ ! -d "$shared_folder" ]; then
        mkdir -p "$shared_folder"
        chmod -R 777 "$shared_folder"
        echo "Shared folder created: $shared_folder"
    fi

    # Check if the NFS export already exists in /etc/exports
    if grep -qF "$shared_folder" /etc/exports; then
        echo "NFS export already exists in /etc/exports. Skipping addition."
    else
        # Append NFS export line to /etc/exports
        echo "$shared_folder $nfs_options" | tee -a /etc/exports > /dev/null
        echo "NFS export added to /etc/exports."
    fi

    # Restart NFS server
    exportfs -ra
    systemctl restart nfs-server

    # Print confirmation message
    echo "NFS server configured. Shared folder: $shared_folder"
    aux_nos "$function_name" "NFS configuration applied"
}

# Monitors and displays various aspects of the NFS server
# nfs monitor
# <option>
nfs_mon() {
    # Technical Description:
    #   Comprehensive NFS server monitoring and status reporting function
    #   Provides multiple monitoring options through interactive menu or direct parameter
    #   Displays server status, exports, connections, statistics, and logs
    #   Supports both individual checks and comprehensive system overview
    #   Uses systemctl, exportfs, ss, nfsstat, and journalctl for data collection
    # Dependencies:
    #   - systemctl command for service status
    #   - exportfs command for export information
    #   - ss command for network connections
    #   - nfsstat command for NFS statistics
    #   - ps command for process information
    #   - journalctl command for log access
    #   - df command for mount point information
    #   - rpcinfo command for RPC information
    #   - aux_mev function for interactive input
    #   - aux_nos function for completion notification
    # Arguments:
    #   $1: option - monitoring option number (1-9) or descriptive text
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local option="$1"

    # If menu option provided, show interactive menu
    if [ "$option" = "menu" ] || [ "$option" = "0" ]; then
        echo "NFS Monitoring Options:"
        echo "1. Show NFS server status"
        echo "2. Display current NFS exports"
        echo "3. Show active NFS connections"
        echo "4. Display NFS statistics"
        echo "5. Check NFS-related processes"
        echo "6. View recent NFS server logs"
        echo "7. Show NFS mount points"
        echo "8. Display RPC information"
        echo "9. All of the above"
        aux_mev "option" "Enter option number" "9"
    fi

    case "$option" in
        1|"Show NFS server status")
            echo "NFS Server Status:"
            systemctl status nfs-server
            ;;
        2|"Display current NFS exports")
            echo "Current NFS Exports:"
            exportfs -v
            ;;
        3|"Show active NFS connections")
            echo "Active NFS Connections:"
            ss -tna | grep :2049
            ;;
        4|"Display NFS statistics")
            echo "NFS Statistics:"
            nfsstat
            ;;
        5|"Check NFS-related processes")
            echo "NFS-related Processes:"
            ps aux | grep -E 'nfs|rpc'
            ;;
        6|"View recent NFS server logs")
            echo "Recent NFS Server Logs:"
            journalctl -u nfs-server -n 50
            ;;
        7|"Show NFS mount points")
            echo "NFS Mount Points:"
            df -h | grep nfs
            ;;
        8|"Display RPC information")
            echo "RPC Information:"
            rpcinfo -p
            ;;
        9|"All of the above")
            for i in {1..8}; do
                nfs_mon "$i"
                echo "----------------------------------------"
            done
            ;;
        *)
            echo "Invalid option: $option"
            aux_use
            return 1
            ;;
    esac

    aux_nos "$function_name" "NFS monitoring completed"
}

# Sets up a Samba share by prompting for missing configuration details and applying the configuration. Handles various share parameters including permissions, guest access, and file masks
# samba setup
# <smb_header> <shared_folder> <username> <smb_password> <writable_yesno> <guestok_yesno> <browseable_yesno> <create_mask> <dir_mask> <force_user> <force_group>
smb_set() {
    # Technical Description:
    #   Interactive Samba share setup function with comprehensive parameter collection
    #   Prompts user for missing configuration parameters using aux_mev utility
    #   Handles both user-specific and 'nobody' share configurations
    #   Validates required fields and delegates to smb_apl for actual configuration
    #   Enforces password requirement for non-anonymous shares
    # Dependencies:
    #   - aux_mev function for interactive parameter collection
    #   - smb_apl function for configuration application
    #   - aux_nos function for success notification
    #   - Standard POSIX shell utilities
    # Arguments:
    #   $1: smb_header - share name/identifier in Samba configuration
    #   $2: shared_folder - absolute path to directory to be shared
    #   $3: username - Samba username for access (or 'nobody' for guest access)
    #   $4: smb_password - password for Samba user authentication
    #   $5: writable_yesno - whether share is writable (yes/no)
    #   $6: guestok_yesno - whether guest access is allowed (yes/no)
    #   $7: browseable_yesno - whether share appears in network browsing (yes/no)
    #   $8: create_mask - file creation permission mask (e.g., 0744)
    #   $9: dir_mask - directory creation permission mask (e.g., 0755)
    #   $10: force_user - force all operations as this user
    #   $11: force_group - force all operations as this group
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 11 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
	local smb_header="$1"
	local shared_folder="$2"
	local username="$3"
	local smb_password="$4"
	local writable_yesno="$5"
	local guestok_yesno="$6"
	local browseable_yesno="$7"
	local create_mask="$8"
	local dir_mask="$9"
	local force_user="${10}"
	local force_group="${11}"

    # Prompt for missing inputs
    aux_mev "smb_header" "Enter Samba header" "$smb_header"
    aux_mev "shared_folder" "Enter path to shared folder" "$shared_folder"

    if [ "$smb_header" != "nobody" ]; then
        aux_mev "username" "Enter Samba username" "$username"

        while [ -z "$smb_password" ]; do
            aux_mev "smb_password" "Enter Samba password (cannot be empty)" "$smb_password"
        done
    fi

    # Apply the Samba configuration
    smb_apl "$smb_header" "$shared_folder" "$username" "$smb_password" "$writable_yesno" "$guestok_yesno" "$browseable_yesno" "$create_mask" "$dir_mask" "$force_user" "$force_group"
    aux_nos "$function_name" "Samba setup complete"
}

# Applies Samba configuration by creating the shared folder if needed, updating cfg/env/site. with share details, restarting the Samba service, and setting up user passwords. Supports both user-specific and 'nobody' shares
# samba apply config
# <smb_header> <shared_folder> <username> <smb_password> <writable_yesno> <guestok_yesno> <browseable_yesno> <create_mask> <dir_mask> <force_user> <force_group>
smb_apl() {
    # Technical Description:
    #   Direct Samba configuration application function without user interaction
    #   Creates shared directory with appropriate permissions if it doesn't exist
    #   Updates /etc/samba/smb.conf with new share configuration block
    #   Manages user authentication through smbpasswd for non-guest shares
    #   Restarts Samba services to apply configuration changes
    #   Performs duplicate detection to avoid configuration conflicts
    # Dependencies:
    #   - mkdir command for directory creation
    #   - chmod command for permission setting
    #   - grep command for duplicate detection
    #   - tee command for file writing
    #   - systemctl command for service management
    #   - id command for user existence checking
    #   - smbpasswd command for user password management
    #   - Root privileges for system configuration
    # Arguments:
    #   $1: smb_header - share name/identifier in Samba configuration
    #   $2: shared_folder - absolute path to directory to be shared
    #   $3: username - Samba username for access (or 'nobody' for guest access)
    #   $4: smb_password - password for Samba user authentication
    #   $5: writable_yesno - whether share is writable (yes/no)
    #   $6: guestok_yesno - whether guest access is allowed (yes/no)
    #   $7: browseable_yesno - whether share appears in network browsing (yes/no)
    #   $8: create_mask - file creation permission mask (e.g., 0744)
    #   $9: dir_mask - directory creation permission mask (e.g., 0755)
    #   $10: force_user - force all operations as this user
    #   $11: force_group - force all operations as this group
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 11 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
	local smb_header="$1"
	local shared_folder="$2"
    	local username="$3"
    	local smb_password="$4"
    	local writable_yesno="$5"
    	local guestok_yesno="$6"
    	local browseable_yesno="$7"
	local create_mask="$8"
	local dir_mask="$9"
	local force_user="${10}"
	local force_group="${11}"

    # Check if the shared folder exists, create it if not
    if [ ! -d "$shared_folder" ]; then
        mkdir -p "$shared_folder"
        chmod -R 777 "$shared_folder"
        echo "Shared folder created: $shared_folder"
    fi

    # Check if the Samba configuration block already exists in cfg/env/site.
    if grep -qF "[$smb_header]" /etc/samba/smb.conf; then
        echo "Samba configuration block already exists in cfg/env/site. Skipping addition."
    else
        # Append Samba configuration lines to cfg/env/site.
        {
            echo "[$smb_header]"
            echo "    path = $shared_folder"
            echo "    writable = $writable_yesno"
            echo "    guest ok = $guestok_yesno"
            echo "    browseable = $browseable_yesno"
            echo "    create mask = $create_mask"
            echo "    dir mask = $dir_mask"
            echo "    force user = $force_user"
            echo "    force group = $force_group"
        } | tee -a /etc/samba/smb.conf > /dev/null
        echo "Samba configuration block added to cfg/env/site."
    fi

    # Restart Samba
    systemctl restart smb

    # Set Samba user password only if smb_header is not "nobody"
    if [ "$smb_header" != "nobody" ]; then
        if id -u "$username" > /dev/null 2>&1; then
            echo -e "$smb_password\n$smb_password" | smbpasswd -a -s "$username"
        else
            echo "User $username does not exist. Please create the user before setting Samba password."
        fi
    else
        echo "Skipping password setup for the nobody section."
    fi

    # Print confirmation message
    echo "Samba server configured. Shared folder: $shared_folder"
    aux_nos "$function_name" "Samba configuration applied"
}

# Monitors and displays various aspects of the SMB server
# smb monitor
# <option>
smb_mon() {
    # Technical Description:
    #   Comprehensive SMB/Samba server monitoring and status reporting function
    #   Provides multiple monitoring options through interactive menu or direct parameter
    #   Displays server status, shares, connections, configuration, and logs
    #   Supports both individual checks and comprehensive system overview
    #   Uses systemctl, smbstatus, testparm, and journalctl for data collection
    # Dependencies:
    #   - systemctl command for service status
    #   - smbstatus command for share and connection information
    #   - testparm command for configuration validation
    #   - ps command for process information
    #   - journalctl command for log access
    #   - smbd command for version information
    #   - pdbedit command for user management
    #   - aux_mev function for interactive input
    #   - aux_nos function for completion notification
    # Arguments:
    #   $1: option - monitoring option number (1-9) or descriptive text
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local option="$1"

    # If menu option provided, show interactive menu
    if [ "$option" = "menu" ] || [ "$option" = "0" ]; then
        echo "SMB Monitoring Options:"
        echo "1. Show SMB server status"
        echo "2. Display current SMB shares"
        echo "3. Show active SMB connections"
        echo "4. Display SMB server configuration"
        echo "5. Check SMB-related processes"
        echo "6. View recent SMB server logs"
        echo "7. Show SMB version information"
        echo "8. Display SMB user list"
        echo "9. All of the above"
        aux_mev "option" "Enter option number" "9"
    fi

    case "$option" in
        1|"Show SMB server status")
            echo "SMB Server Status:"
            systemctl status smbd
            ;;
        2|"Display current SMB shares")
            echo "Current SMB Shares:"
            smbstatus --shares
            ;;
        3|"Show active SMB connections")
            echo "Active SMB Connections:"
            smbstatus --processes
            ;;
        4|"Display SMB server configuration")
            echo "SMB Server Configuration:"
            testparm -s
            ;;
        5|"Check SMB-related processes")
            echo "SMB-related Processes:"
            ps aux | grep -E 'smb|nmb|winbind'
            ;;
        6|"View recent SMB server logs")
            echo "Recent SMB Server Logs:"
            journalctl -u smbd -n 50
            ;;
        7|"Show SMB version information")
            echo "SMB Version Information:"
            smbd --version
            ;;
        8|"Display SMB user list")
            echo "SMB User List:"
            pdbedit -L -v
            ;;
        9|"All of the above")
            for i in {1..8}; do
                smb_mon "$i"
                echo "----------------------------------------"
            done
            ;;
        *)
            echo "Invalid option: $option"
            aux_use
            return 1
            ;;
    esac

    aux_nos "$function_name" "SMB monitoring completed"
}

