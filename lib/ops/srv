#!/bin/bash

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Displays an overview of specific NFS-related functions in the script, showing their usage, shortname, and description
# overview functions
# [function_name_filter]
srv_fun() {
    # Technical Description:
    #   Extracts and displays function information from the srv module file
    #   Uses ana_laf utility to parse function definitions and comments
    #   Provides formatted output showing function names, descriptions, and usage
    #   Supports optional filtering by function name pattern
    # Dependencies:
    #   - ana_laf function for parsing and formatting
    #   - Read access to srv module file
    #   - Standard POSIX shell utilities
    # Arguments:
    #   $1: [function_name_filter] - optional pattern to filter functions (default: show all)
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    ana_laf "$FILEPATH_srv" "$@"
}
# Displays an overview of NFS-specific variables defined in the configuration file, showing their names, values, and usage across different files
# overview variables
# -x (execute)
srv_var() {
    # Technical Description:
    #   Scans configuration files and related directories for srv-related variables
    #   Uses ana_acu utility with overview flag to extract variable definitions
    #   Displays variable names, values, and their usage context
    #   Provides comprehensive view of configuration state for troubleshooting
    # Dependencies:
    #   - ana_acu function for configuration analysis
    #   - Read access to configuration files and directories
    #   - Standard POSIX shell utilities
    # Arguments:
    #   $1: -x - explicit execution flag required for consistency
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ] || [ "$1" != "-x" ]; then
        aux_use
        return 1
    fi
    
    ana_acu -o "$CONFIG_srv" "$DIR_FUN/.."
}

# Sets up an NFS share by configuring export parameters and applying settings
# nfs setup
# <nfs_header> <shared_folder> <nfs_options>
srv_nfs_set() {
    # Technical Description:
    #   High-level NFS share setup function that orchestrates complete share configuration
    #   Validates all required parameters using auxiliary validation functions
    #   Delegates actual configuration work to srv_nfs_apl for implementation
    #   Provides user-friendly interface with comprehensive error handling and logging
    #   Ensures all parameters are properly validated before configuration begins
    # Dependencies:
    #   - srv_nfs_apl function for actual NFS configuration implementation
    #   - aux_val function for parameter validation
    #   - aux_err, aux_info functions for operational logging
    #   - aux_use function for usage display on errors
    #   - Standard POSIX shell utilities for variable handling
    # Arguments:
    #   $1: nfs_header - identifier/name for the NFS export entry
    #   $2: shared_folder - absolute path to directory to be shared via NFS
    #   $3: nfs_options - NFS export options string (e.g., "*(rw,sync,no_subtree_check)")
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 3 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local nfs_header="$1"
    local shared_folder="$2"
    local nfs_options="$3"

    # Parameter validation
    if ! aux_val "$nfs_header" "not_empty"; then
        aux_err "NFS header cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$shared_folder" "not_empty"; then
        aux_err "Shared folder path cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$nfs_options" "not_empty"; then
        aux_err "NFS options cannot be empty"
        aux_use
        return 1
    fi

    aux_info "Starting NFS share setup" "header=$nfs_header,folder=$shared_folder"
    
    # Apply the NFS configuration
    srv_nfs_apl "$nfs_header" "$shared_folder" "$nfs_options"
    aux_info "NFS setup completed successfully" "header=$nfs_header"
}

# Applies NFS configuration by updating exports and restarting services
# nfs apply config
# <nfs_header> <shared_folder> <nfs_options>
srv_nfs_apl() {
    # Technical Description:
    #   Low-level NFS configuration implementation function that performs actual system changes
    #   Validates parameters and checks for required system dependencies before proceeding
    #   Creates shared directory with appropriate permissions (777) if it doesn't exist
    #   Updates /etc/exports file with new NFS export entry using atomic operations
    #   Performs duplicate detection to prevent configuration conflicts in exports file
    #   Restarts NFS services using exportfs and systemctl to apply configuration changes
    #   Provides comprehensive error handling with detailed logging throughout the process
    # Dependencies:
    #   - aux_val, aux_chk, aux_info, aux_err, aux_warn, aux_cmd functions for operations
    #   - exportfs command for NFS export management and validation
    #   - systemctl command for NFS service management (nfs-server)
    #   - mkdir command for directory creation with -p flag support
    #   - chmod command for setting directory permissions
    #   - grep command for duplicate detection in configuration files
    #   - tee command for atomic file writing operations
    #   - touch command for creating missing configuration files
    #   - Root privileges required for system configuration and service management
    # Arguments:
    #   $1: nfs_header - identifier/name for the NFS export entry
    #   $2: shared_folder - absolute path to directory to be shared via NFS
    #   $3: nfs_options - NFS export options string (e.g., "*(rw,sync,no_subtree_check)")
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 3 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local nfs_header="$1"
    local shared_folder="$2"
    local nfs_options="$3"

    # Parameter validation
    if ! aux_val "$nfs_header" "not_empty"; then
        aux_err "NFS header cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$shared_folder" "not_empty"; then
        aux_err "Shared folder path cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "exportfs"; then
        aux_err "exportfs command not found - NFS utilities required"
        return 127
    fi
    
    if ! aux_chk "command" "systemctl"; then
        aux_err "systemctl command not found - systemd required"
        return 127
    fi
    
    if ! aux_chk "file_exists" "/etc/exports"; then
        aux_warn "Creating /etc/exports file"
        touch /etc/exports
    fi

    aux_info "Applying NFS configuration" "header=$nfs_header,folder=$shared_folder"

    # Check if the shared folder exists, create it if not
    if [ ! -d "$shared_folder" ]; then
        if aux_cmd "mkdir" "-p" "$shared_folder"; then
            aux_cmd "chmod" "-R" "777" "$shared_folder"
            aux_info "Shared folder created" "path=$shared_folder"
        else
            aux_err "Failed to create shared folder" "path=$shared_folder"
            return 2
        fi
    fi

    # Check if the NFS export already exists in /etc/exports
    if grep -qF "$shared_folder" /etc/exports; then
        aux_warn "NFS export already exists in /etc/exports" "path=$shared_folder"
    else
        # Append NFS export line to /etc/exports
        if echo "$shared_folder $nfs_options" | tee -a /etc/exports > /dev/null; then
            aux_info "NFS export added to /etc/exports" "path=$shared_folder"
        else
            aux_err "Failed to update /etc/exports" "path=$shared_folder"
            return 2
        fi
    fi

    # Restart NFS server
    aux_info "Restarting NFS services"
    if aux_cmd "exportfs" "-ra" && aux_cmd "systemctl" "restart" "nfs-server"; then
        aux_info "NFS server configured successfully" "folder=$shared_folder"
    else
        aux_err "Failed to restart NFS services"
        return 2
    fi
}

# Monitors and displays comprehensive NFS server status and statistics
# nfs monitor
# <option>
srv_nfs_mon() {
    # Technical Description:
    #   Comprehensive NFS server monitoring and status reporting function
    #   Provides multiple monitoring options through interactive menu or direct parameter
    #   Displays server status, exports, connections, statistics, and logs
    #   Supports both individual checks and comprehensive system overview
    #   Uses systemctl, exportfs, ss, nfsstat, and journalctl for data collection
    # Dependencies:
    #   - systemctl command for service status
    #   - exportfs command for export information
    #   - ss command for network connections
    #   - nfsstat command for NFS statistics
    #   - ps command for process information
    #   - journalctl command for log access
    #   - df command for mount point information
    #   - rpcinfo command for RPC information
    #   - aux_log function for completion notification
    # Arguments:
    #   $1: option - monitoring option number (1-9) or descriptive text
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local option="$1"
    
    # Parameter validation
    if ! aux_val "$option" "not_empty"; then
        aux_err "Monitoring option cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency checks for monitoring commands
    local missing_deps=()
    if ! aux_chk "command" "systemctl"; then
        missing_deps+=("systemctl")
    fi
    if ! aux_chk "command" "exportfs"; then
        missing_deps+=("exportfs") 
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        aux_err "Missing required dependencies: ${missing_deps[*]}"
        return 127
    fi

    # If menu option provided, show interactive menu
    if [ "$option" = "menu" ] || [ "$option" = "0" ]; then
        echo "NFS Monitoring Options:"
        echo "1. Show NFS server status"
        echo "2. Display current NFS exports"
        echo "3. Show active NFS connections"
        echo "4. Display NFS statistics"
        echo "5. Check NFS-related processes"
        echo "6. View recent NFS server logs"
        echo "7. Show NFS mount points"
        echo "8. Display RPC information"
        echo "9. All of the above"
        option="9"
    fi

    case "$option" in
        1|"Show NFS server status")
            echo "NFS Server Status:"
            systemctl status nfs-server
            ;;
        2|"Display current NFS exports")
            echo "Current NFS Exports:"
            exportfs -v
            ;;
        3|"Show active NFS connections")
            echo "Active NFS Connections:"
            ss -tna | grep :2049
            ;;
        4|"Display NFS statistics")
            echo "NFS Statistics:"
            nfsstat
            ;;
        5|"Check NFS-related processes")
            echo "NFS-related Processes:"
            ps aux | grep -E 'nfs|rpc'
            ;;
        6|"View recent NFS server logs")
            echo "Recent NFS Server Logs:"
            journalctl -u nfs-server -n 50
            ;;
        7|"Show NFS mount points")
            echo "NFS Mount Points:"
            df -h | grep nfs
            ;;
        8|"Display RPC information")
            echo "RPC Information:"
            rpcinfo -p
            ;;
        9|"All of the above")
            for i in {1..8}; do
                srv_nfs_mon "$i"
                echo "----------------------------------------"
            done
            ;;
        *)
            aux_err "Invalid monitoring option: $option"
            aux_use
            return 1
            ;;
    esac

    aux_info "NFS monitoring completed" "option=$option"
}

# Sets up a Samba share with comprehensive configuration parameters
# samba setup
# <smb_header> <shared_folder> <username> <smb_password> <writable_yesno> <guestok_yesno> <browseable_yesno> <create_mask> <dir_mask> <force_user> <force_group>
srv_smb_set() {
    # Technical Description:
    #   High-level Samba share setup function that orchestrates complete SMB share configuration
    #   Validates all 11 required parameters using auxiliary validation functions
    #   Supports both authenticated user shares and anonymous guest shares
    #   Handles comprehensive share parameters including permissions, access controls, and security settings
    #   Delegates actual configuration implementation to srv_smb_apl for system-level changes
    #   Provides user-friendly interface with detailed error handling and operational logging
    # Dependencies:
    #   - srv_smb_apl function for actual Samba configuration implementation
    #   - aux_val function for parameter validation and input checking
    #   - aux_err, aux_info functions for operational logging and error reporting
    #   - aux_use function for usage display when validation fails
    #   - Standard POSIX shell utilities for variable handling and assignment
    # Arguments:
    #   $1: smb_header - share name/identifier that appears in Samba configuration
    #   $2: shared_folder - absolute path to directory to be shared via SMB
    #   $3: username - Samba username for access control (or 'nobody' for guest access)
    #   $4: smb_password - password for Samba user authentication and access
    #   $5: writable_yesno - whether share allows write access (yes/no)
    #   $6: guestok_yesno - whether anonymous guest access is permitted (yes/no)
    #   $7: browseable_yesno - whether share appears in network browsing lists (yes/no)
    #   $8: create_mask - octal permission mask for new file creation (e.g., 0744)
    #   $9: dir_mask - octal permission mask for new directory creation (e.g., 0755)
    #   $10: force_user - force all file operations to run as this system user
    #   $11: force_group - force all file operations to run as this system group
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 11 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
	local smb_header="$1"
	local shared_folder="$2"
	local username="$3"
	local smb_password="$4"
	local writable_yesno="$5"
	local guestok_yesno="$6"
	local browseable_yesno="$7"
	local create_mask="$8"
	local dir_mask="$9"
	local force_user="${10}"
	local force_group="${11}"

    # Parameter validation
    if ! aux_val "$smb_header" "not_empty"; then
        aux_err "Samba header cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$shared_folder" "not_empty"; then
        aux_err "Shared folder path cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$username" "not_empty"; then
        aux_err "Username cannot be empty"
        aux_use
        return 1
    fi

    aux_info "Starting Samba share setup" "header=$smb_header,folder=$shared_folder,user=$username"

    # Apply the Samba configuration
    srv_smb_apl "$smb_header" "$shared_folder" "$username" "$smb_password" "$writable_yesno" "$guestok_yesno" "$browseable_yesno" "$create_mask" "$dir_mask" "$force_user" "$force_group"
    aux_info "Samba setup completed successfully" "header=$smb_header"
}

# Applies Samba configuration by updating smb.conf and managing user authentication
# samba apply config
# <smb_header> <shared_folder> <username> <smb_password> <writable_yesno> <guestok_yesno> <browseable_yesno> <create_mask> <dir_mask> <force_user> <force_group>
srv_smb_apl() {
    # Technical Description:
    #   Low-level Samba configuration implementation function that performs actual system changes
    #   Validates parameters and checks for required Samba system dependencies before proceeding
    #   Creates shared directory with appropriate permissions (777) if it doesn't exist
    #   Updates /etc/samba/smb.conf with comprehensive share configuration block
    #   Manages user authentication through smbpasswd for authenticated shares
    #   Handles both user-specific and anonymous guest share configurations appropriately
    #   Restarts Samba services using systemctl to apply all configuration changes
    #   Performs duplicate detection to prevent configuration conflicts in smb.conf
    #   Provides comprehensive error handling with detailed logging throughout the process
    # Dependencies:
    #   - aux_val, aux_chk, aux_info, aux_err, aux_warn, aux_cmd functions for operations
    #   - systemctl command for Samba service management (smb/smbd)
    #   - smbpasswd command for Samba user password management and authentication
    #   - mkdir command for directory creation with -p flag support
    #   - chmod command for setting directory permissions to 777
    #   - grep command for duplicate detection in Samba configuration files
    #   - tee command for atomic file writing operations to smb.conf
    #   - id command for system user existence validation
    #   - echo command for password input to smbpasswd via pipe
    #   - Root privileges required for system configuration and service management
    #   - /etc/samba/smb.conf file must exist and be writable
    # Arguments:
    #   $1: smb_header - share name/identifier that appears in Samba configuration
    #   $2: shared_folder - absolute path to directory to be shared via SMB
    #   $3: username - Samba username for access control (or 'nobody' for guest access)
    #   $4: smb_password - password for Samba user authentication and access
    #   $5: writable_yesno - whether share allows write access (yes/no)
    #   $6: guestok_yesno - whether anonymous guest access is permitted (yes/no)
    #   $7: browseable_yesno - whether share appears in network browsing lists (yes/no)
    #   $8: create_mask - octal permission mask for new file creation (e.g., 0744)
    #   $9: dir_mask - octal permission mask for new directory creation (e.g., 0755)
    #   $10: force_user - force all file operations to run as this system user
    #   $11: force_group - force all file operations to run as this system group
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 11 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
	local smb_header="$1"
	local shared_folder="$2"
    	local username="$3"
    	local smb_password="$4"
    	local writable_yesno="$5"
    	local guestok_yesno="$6"
    	local browseable_yesno="$7"
	local create_mask="$8"
	local dir_mask="$9"
	local force_user="${10}"
	local force_group="${11}"

    # Parameter validation
    if ! aux_val "$smb_header" "not_empty"; then
        aux_err "Samba header cannot be empty"
        aux_use
        return 1
    fi
    
    if ! aux_val "$shared_folder" "not_empty"; then
        aux_err "Shared folder path cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency checks
    if ! aux_chk "command" "systemctl"; then
        aux_err "systemctl command not found - systemd required"
        return 127
    fi
    
    if ! aux_chk "command" "smbpasswd"; then
        aux_err "smbpasswd command not found - Samba utilities required"
        return 127
    fi
    
    if ! aux_chk "file_exists" "/etc/samba/smb.conf"; then
        aux_err "Samba configuration file not found: /etc/samba/smb.conf"
        return 2
    fi

    aux_info "Applying Samba configuration" "header=$smb_header,folder=$shared_folder,user=$username"

    # Check if the shared folder exists, create it if not
    if [ ! -d "$shared_folder" ]; then
        if aux_cmd "mkdir" "-p" "$shared_folder"; then
            aux_cmd "chmod" "-R" "777" "$shared_folder"
            aux_info "Shared folder created" "path=$shared_folder"
        else
            aux_err "Failed to create shared folder" "path=$shared_folder"
            return 2
        fi
    fi

    # Check if the Samba configuration block already exists in smb.conf
    if grep -qF "[$smb_header]" /etc/samba/smb.conf; then
        aux_warn "Samba configuration block already exists" "header=$smb_header"
    else
        # Append Samba configuration lines to smb.conf
        if {
            echo "[$smb_header]"
            echo "    path = $shared_folder"
            echo "    writable = $writable_yesno"
            echo "    guest ok = $guestok_yesno"
            echo "    browseable = $browseable_yesno"
            echo "    create mask = $create_mask"
            echo "    dir mask = $dir_mask"
            echo "    force user = $force_user"
            echo "    force group = $force_group"
        } | tee -a /etc/samba/smb.conf > /dev/null; then
            aux_info "Samba configuration block added" "header=$smb_header"
        else
            aux_err "Failed to update Samba configuration" "header=$smb_header"
            return 2
        fi
    fi

    # Restart Samba
    aux_info "Restarting Samba service"
    if aux_cmd "systemctl" "restart" "smb"; then
        aux_info "Samba service restarted successfully"
    else
        aux_err "Failed to restart Samba service"
        return 2
    fi

    # Set Samba user password only if smb_header is not "nobody"
    if [ "$smb_header" != "nobody" ]; then
        if aux_chk "command" "id" && id -u "$username" > /dev/null 2>&1; then
            aux_info "Setting Samba password for user" "user=$username"
            if echo -e "$smb_password\n$smb_password" | smbpasswd -a -s "$username"; then
                aux_info "Samba password set successfully" "user=$username"
            else
                aux_err "Failed to set Samba password" "user=$username"
                return 2
            fi
        else
            aux_err "User does not exist on system" "user=$username"
            return 2
        fi
    else
        aux_info "Skipping password setup for anonymous share"
    fi

    aux_info "Samba server configured successfully" "folder=$shared_folder,header=$smb_header"
}

# Monitors and displays comprehensive SMB server status and statistics
# smb monitor
# <option>
srv_smb_mon() {
    # Technical Description:
    #   Comprehensive SMB/Samba server monitoring and status reporting function
    #   Provides multiple monitoring options through interactive menu or direct parameter
    #   Displays server status, shares, connections, configuration, and logs
    #   Supports both individual checks and comprehensive system overview
    #   Uses systemctl, smbstatus, testparm, and journalctl for data collection
    # Dependencies:
    #   - systemctl command for service status
    #   - smbstatus command for share and connection information
    #   - testparm command for configuration validation
    #   - ps command for process information
    #   - journalctl command for log access
    #   - smbd command for version information
    #   - pdbedit command for user management
    #   - aux_log function for completion notification
    # Arguments:
    #   $1: option - monitoring option number (1-9) or descriptive text
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 1 ]; then
        aux_use
        return 1
    fi
    
    local function_name="${FUNCNAME[0]}"
    local option="$1"
    
    # Parameter validation
    if ! aux_val "$option" "not_empty"; then
        aux_err "Monitoring option cannot be empty"
        aux_use
        return 1
    fi
    
    # Dependency checks for monitoring commands
    local missing_deps=()
    if ! aux_chk "command" "systemctl"; then
        missing_deps+=("systemctl")
    fi
    if ! aux_chk "command" "smbstatus"; then
        missing_deps+=("smbstatus")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        aux_err "Missing required dependencies: ${missing_deps[*]}"
        return 127
    fi

    # If menu option provided, show interactive menu
    if [ "$option" = "menu" ] || [ "$option" = "0" ]; then
        echo "SMB Monitoring Options:"
        echo "1. Show SMB server status"
        echo "2. Display current SMB shares"
        echo "3. Show active SMB connections"
        echo "4. Display SMB server configuration"
        echo "5. Check SMB-related processes"
        echo "6. View recent SMB server logs"
        echo "7. Show SMB version information"
        echo "8. Display SMB user list"
        echo "9. All of the above"
        option="9"
    fi

    case "$option" in
        1|"Show SMB server status")
            echo "SMB Server Status:"
            systemctl status smbd
            ;;
        2|"Display current SMB shares")
            echo "Current SMB Shares:"
            smbstatus --shares
            ;;
        3|"Show active SMB connections")
            echo "Active SMB Connections:"
            smbstatus --processes
            ;;
        4|"Display SMB server configuration")
            echo "SMB Server Configuration:"
            testparm -s
            ;;
        5|"Check SMB-related processes")
            echo "SMB-related Processes:"
            ps aux | grep -E 'smb|nmb|winbind'
            ;;
        6|"View recent SMB server logs")
            echo "Recent SMB Server Logs:"
            journalctl -u smbd -n 50
            ;;
        7|"Show SMB version information")
            echo "SMB Version Information:"
            smbd --version
            ;;
        8|"Display SMB user list")
            echo "SMB User List:"
            pdbedit -L -v
            ;;
        9|"All of the above")
            for i in {1..8}; do
                srv_smb_mon "$i"
                echo "----------------------------------------"
            done
            ;;
        *)
            aux_err "Invalid monitoring option: $option"
            aux_use
            return 1
            ;;
    esac

    aux_info "SMB monitoring completed" "option=$option"
}

