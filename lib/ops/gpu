#!/bin/bash

# ============================================================================
# gpu - Function Summary
#
#   gpu-fun : Shows a summary of selected functions in the script.
#   gpu-var : Displays an overview of specific variables defined in the configuration file.
#   gpu-pt1 : Configures initial GRUB and EFI settings for GPU passthrough, installs packages, and reboots.
#   gpu-pt2 : Adds kernel modules for GPU passthrough, updates initramfs, and reboots.
#   gpu-pt3 : Finalizes or reverts GPU passthrough setup (VFIO-PCI IDs, blacklisting drivers).
#   gpu-ptd : Detaches the GPU from the host system for VM passthrough.
#   gpu-pta : Attaches the GPU back to the host system.
#   gpu-pts : Checks the current status of the GPU passthrough setup.
#
# ============================================================================

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# Shows a summary of selected functions in the script, displaying their usage, shortname, and description
# overview functions
#
gpu-fun() {

    # Technical Description:
    #   Lists selected functions from this script.
    #   Displays usage, shortname, and description for each.
    #   Likely parses comments or uses a predefined list.
    # Dependencies:
    #   - Relies on conventions for function comments if parsing.

    # Pass all arguments directly to aux-laf
    aux-laf "$FILEPATH_gpu" "$@"
}

# Displays an overview of specific variables defined in the configuration file, showing their names, values, and usage across different files
# overview variables
#
gpu-var() {

    # Technical Description:
    #   Shows details of configuration variables.
    #   Information includes name, value, and usage context.
    #   Likely reads from SITE_CONFIG_FILE and parses it.
    # Dependencies:
    #   - SITE_CONFIG_FILE environment variable.
    #   - Text processing tools (e.g. `grep`, `awk`).

    aux-acu -o "$CONFIG_gpu" "$DIR_FUN/.."
}

# Configures initial GRUB and EFI settings for GPU passthrough, installs necessary packages, and reboots the system
# gpu passthrough step 1
#
gpu-pt1() {
    local function_name="${FUNCNAME[0]}"
    echo "Executing section 1:"

    # Display EFI boot information
    efibootmgr -v

    # Edit GRUB configuration
    sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT="quiet iommu=pt"/' /etc/default/grub
    update-grub
    update-grug2

    # Technical Description:
    #   Installs 'grub-efi-amd64' package for EFI systems.
    #   Notifies completion using 'aux-nos', using 'function_name'.
    #   Forces a system reboot. This is step 1 of GPU passthrough setup.
    # Dependencies:
    #   - `apt` command for package installation.
    #   - `aux-nos` function (for notifications).
    #   - `reboot` command.
    #   - Root privileges for apt and reboot.

    # Install grub-efi-amd64
    apt install grub-efi-amd64 -y

    # Notify status
    aux-nos "$function_name" "Completed section 1, system will reboot now."

    # Perform system reboot without prompting
    reboot
}

# Adds necessary kernel modules for GPU passthrough to /etc/modules, updates initramfs, and reboots the system
# gpu passthrough step 2
#
gpu-pt2() {
    local function_name="${FUNCNAME[0]}"
    echo "Executing section 2:"

    # Technical Description:
    #   Appends 'vfio', 'vfio_iommu_type1', 'vfio_pci' to /etc/modules.
    #   Updates initramfs for all kernels. Notifies completion via 'aux-nos'.
    #   Forces a system reboot. This is step 2 of GPU passthrough setup.
    # Dependencies:
    #   - `echo` (to modify /etc/modules), `update-initramfs`.
    #   - `aux-nos` function.
    #   - `reboot` command.
    #   - Root privileges for file edits and reboot.
    #   - Assumes /etc/modules is the correct file for loading modules.

    # Add modules to /etc/modules
    echo "vfio" >> /etc/modules
    echo "vfio_iommu_type1" >> /etc/modules
    echo "vfio_pci" >> /etc/modules

    # Update initramfs
    update-initramfs -u -k all

    # Notify status
    aux-nos "$function_name" "Completed section 2, system will reboot now."

    # Perform system reboot without prompting
    reboot
}

# Finalizes or reverts GPU passthrough setup by configuring or removing VFIO-PCI IDs and blacklisting specific GPU drivers
# gpu passthrough step 3
# <enable|disable>
gpu-pt3() {
    local function_name="${FUNCNAME[0]}"
    local action="$1"

    # Technical Description:
    #   Manages VFIO config & GPU driver blacklisting based on $1 ('enable'/'disable').
    #   'enable': Configures VFIO, blacklists radeon/amdgpu drivers. Uses temp file.
    #   'disable': Removes VFIO config and driver blacklisting.
    #   Notifies completion via 'aux-nos' and forces a system reboot.
    #   Input: $1 must be 'enable' or 'disable'.
    # Dependencies:
    #   - `lspci`, `grep`, `rm`, `sed`, `echo`.
    #   - `aux-nos` function, `reboot` command.
    #   - Root privileges. Expects $1 as argument.

    if [ "$action" != "enable" ] && [ "$action" != "disable" ]; then
        echo "Usage: $function_name <enable|disable>"
        return 1
    fi

    echo "Executing section 3 ($action mode):"

    vfio_conf="/etc/modprobe.d/vfio.conf"
    blacklist_conf="/etc/modprobe.d/blacklist.conf"

    if [ "$action" == "enable" ]; then
        # Enable GPU passthrough

        dmesg | grep -i vfio
        dmesg | grep 'remapping'

        # List NVIDIA and AMD devices using a temporary file for robustness
        LSPCI_TEMP_OUTPUT="/tmp/lspci_output.txt"
        if lspci -nn > "$LSPCI_TEMP_OUTPUT"; then
            grep 'NVIDIA' "$LSPCI_TEMP_OUTPUT"
            grep 'AMD' "$LSPCI_TEMP_OUTPUT"
        else
            echo "Error: lspci -nn command failed. Cannot list PCI devices."
        fi
        [ -f "$LSPCI_TEMP_OUTPUT" ] && rm -f "$LSPCI_TEMP_OUTPUT"

        # Configure VFIO
        if [ ! -f "$vfio_conf" ]; then
            # Prompt for the IDs input in the format ****:****,****:****
            read -p "Please enter the IDs in the format ****:****,****:****: " ids_input

            # Split the IDs based on comma
            IFS=',' read -ra id_list <<< "$ids_input"

            # Construct the line with the IDs
            options_line="options vfio-pci ids="

            # Build the line for each ID
            for id in "${id_list[@]}"
            do
                options_line+="$(echo "$id" | tr '\n' ',')"
            done

            # Remove the trailing comma
            options_line="${options_line%,}"

            # Append the line into the file
            echo "$options_line" >> "$vfio_conf"
        fi

        # Blacklist GPU drivers
        echo "blacklist radeon" >> "$blacklist_conf"
        echo "blacklist amdgpu" >> "$blacklist_conf"

        aux-nos "$function_name" "Completed section 3 (enable mode), system will reboot now."
    else
        # Disable GPU passthrough

        # Remove VFIO configuration
        if [ -f "$vfio_conf" ]; then
            rm "$vfio_conf"
            echo "Removed VFIO configuration file."
        else
            echo "VFIO configuration file not found. Skipping removal."
        fi

        # Remove GPU driver blacklisting
        if [ -f "$blacklist_conf" ]; then
            sed -i '/blacklist radeon/d' "$blacklist_conf"
            sed -i '/blacklist amdgpu/d' "$blacklist_conf"
            echo "Removed GPU driver blacklisting from $blacklist_conf."
        else
            echo "Blacklist configuration file not found. Skipping modification."
        fi

        aux-nos "$function_name" "Completed section 3 (disable mode), system will reboot now."
    fi

    # Perform system reboot without prompting
    reboot
}

# Detaches the GPU from the host system, making it available for VM passthrough
# gpu passthrough detach
#
gpu-ptd() {
    local function_name="${FUNCNAME[0]}"
    echo "--- Debug: Entering ${function_name} ---"

    # Technical Description:
    #   Detaches GPU(s) from host drivers for VM passthrough.
    #   Unloads standard GPU drivers (nouveau, nvidia, amdgpu, radeon).
    #   Loads 'vfio-pci' driver. Identifies GPUs via 'lspci -nn'.
    #   For each GPU: unbinds, sets 'driver_override' to 'vfio-pci', binds to 'vfio-pci'.
    #   Uses temp files for 'lspci' outputs. Notifies via 'aux-nos'.
    # Dependencies:
    #   - `lspci`, `grep`, `find`, `ls`, `modprobe`, `awk`, `echo`.
    #   - `aux-nos` function.
    #   - Access to /sys/kernel/iommu_groups/, /sys/bus/pci/devices/ & root privileges.

    echo "--- Debug: Current GPU driver and IOMMU group (before detachment) ---"
    LSPCI_NNK_TEMP_OUTPUT_1="/tmp/lspci_nnk_output_ptd1.txt"
    if lspci -nnk > "$LSPCI_NNK_TEMP_OUTPUT_1"; then
        grep -A3 "VGA compatible controller" "$LSPCI_NNK_TEMP_OUTPUT_1"
    else
        echo "Error: lspci -nnk command failed (first call)."
    fi
    [ -f "$LSPCI_NNK_TEMP_OUTPUT_1" ] && rm -f "$LSPCI_NNK_TEMP_OUTPUT_1"

    echo "--- Debug: Listing IOMMU groups and devices (before detachment) ---"
    for iommu_group in $(find /sys/kernel/iommu_groups/ -maxdepth 1 -mindepth 1 -type d); do
        echo "IOMMU Group ${iommu_group##*/}:"
        for device in $(ls -1 "$iommu_group"/devices/); do
            LSPCI_NNS_TEMP_OUTPUT_1="/tmp/lspci_nns_output_ptd1.txt"
            if lspci -nns "$device" > "$LSPCI_NNS_TEMP_OUTPUT_1"; then
                echo -e "\t$(cat "$LSPCI_NNS_TEMP_OUTPUT_1")"
            else
                echo -e "\tError: lspci -nns for $device failed."
            fi
            [ -f "$LSPCI_NNS_TEMP_OUTPUT_1" ] && rm -f "$LSPCI_NNS_TEMP_OUTPUT_1"
        done
    done

    echo "--- Debug: Unloading NVIDIA or AMD drivers ---"
    for driver in nouveau nvidia amdgpu radeon; do
        if lsmod | grep -q $driver; then
            echo "--- Debug: Unloading $driver driver ---"
            if ! modprobe -r $driver; then
                aux-nos "$function_name" "Warning: Failed to unload $driver driver. Continuing anyway."
            fi
        else
            echo "--- Debug: $driver driver not loaded. ---"
        fi
    done

    echo "--- Debug: Loading VFIO driver ---"
    if ! modprobe vfio-pci; then
        aux-nos "$function_name" "Error: Failed to load VFIO-PCI driver. GPU detachment may fail."
        echo "--- Debug: Exiting ${function_name} due to modprobe vfio-pci failure ---"
        return 1
    fi
    echo "--- Debug: VFIO-PCI driver loaded. ---"

    echo "--- Debug: Getting GPU PCI IDs ---"
    local gpu_ids="" # Initialize to empty
    LSPCI_NN_GPU_IDS_TEMP="/tmp/lspci_nn_gpu_ids_ptd.txt"
    if lspci -nn > "$LSPCI_NN_GPU_IDS_TEMP"; then
        # Attempt to populate gpu_ids, allowing the pipe between grep and awk for now
        gpu_ids_output=$(grep -iE "VGA compatible controller|3D controller" "$LSPCI_NN_GPU_IDS_TEMP" | awk '{print $1}')
        # Check if grep | awk succeeded (exit status 0) and produced non-empty output
        if [ $? -eq 0 ] && [ -n "$gpu_ids_output" ]; then
            gpu_ids="$gpu_ids_output"
            echo "--- Debug: Found GPU IDs: $gpu_ids ---"
        else
            echo "Warning: Could not extract GPU IDs from lspci output (grep/awk step in gpu-ptd)."
            # gpu_ids remains empty
        fi
    else
        echo "Error: lspci -nn command failed (for gpu_ids extraction in gpu-ptd)."
        # gpu_ids remains empty
    fi
    [ -f "$LSPCI_NN_GPU_IDS_TEMP" ] && rm -f "$LSPCI_NN_GPU_IDS_TEMP"

    if [ -z "$gpu_ids" ]; then
        aux-nos "$function_name" "Error: No GPU found after lspci processing."
        echo "--- Debug: Exiting ${function_name} as no GPU IDs found ---"
        return 1
    fi

    echo "--- Debug: Processing GPU IDs for detachment: $gpu_ids ---"
    for id in $gpu_ids; do
        echo "--- Debug: Processing GPU ID: $id ---"
        if [ -e "/sys/bus/pci/devices/0000:$id/driver" ]; then
            echo "--- Debug: Unbinding 0000:$id from current driver ---"
            echo "0000:$id" > /sys/bus/pci/devices/0000:$id/driver/unbind
        else
            echo "--- Debug: No driver found for 0000:$id, skipping unbind ---"
        fi
        echo "--- Debug: Setting driver_override to vfio-pci for 0000:$id ---"
        echo "vfio-pci" > /sys/bus/pci/devices/0000:$id/driver_override
        echo "--- Debug: Binding 0000:$id to vfio-pci ---"
        if ! echo "0000:$id" > /sys/bus/pci/drivers/vfio-pci/bind; then
            aux-nos "$function_name" "Warning: Failed to bind GPU $id to VFIO-PCI."
            echo "--- Debug: Failed to bind GPU $id to VFIO-PCI ---"
        else
            echo "--- Debug: Successfully bound GPU $id to VFIO-PCI ---"
        fi
    done

    echo "--- Debug: GPU driver and IOMMU group (after detachment) ---"
    LSPCI_NNK_TEMP_OUTPUT_2="/tmp/lspci_nnk_output_ptd2.txt"
    if lspci -nnk > "$LSPCI_NNK_TEMP_OUTPUT_2"; then
        grep -A3 "VGA compatible controller" "$LSPCI_NNK_TEMP_OUTPUT_2"
    else
        echo "Error: lspci -nnk command failed (second call)."
    fi
    [ -f "$LSPCI_NNK_TEMP_OUTPUT_2" ] && rm -f "$LSPCI_NNK_TEMP_OUTPUT_2"

    echo "--- Debug: Listing IOMMU groups and devices (after detachment) ---"
    for iommu_group in $(find /sys/kernel/iommu_groups/ -maxdepth 1 -mindepth 1 -type d); do
        echo "IOMMU Group ${iommu_group##*/}:"
        for device in $(ls -1 "$iommu_group"/devices/); do
            LSPCI_NNS_TEMP_OUTPUT_2="/tmp/lspci_nns_output_ptd2.txt"
            if lspci -nns "$device" > "$LSPCI_NNS_TEMP_OUTPUT_2"; then
                echo -e "\t$(cat "$LSPCI_NNS_TEMP_OUTPUT_2")"
            else
                echo -e "\tError: lspci -nns for $device failed (second loop)."
            fi
            [ -f "$LSPCI_NNS_TEMP_OUTPUT_2" ] && rm -f "$LSPCI_NNS_TEMP_OUTPUT_2"
        done
    done

    aux-nos "$function_name" "GPU detachment process completed. Check above output for details."
    echo "--- Debug: Exiting ${function_name} ---"
}

# Attaches the GPU back to the host system
# gpu passthrough attach
#
gpu-pta() {
    local function_name="${FUNCNAME[0]}"
    echo "--- Debug: Entering ${function_name} ---"

    # Technical Description:
    #   Reattaches GPU(s) to host system drivers. Logs actions via 'aux-log'.
    #   Identifies GPU PCI IDs ('lspci -nn'). For each GPU:
    #     Unbinds from current driver (e.g., vfio-pci), resets 'driver_override'.
    #     Determines vendor (AMD/NVIDIA via 'lspci -n') for driver ('amdgpu'/'nouveau').
    #     Loads driver ('modprobe'), probes, and binds if needed. Notifies via 'aux-nos'.
    # Dependencies:
    #   - `lspci`, `grep`, `awk`, `cut`, `echo`, `modprobe`.
    #   - `aux-log`, `aux-nos` functions.
    #   - Access to /sys/bus/pci/devices/, /sys/bus/pci/drivers_probe & root privileges.

    aux-log "INFO" "Starting GPU reattachment process"
    echo "--- Debug: Starting GPU reattachment process ---"

    aux-log "INFO" "Current GPU driver and IOMMU group:"
    echo "--- Debug: Current GPU driver and IOMMU group (before reattachment) ---"
    lspci -nnk | grep -A3 "VGA compatible controller" | while read -r line; do
        aux-log "INFO" "$line"
        echo "--- Debug: Initial GPU info: $line ---"
    done

    echo "--- Debug: Getting GPU PCI IDs for reattachment ---"
    local gpu_ids=$(lspci -nn | grep -i "VGA compatible controller" | awk '{print $1}')

    if [ -z "$gpu_ids" ]; then
        aux-log "ERROR" "No GPU found."
        aux-nos "$function_name" "Error: No GPU found."
        echo "--- Debug: Exiting ${function_name} as no GPU IDs found ---"
        return 1
    fi

    aux-log "INFO" "Found GPU(s) with PCI ID(s): $gpu_ids"
    echo "--- Debug: Found GPU(s) with PCI ID(s): $gpu_ids ---"

    for id in $gpu_ids; do
        aux-log "INFO" "Processing GPU with PCI ID: $id"
        echo "--- Debug: Processing GPU ID for reattachment: $id ---"
        if [ -e "/sys/bus/pci/devices/0000:$id/driver" ]; then
            aux-log "INFO" "Unbinding GPU $id from current driver"
            echo "--- Debug: Unbinding 0000:$id from current driver ---"
            echo "0000:$id" > /sys/bus/pci/devices/0000:$id/driver/unbind
            if [ $? -eq 0 ]; then
                aux-log "INFO" "Successfully unbound GPU $id"
                echo "--- Debug: Successfully unbound GPU $id ---"
            else
                aux-log "WARNING" "Failed to unbind GPU $id"
                echo "--- Debug: Failed to unbind GPU $id ---"
            fi
        else
            aux-log "INFO" "GPU $id is not bound to any driver"
            echo "--- Debug: GPU $id is not bound to any driver, skipping unbind ---"
        fi

        aux-log "INFO" "Resetting driver_override for GPU $id"
        echo "--- Debug: Resetting driver_override for 0000:$id ---"
        echo > /sys/bus/pci/devices/0000:$id/driver_override

        echo "--- Debug: Determining driver for GPU $id ---"
        local vendor_id=$(lspci -n -s "$id" | awk '{print $3}' | cut -d':' -f1)
        local driver
        echo "--- Debug: Vendor ID for $id: $vendor_id ---"
        case "$vendor_id" in
            1002)
                driver="amdgpu"
                ;;
            10de)
                driver="nouveau" # Or "nvidia" if preferred and installed
                ;;
            *)
                aux-log "ERROR" "Unknown GPU vendor: $vendor_id. Cannot proceed with reattachment."
                aux-nos "$function_name" "Error: Unknown GPU vendor: $vendor_id. Cannot proceed with reattachment."
                echo "--- Debug: Unknown GPU vendor: $vendor_id for ID $id. Skipping... ---"
                continue # Skip to the next GPU ID
                ;;
        esac
        echo "--- Debug: Determined driver for $id: $driver ---"

        aux-log "INFO" "Attempting to load $driver driver"
        echo "--- Debug: Attempting to load $driver driver for $id ---"
        if ! modprobe "$driver"; then
            aux-log "ERROR" "Failed to load $driver driver. You may need to install it."
            aux-nos "$function_name" "Error: Failed to load $driver driver. You may need to install it."
            echo "--- Debug: Failed to load $driver driver for $id. Skipping... ---"
            continue # Skip to the next GPU ID
        else
            aux-log "INFO" "$driver driver loaded successfully."
            echo "--- Debug: $driver driver loaded successfully for $id ---"
        fi

        aux-log "INFO" "Probing for new driver for GPU $id"
        echo "--- Debug: Probing for new driver for GPU $id (0000:$id) ---"
        echo "0000:$id" > /sys/bus/pci/drivers_probe
        if [ $? -eq 0 ]; then
            aux-log "INFO" "Successfully probed for new driver for GPU $id"
            echo "--- Debug: Successfully probed for new driver for GPU $id ---"
        else
            aux-log "WARNING" "Failed to probe for new driver for GPU $id"
            echo "--- Debug: Failed to probe for new driver for GPU $id ---"
        fi

        # Explicitly bind the driver if it's not automatically bound
        if [ ! -e "/sys/bus/pci/devices/0000:$id/driver" ]; then
            aux-log "INFO" "Attempting to explicitly bind $driver to GPU $id"
            echo "--- Debug: Attempting to explicitly bind $driver to GPU $id (0000:$id) ---"
            echo "0000:$id" > /sys/bus/pci/drivers/$driver/bind
            if [ $? -eq 0 ]; then
                aux-log "INFO" "Successfully bound $driver to GPU $id"
                echo "--- Debug: Successfully bound $driver to GPU $id ---"
            else
                aux-log "ERROR" "Failed to bind $driver to GPU $id"
                aux-nos "$function_name" "Error: Failed to bind $driver to GPU $id"
                echo "--- Debug: Failed to bind $driver to GPU $id. ---"
                # Decide if we should return 1 or continue with other GPUs
            fi
        else
            echo "--- Debug: GPU $id (0000:$id) already has a driver: $(readlink /sys/bus/pci/devices/0000:$id/driver) ---"
        fi
    done

    aux-log "INFO" "GPU driver and IOMMU group after reattachment:"
    echo "--- Debug: GPU driver and IOMMU group (after reattachment) ---"
    lspci -nnk | grep -A3 "VGA compatible controller" | while read -r line; do
        aux-log "INFO" "$line"
        echo "--- Debug: Final GPU info: $line ---"
    done

    aux-log "INFO" "GPU reattachment process completed."
    aux-nos "$function_name" "GPU reattachment process completed. Check logs for details."
    echo "--- Debug: Exiting ${function_name} ---"
}

# Checks the current status of the GPU
# gpu passthrough status
#
gpu-pts() {
    local function_name="${FUNCNAME[0]}"
    local detached_mode=false
    local attached_driver=""

    echo "--- GPU Passthrough Status ---"
    echo "=============================="

    # Check if VFIO-PCI is loaded, a strong indicator of detached mode
    if lsmod | grep -q "vfio_pci"; then
        detached_mode=true
        echo -e "\\n[INFO] VFIO-PCI module is loaded. GPU is likely DETACHED."
    else
        echo -e "\\n[INFO] VFIO-PCI module is NOT loaded. GPU is likely ATTACHED to host."
    fi

    # Check current driver for VGA/3D controllers
    echo -e "\\n--- Kernel Drivers for GPU(s) ---"
    local gpu_devices_info=$(lspci -nnk | grep -iE "VGA compatible controller|3D controller")
    if [ -n "$gpu_devices_info" ]; then
        echo "$gpu_devices_info" | while IFS= read -r line; do
            echo "$line" # Print the device line
            if echo "$line" | grep -q "Kernel driver in use:"; then
                local current_driver=$(echo "$line" | awk -F': ' '{print $2}')
                echo "  -> Driver: $current_driver"
                if [ "$current_driver" == "vfio-pci" ]; then
                    detached_mode=true # Confirm detached if vfio-pci is in use
                    echo "     Mode: DETACHED (using vfio-pci)"
                elif [ -n "$current_driver" ]; then
                    attached_driver="$current_driver"
                    echo "     Mode: ATTACHED (using $current_driver)"
                else
                    echo "     Mode: UNKNOWN (no specific driver listed in use)"
                fi
            elif echo "$line" | grep -q "Kernel modules:"; then
                 echo "  -> Modules: $(echo "$line" | awk -F': ' '{print $2}')"
            fi
        done
    else
        echo "No VGA compatible or 3D controllers found."
    fi

    if $detached_mode; then
        echo -e "\\n--- Summary: GPU appears to be DETACHED (for VM use) ---"
        echo "    - VFIO-PCI module is active."
        echo "    - Relevant GPU(s) should be bound to vfio-pci."
    elif [ -n "$attached_driver" ]; then
        echo -e "\\n--- Summary: GPU appears to be ATTACHED to host (driver: $attached_driver) ---"
        echo "    - Host driver ($attached_driver) is likely in use."
        echo "    - VFIO-PCI module is not managing the primary GPU(s)."
    else
        echo -e "\\n--- Summary: GPU state is UNCLEAR ---"
        echo "    - Could not definitively determine if attached or detached."
        echo "    - Review IOMMU groups and loaded modules below."
    fi


    echo -e "\\n--- IOMMU Groups ---"
    if command -v find &> /dev/null && command -v ls &> /dev/null && command -v lspci &> /dev/null; then
        local iommu_groups_found=false
        for iommu_group_path in $(find /sys/kernel/iommu_groups/ -mindepth 1 -maxdepth 1 -type d 2>/dev/null); do
            iommu_groups_found=true
            local group_id=$(basename "$iommu_group_path")
            echo "IOMMU Group ${group_id}:"
            for device_path in $(ls -1 "$iommu_group_path"/devices/ 2>/dev/null); do
                local device_info=$(lspci -nns "$device_path" 2>/dev/null)
                if [ -n "$device_info" ]; then
                    echo -e "\\t${device_info}"
                    # Also show driver for this specific device if possible
                    local driver_path="/sys/bus/pci/devices/${device_path}/driver"
                    if [ -L "$driver_path" ]; then
                        echo -e "\\t  Driver: $(basename $(readlink "$driver_path"))"
                    elif [ -d "$driver_path" ]; # Some drivers might not be symlinks
                        echo -e "\\t  Driver: (Bound, specific name N/A)"
                    fi
                else
                    echo -e "\\tError reading device info for $device_path"
                fi
            done
        done
        if ! $iommu_groups_found; then
            echo "No IOMMU groups found or 'find' command failed."
        fi
    else
        echo "Required commands (find, ls, lspci) not available to list IOMMU groups."
    fi


    echo -e "\\n--- Loaded Kernel Modules (GPU related) ---"
    if lsmod | grep -E "vfio|nvidia|nouveau|amdgpu|radeon" --color=never; then
        : # lsmod already printed
    else
        echo "No common GPU-related modules (vfio, nvidia, nouveau, amdgpu, radeon) loaded."
    fi

    aux-nos "$function_name" "GPU status check completed."
    echo "---------------------------------"
}
