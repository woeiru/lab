#!/bin/bash

# ============================================================================
# gpu - GPU Passthrough Management (Refactored)
#
# Improved structure with helper functions, reduced duplication, and better organization
# ============================================================================

# Define directory and file variables
DIR_FUN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
FILE_FUN=$(basename "$BASH_SOURCE")
BASE_FUN="${FILE_FUN%.*}"
FILEPATH_FUN="${DIR_FUN}/${FILE_FUN}"
CONFIG_FUN="${SITE_CONFIG_FILE}"

# Dynamically create variables based on the base name
eval "FILEPATH_${BASE_FUN}=\$FILEPATH_FUN"
eval "FILE_${BASE_FUN}=\$FILE_FUN"
eval "BASE_${BASE_FUN}=\$BASE_FUN"
eval "CONFIG_${BASE_FUN}=\$CONFIG_FUN"

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

# Initialize color constants for GPU management output formatting
# GPU Initialize Colors - GIC
# 
_gpu_init_colors() {
    readonly GREEN=$(printf '\033[0;32m')
    readonly YELLOW=$(printf '\033[0;33m')
    readonly RED=$(printf '\033[0;31m')
    readonly CYAN=$(printf '\033[0;36m')
    readonly MAGENTA=$(printf '\033[0;35m')
    readonly INDIGO_BLUE=$(printf '\033[38;2;75;0;130m')
    readonly NC=$(printf '\033[0m') # No Color
    readonly CHECK_MARK="${GREEN}✓${NC}"
    readonly CROSS_MARK="${RED}✗${NC}"
    readonly QUESTION_MARK="${YELLOW}?${NC}"
}

# Validate PCI ID format using regex pattern matching
# GPU Validate PCI ID - GVP
# <pci_id>
_gpu_validate_pci_id() {
    local pci_id="$1"
    [[ "$pci_id" =~ ^[0-9a-fA-F]{2}:[0-9a-fA-F]{2}\.[0-9a-fA-F]$ ]]
}

# Extract vendor and device IDs from lspci output for PCI device
# GPU Extract Vendor Device ID - GEV
# <pci_id>
_gpu_extract_vendor_device_id() {
    local pci_id="$1"
    local lspci_device_info
    lspci_device_info=$(lspci -s "$pci_id" -nn 2>/dev/null)
    
    if [ -n "$lspci_device_info" ]; then
        # Extract vendor:device ID from the [xxxx:yyyy] pattern
        local vendor_device_id=$(echo "$lspci_device_info" | grep -o '\[[^]]*:[^]]*\]' | tail -1 | sed 's/\[\|\]//g')
        
        if [ -n "$vendor_device_id" ]; then
            local vendor_id=$(echo "$vendor_device_id" | cut -d':' -f1)
            local device_id=$(echo "$vendor_device_id" | cut -d':' -f2)
            echo "${vendor_id}:${device_id}"
            return 0
        fi
    fi
    return 1
}

# Get current driver bound to specified PCI device
# GPU Get Current Driver - GGC
# <pci_id>
_gpu_get_current_driver() {
    local pci_id="$1"
    local full_pci_id="0000:$pci_id"
    local driver_path="/sys/bus/pci/devices/$full_pci_id/driver"
    
    if [ -L "$driver_path" ]; then
        basename "$(readlink -f "$driver_path")"
    else
        echo "none"
    fi
}

# Check if PCI device is GPU-related hardware type
# GPU Is GPU Device - GIG
# <pci_id>
_gpu_is_gpu_device() {
    local pci_id="$1"
    lspci -s "$pci_id" -nn 2>/dev/null | grep -qE "VGA compatible controller|3D controller|Audio device"
}

# Load GPU configuration file if available and readable
# GPU Load Config - GLC
# 
_gpu_load_config() {
    if [ -n "$CONFIG_FUN" ] && [ -f "$CONFIG_FUN" ]; then
        # shellcheck source=/dev/null
        source "$CONFIG_FUN"
        printf "INFO: Successfully sourced PCI configuration from %s\n" "$CONFIG_FUN"
        return 0
    else
        printf "${YELLOW}WARNING: PCI Configuration file '%s' not found or not set.${NC}\n" "$CONFIG_FUN"
        return 1
    fi
}

# Get PCI IDs from hostname-based configuration
_gpu_get_config_pci_ids() {
    local hostname="$1"
    local -a pci_ids=()
    
    local pci0_var_name="${hostname}_NODE_PCI0"
    local pci1_var_name="${hostname}_NODE_PCI1"
    
    if [ -n "${!pci0_var_name}" ]; then
        local pci0_full_val=${!pci0_var_name}
        local short_pci0_val=${pci0_full_val#0000:}
        if _gpu_validate_pci_id "$short_pci0_val"; then
            pci_ids+=("$short_pci0_val")
        fi
    fi
    
    if [ -n "${!pci1_var_name}" ]; then
        local pci1_full_val=${!pci1_var_name}
        local short_pci1_val=${pci1_full_val#0000:}
        if _gpu_validate_pci_id "$short_pci1_val"; then
            pci_ids+=("$short_pci1_val")
        fi
    fi
    
    printf "%s\n" "${pci_ids[@]}"
}

# Find all GPU devices via lspci scan
_gpu_find_all_gpus() {
    local filter_driver="$1" # Optional: only return GPUs using specific driver
    local -a gpu_ids=()
    
    local lspci_output
    lspci_output=$(lspci -nnk)
    
    while IFS= read -r line; do
        if echo "$line" | grep -qE "VGA compatible controller|3D controller"; then
            local pci_slot_id=$(echo "$line" | awk '{print $1}')
            
            if [ -n "$filter_driver" ]; then
                local current_driver
                current_driver=$(_gpu_get_current_driver "$pci_slot_id")
                if [ "$current_driver" = "$filter_driver" ]; then
                    gpu_ids+=("$pci_slot_id")
                fi
            else
                gpu_ids+=("$pci_slot_id")
            fi
        fi
    done <<< "$lspci_output"
    
    printf "%s\n" "${gpu_ids[@]}"
}

# Get target GPUs for processing (handles all the logic for determining which GPUs to process)
_gpu_get_target_gpus() {
    local gpu_id_arg="$1"
    local hostname="$2"
    local filter_driver="$3" # Optional: vfio-pci, nvidia, etc.
    local -a gpus_to_process=()
    
    if [ -n "$gpu_id_arg" ]; then
        # Specific GPU ID provided
        if ! _gpu_validate_pci_id "$gpu_id_arg"; then
            printf "${RED}ERROR: Invalid PCI ID format provided: %s. Expected format like 01:00.0${NC}\n" "$gpu_id_arg"
            return 1
        fi
        
        if _gpu_is_gpu_device "$gpu_id_arg"; then
            if [ -n "$filter_driver" ]; then
                local current_driver
                current_driver=$(_gpu_get_current_driver "$gpu_id_arg")
                if [ "$current_driver" = "$filter_driver" ]; then
                    gpus_to_process+=("$gpu_id_arg")
                fi
            else
                gpus_to_process+=("$gpu_id_arg")
            fi
        else
            printf "${RED}ERROR: Specified PCI ID %s is not a VGA/3D/Audio controller or does not exist.${NC}\n" "$gpu_id_arg"
            return 1
        fi
    else
        # Try to get from configuration
        local -a config_ids
        readarray -t config_ids < <(_gpu_get_config_pci_ids "$hostname")
        
        # Process config IDs, but only add non-empty ones
        for pci_id in "${config_ids[@]}"; do
            if [ -n "$pci_id" ]; then
                if [ -n "$filter_driver" ]; then
                    local current_driver
                    current_driver=$(_gpu_get_current_driver "$pci_id")
                    if [ "$current_driver" = "$filter_driver" ]; then
                        gpus_to_process+=("$pci_id")
                    fi
                else
                    gpus_to_process+=("$pci_id")
                fi
            fi
        done
        
        # Fallback to lspci scan if no config IDs found
        if [ ${#gpus_to_process[@]} -eq 0 ]; then
            local -a fallback_ids
            readarray -t fallback_ids < <(_gpu_find_all_gpus "$filter_driver")
            gpus_to_process+=("${fallback_ids[@]}")
        fi
    fi
    
    # Remove duplicates
    if [ ${#gpus_to_process[@]} -gt 0 ]; then
        readarray -t gpus_to_process < <(printf "%s\n" "${gpus_to_process[@]}" | sort -u)
    fi
    
    printf "%s\n" "${gpus_to_process[@]}"
}

# Ensure VFIO modules are loaded
_gpu_ensure_vfio_modules() {
    local modules=(vfio vfio_iommu_type1 vfio_pci)
    
    for module in "${modules[@]}"; do
        if lsmod | grep -q "^${module}"; then
            printf "INFO: Module %s is already loaded.\n" "$module"
        else
            printf "INFO: Attempting to load module %s...\n" "$module"
            if modprobe "$module"; then
                printf "INFO: Module %s loaded successfully.\n" "$module"
            else
                printf "${RED}ERROR: Failed to load module %s.${NC}\n" "$module"
                if [ "$module" = "vfio_pci" ]; then
                    printf "${RED}Exiting due to failure to load critical module vfio_pci.${NC}\n"
                    return 1
                fi
            fi
        fi
    done
    return 0
}

# Unbind device from current driver
_gpu_unbind_device() {
    local pci_id="$1"
    local full_pci_id="0000:$pci_id"
    local driver_path="/sys/bus/pci/devices/$full_pci_id/driver"
    
    if [ -L "$driver_path" ]; then
        local current_driver
        current_driver=$(basename "$(readlink -f "$driver_path")")
        printf "INFO: Unbinding GPU %s from %s...\n" "$pci_id" "$current_driver"
        
        if echo "$full_pci_id" > "$driver_path/unbind"; then
            printf "INFO: Successfully unbound GPU %s from %s.\n" "$pci_id" "$current_driver"
            return 0
        else
            printf "${YELLOW}WARNING: Failed to unbind GPU %s from %s.${NC}\n" "$pci_id" "$current_driver"
            return 1
        fi
    else
        printf "INFO: GPU %s is not currently bound to any driver.\n" "$pci_id"
        return 0
    fi
}

# Bind device to specific driver
_gpu_bind_device() {
    local pci_id="$1"
    local target_driver="$2"
    local full_pci_id="0000:$pci_id"
    local driver_bind_path="/sys/bus/pci/drivers/$target_driver/bind"
    
    # Check if driver directory exists
    if [ ! -d "/sys/bus/pci/drivers/$target_driver" ]; then
        printf "${RED}ERROR: PCI driver directory for %s does not exist.${NC}\n" "$target_driver"
        return 1
    fi
    
    printf "INFO: Attempting to bind GPU %s to driver %s...\n" "$pci_id" "$target_driver"
    
    if echo "$full_pci_id" > "$driver_bind_path"; then
        printf "INFO: Successfully initiated bind for GPU %s to %s.\n" "$pci_id" "$target_driver"
        sleep 1
        
        # Verify binding
        local current_driver
        current_driver=$(_gpu_get_current_driver "$pci_id")
        if [ "$current_driver" = "$target_driver" ]; then
            printf "${GREEN}SUCCESS: GPU %s is now bound to %s.${NC}\n" "$pci_id" "$target_driver"
            return 0
        else
            printf "${YELLOW}WARNING: GPU %s may not have bound to %s correctly. Current driver: %s${NC}\n" "$pci_id" "$target_driver" "$current_driver"
            return 1
        fi
    else
        printf "${RED}ERROR: Failed to bind GPU %s to %s.${NC}\n" "$pci_id" "$target_driver"
        return 1
    fi
}

# Determine appropriate host driver for GPU
_gpu_get_host_driver() {
    local pci_id="$1"
    local hostname="$2"
    
    local vendor_device_id
    vendor_device_id=$(_gpu_extract_vendor_device_id "$pci_id")
    
    if [ $? -ne 0 ] || [ -z "$vendor_device_id" ]; then
        printf "${YELLOW}WARNING: Could not determine vendor ID for %s.${NC}\n" "$pci_id"
        return 1
    fi
    
    local vendor_id=$(echo "$vendor_device_id" | cut -d':' -f1)
    
    case "$vendor_id" in
        "10de") # NVIDIA
            local nvidia_driver_pref_var="${hostname}_NVIDIA_DRIVER_PREFERENCE"
            local preferred_nvidia_driver
            if [ -n "${!nvidia_driver_pref_var}" ]; then
                preferred_nvidia_driver="${!nvidia_driver_pref_var}"
            else
                preferred_nvidia_driver="nvidia"
            fi
            echo "$preferred_nvidia_driver"
            ;;
        "1002") # AMD
            echo "amdgpu"
            ;;
        *)
            printf "${YELLOW}WARNING: Unknown GPU vendor ID %s for %s.${NC}\n" "$vendor_id" "$pci_id"
            return 1
            ;;
    esac
}

# Determine appropriate host driver for GPU (parameterized version)
_gpu_get_host_driver_parameterized() {
    local pci_id="$1"
    local hostname="$2"
    local nvidia_driver_preference="${3:-nvidia}"
    
    local vendor_device_id
    vendor_device_id=$(_gpu_extract_vendor_device_id "$pci_id")
    
    if [ $? -ne 0 ] || [ -z "$vendor_device_id" ]; then
        printf "${YELLOW}WARNING: Could not determine vendor ID for %s.${NC}\n" "$pci_id"
        return 1
    fi
    
    local vendor_id=$(echo "$vendor_device_id" | cut -d':' -f1)
    
    case "$vendor_id" in
        "10de") # NVIDIA
            echo "$nvidia_driver_preference"
            ;;
        "1002") # AMD
            echo "amdgpu"
            ;;
        *)
            printf "${YELLOW}WARNING: Unknown GPU vendor ID %s for %s.${NC}\n" "$vendor_id" "$pci_id"
            return 1
            ;;
    esac
}

# Get PCI IDs from explicit parameters (parameterized version)
_gpu_get_config_pci_ids_parameterized() {
    local pci0_id="$1"
    local pci1_id="$2"
    local -a pci_ids=()
    
    if [ -n "$pci0_id" ]; then
        local short_pci0_val=${pci0_id#0000:}
        if _gpu_validate_pci_id "$short_pci0_val"; then
            pci_ids+=("$short_pci0_val")
        fi
    fi
    
    if [ -n "$pci1_id" ]; then
        local short_pci1_val=${pci1_id#0000:}
        if _gpu_validate_pci_id "$short_pci1_val"; then
            pci_ids+=("$short_pci1_val")
        fi
    fi
    
    printf "%s\n" "${pci_ids[@]}"
}

# Get target GPUs for processing (parameterized version)
_gpu_get_target_gpus_parameterized() {
    local gpu_id_arg="$1"
    local hostname="$2"
    local filter_driver="$3" # Optional: vfio-pci, nvidia, etc.
    local pci0_id="$4"
    local pci1_id="$5"
    local -a gpus_to_process=()
    
    if [ -n "$gpu_id_arg" ]; then
        # Specific GPU ID provided
        if ! _gpu_validate_pci_id "$gpu_id_arg"; then
            printf "${RED}ERROR: Invalid PCI ID format provided: %s. Expected format like 01:00.0${NC}\n" "$gpu_id_arg"
            return 1
        fi
        
        if _gpu_is_gpu_device "$gpu_id_arg"; then
            if [ -n "$filter_driver" ]; then
                local current_driver
                current_driver=$(_gpu_get_current_driver "$gpu_id_arg")
                if [ "$current_driver" = "$filter_driver" ]; then
                    gpus_to_process+=("$gpu_id_arg")
                fi
            else
                gpus_to_process+=("$gpu_id_arg")
            fi
        else
            printf "${RED}ERROR: Specified PCI ID %s is not a VGA/3D/Audio controller or does not exist.${NC}\n" "$gpu_id_arg"
            return 1
        fi
    else
        # Try to get from configuration
        local -a config_ids
        readarray -t config_ids < <(_gpu_get_config_pci_ids_parameterized "$pci0_id" "$pci1_id")
        
        # Process config IDs, but only add non-empty ones
        for pci_id in "${config_ids[@]}"; do
            if [ -n "$pci_id" ]; then
                if [ -n "$filter_driver" ]; then
                    local current_driver
                    current_driver=$(_gpu_get_current_driver "$pci_id")
                    if [ "$current_driver" = "$filter_driver" ]; then
                        gpus_to_process+=("$pci_id")
                    fi
                else
                    gpus_to_process+=("$pci_id")
                fi
            fi
        done
        
        # Fallback to lspci scan if no config IDs found
        if [ ${#gpus_to_process[@]} -eq 0 ]; then
            local -a fallback_ids
            readarray -t fallback_ids < <(_gpu_find_all_gpus "$filter_driver")
            gpus_to_process+=("${fallback_ids[@]}")
        fi
    fi
    
    # Remove duplicates
    if [ ${#gpus_to_process[@]} -gt 0 ]; then
        readarray -t gpus_to_process < <(printf "%s\n" "${gpus_to_process[@]}" | sort -u)
    fi
    
    printf "%s\n" "${gpus_to_process[@]}"
}

# Helper function to get IOMMU groups for GPU devices
_gpu_get_iommu_groups() {
    local -a gpu_pci_bus_ids=()
    while IFS= read -r line; do
        gpu_pci_bus_ids+=("$(echo "$line" | awk '{print $1}')")
    done < <(lspci -nn | grep -iE "VGA compatible controller|3D controller")

    if [ ${#gpu_pci_bus_ids[@]} -eq 0 ]; then
        echo "No VGA/3D controllers found to filter IOMMU groups."
        return 1
    fi

    local overall_iommu_groups_found=false
    local gpu_related_group_displayed=false

    for iommu_group_dir in $(find /sys/kernel/iommu_groups/ -mindepth 1 -maxdepth 1 -type d 2>/dev/null | sort -V); do
        overall_iommu_groups_found=true
        local group_id=$(basename "$iommu_group_dir")
        local devices_in_group_output=""
        local this_group_contains_gpu=false

        for device_symlink_name in $(ls -1 "$iommu_group_dir"/devices/ 2>/dev/null | sort -V); do
            local device_pci_bus_id_full="$device_symlink_name"
            local device_pci_bus_id_short="${device_symlink_name#0000:}"
            local device_info
            device_info=$(lspci -nns "$device_pci_bus_id_full" 2>/dev/null)
            
            if [ -n "$device_info" ]; then
                devices_in_group_output+="  ${device_info}\n"
                for gpu_id in "${gpu_pci_bus_ids[@]}"; do
                    if [[ "$device_pci_bus_id_short" == "$gpu_id" ]]; then
                        this_group_contains_gpu=true
                        break 
                    fi
                done
            else
                devices_in_group_output+="  Error reading device info for $device_pci_bus_id_full\n"
            fi
        done

        if $this_group_contains_gpu; then
            echo -e "\nIOMMU Group ${group_id}:"
            echo -e "${devices_in_group_output%\n}" 
            gpu_related_group_displayed=true
        fi
    done

    if ! $overall_iommu_groups_found; then
        echo "No IOMMU groups found by 'find' command."
        return 1
    elif ! $gpu_related_group_displayed; then
        echo "No IOMMU groups found containing the identified GPU(s): ${gpu_pci_bus_ids[*]}"
        return 1
    fi
}

# Helper function to get detailed GPU device information
_gpu_get_detailed_device_info() {
    local temp_lspci_gpu_blocks="/tmp/gpu_pts_blocks.$$"
    lspci -nnk | grep -A4 -iE "VGA compatible controller|3D controller" > "$temp_lspci_gpu_blocks"
    
    local all_device_blocks_output=""
    local gpu_details_for_checklist=""
    local is_any_gpu_on_vfio=false
    local host_drivers_for_gpu=""
    local vga_devices_processed=false
    
    if [ -s "$temp_lspci_gpu_blocks" ]; then
        local current_gpu_block_content=""

        while IFS= read -r line_from_grep; do
            if echo "$line_from_grep" | grep -qE "VGA compatible controller|3D controller"; then
                # Process previous block if it exists and was a GPU block
                if [ -n "$current_gpu_block_content" ] && echo "$current_gpu_block_content" | head -n1 | grep -qE "VGA compatible controller|3D controller"; then
                    all_device_blocks_output+="Device Block:\n$current_gpu_block_content\n\n"
                    vga_devices_processed=true
                    
                    local pci_id_for_block=$(echo "$current_gpu_block_content" | head -n1 | awk '{print $1}')
                    local device_vendor_name_raw=$(lspci -mms "$pci_id_for_block" 2>/dev/null | cut -d'"' -f6)
                    local device_name_raw=$(lspci -mms "$pci_id_for_block" 2>/dev/null | cut -d'"' -f8)
                    local device_vendor_name=$(echo "$device_vendor_name_raw" | sed -E 's/ Corporation| Incorporated| Technologies Inc.//g')
                    local device_name_short=$(echo "$device_name_raw" | sed 's/ \[.*\]//g' | awk '{print $1, $2}')
                    local device_name_for_checklist="$device_vendor_name $device_name_short"
                    device_name_for_checklist=$(echo "$device_name_for_checklist" | sed 's/[[:space:]]*$//')
                    if [ -z "$device_name_for_checklist" ]; then device_name_for_checklist="N/A"; fi

                    if echo "$current_gpu_block_content" | grep -q "Kernel driver in use: vfio-pci"; then
                        is_any_gpu_on_vfio=true
                        gpu_details_for_checklist+="     ✓ GPU $pci_id_for_block ($device_name_for_checklist) on vfio-pci\n"
                    elif driver_line=$(echo "$current_gpu_block_content" | grep "Kernel driver in use:"); then
                        local driver_name=$(echo "$driver_line" | awk -F': ' '{print $2}')
                        if [ -n "$driver_name" ]; then
                            if [ -z "$host_drivers_for_gpu" ]; then host_drivers_for_gpu="$driver_name"; elif [[ ! "$host_drivers_for_gpu" =~ "$driver_name" ]]; then host_drivers_for_gpu="$host_drivers_for_gpu, $driver_name"; fi
                            gpu_details_for_checklist+="     * GPU $pci_id_for_block ($device_name_for_checklist) on $driver_name\n"
                        else
                            gpu_details_for_checklist+="     ✗ GPU $pci_id_for_block ($device_name_for_checklist) on UNKNOWN driver\n"
                        fi
                    else
                        gpu_details_for_checklist+="     ✗ GPU $pci_id_for_block ($device_name_for_checklist) UNBOUND or no driver info\n"
                    fi
                fi
                current_gpu_block_content="$line_from_grep"
            elif [[ "$line_from_grep" == "--" ]]; then
                current_gpu_block_content=""
            elif [ -n "$current_gpu_block_content" ]; then
                current_gpu_block_content="$current_gpu_block_content"$'\n'"$line_from_grep"
            fi
        done < "$temp_lspci_gpu_blocks"
        
        # Process the last block
        if [ -n "$current_gpu_block_content" ] && echo "$current_gpu_block_content" | head -n1 | grep -qE "VGA compatible controller|3D controller"; then
            all_device_blocks_output+="Device Block:\n$current_gpu_block_content\n\n"
            vga_devices_processed=true
            
            local pci_id_for_block=$(echo "$current_gpu_block_content" | head -n1 | awk '{print $1}')
            local device_vendor_name_raw=$(lspci -mms "$pci_id_for_block" 2>/dev/null | cut -d'"' -f6)
            local device_name_raw=$(lspci -mms "$pci_id_for_block" 2>/dev/null | cut -d'"' -f8)
            local device_vendor_name=$(echo "$device_vendor_name_raw" | sed -E 's/ Corporation| Incorporated| Technologies Inc.//g')
            local device_name_short=$(echo "$device_name_raw" | sed 's/ \[.*\]//g' | awk '{print $1, $2}')
            local device_name_for_checklist="$device_vendor_name $device_name_short"
            device_name_for_checklist=$(echo "$device_name_for_checklist" | sed 's/[[:space:]]*$//')
            if [ -z "$device_name_for_checklist" ]; then device_name_for_checklist="N/A"; fi

            if echo "$current_gpu_block_content" | grep -q "Kernel driver in use: vfio-pci"; then
                is_any_gpu_on_vfio=true
                gpu_details_for_checklist+="     ✓ GPU $pci_id_for_block ($device_name_for_checklist) on vfio-pci\n"
            elif driver_line=$(echo "$current_gpu_block_content" | grep "Kernel driver in use:"); then
                local driver_name=$(echo "$driver_line" | awk -F': ' '{print $2}')
                if [ -n "$driver_name" ]; then
                    if [ -z "$host_drivers_for_gpu" ]; then host_drivers_for_gpu="$driver_name"; elif [[ ! "$host_drivers_for_gpu" =~ "$driver_name" ]]; then host_drivers_for_gpu="$host_drivers_for_gpu, $driver_name"; fi
                    gpu_details_for_checklist+="     * GPU $pci_id_for_block ($device_name_for_checklist) on $driver_name\n"
                else
                    gpu_details_for_checklist+="     ✗ GPU $pci_id_for_block ($device_name_for_checklist) on UNKNOWN driver\n"
                fi
            else
                gpu_details_for_checklist+="     ✗ GPU $pci_id_for_block ($device_name_for_checklist) UNBOUND or no driver info\n"
            fi
        fi
    fi
    
    rm -f "$temp_lspci_gpu_blocks"
    
    # Output results as delimited strings for parsing
    echo "DEVICE_BLOCKS:$all_device_blocks_output"
    echo "GPU_CHECKLIST:$gpu_details_for_checklist"
    echo "VFIO_STATUS:$is_any_gpu_on_vfio"
    echo "HOST_DRIVERS:$host_drivers_for_gpu"
    echo "DEVICES_PROCESSED:$vga_devices_processed"
}

# ============================================================================
# MAIN FUNCTIONS (Refactored)
# ============================================================================

# Shows a summary of selected functions in the script
gpu-fun() {
    local filepath_gpu="${1:-$FILEPATH_gpu}"
    shift
    aux-laf "$filepath_gpu" "$@"
}

# Displays an overview of specific variables
gpu-var() {
    local config_gpu="${1:-$CONFIG_gpu}"
    local lib_ops_parent_dir="${2:-$DIR_FUN/..}"
    aux-acu -o "$config_gpu" "$lib_ops_parent_dir"
}

# Downloads and installs NVIDIA drivers, blacklisting Nouveau
gpu-nds() {
    local drv_ver="${1:-550.142}"
    local url="https://us.download.nvidia.com/XFree86/Linux-x86_64/${drv_ver}/NVIDIA-Linux-x86_64-${drv_ver}.run"
    local installer="NVIDIA-Linux-x86_64-${drv_ver}.run"

    _gpu_init_colors

    echo "1) Blacklisting Nouveau..."
    cat <<EOF | tee /etc/modprobe.d/blacklist-nouveau.conf
blacklist nouveau
options nouveau modeset=0
EOF
    update-initramfs -u

    echo "2) Installing prerequisites..."
    apt update
    apt install -y dkms build-essential pve-headers-$(uname -r)

    echo "3) Downloading NVIDIA driver ${drv_ver}..."
    wget -q "${url}" -O "${installer}" || { echo "Download failed"; return 1; }
    chmod +x "${installer}"

    echo "4) Installing driver with DKMS support..."
    ./"${installer}" --dkms --silent

    echo "5) Finalizing—reboot recommended."
    read -p "Reboot now? [y/N] " yn
    if [[ "$yn" =~ ^[Yy]$ ]]; then
        reboot
    else
        echo "You can reboot later with: reboot"
    fi

    echo "6) After reboot, verify with: nvidia-smi"
}

# Configures initial GRUB and EFI settings for GPU passthrough
gpu-pt1() {
    local function_name="${FUNCNAME[0]}"
    
    echo "Executing section 1:"
    efibootmgr -v

    # Edit GRUB configuration
    sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT="quiet iommu=pt"/' /etc/default/grub
    update-grub
    update-grub2

    # Install grub-efi-amd64
    apt install grub-efi-amd64 -y

    printf "%s: Completed section 1, system will reboot now.\n" "$function_name"
    reboot
}

# Adds necessary kernel modules for GPU passthrough
gpu-pt2() {
    local function_name="${FUNCNAME[0]}"
    
    echo "Executing section 2:"

    # Add modules to /etc/modules
    local modules=(vfio vfio_iommu_type1 vfio_pci)
    for module in "${modules[@]}"; do
        echo "$module" >> /etc/modules
    done

    # Update initramfs
    update-initramfs -u -k all

    printf "%s: Completed section 2, system will reboot now.\n" "$function_name"
    reboot
}

# Finalizes or reverts GPU passthrough setup
gpu-pt3() {
    local action="$1"
    local function_name="${FUNCNAME[0]}"
    
    _gpu_init_colors
    
    if [ -z "$action" ]; then
        printf "Usage: %s <enable|disable>\n" "$function_name"
        return 1
    fi

    local vfio_conf="/etc/modprobe.d/vfio.conf"
    local passthrough_blacklist_conf="/etc/modprobe.d/zz-vfio-gpu-blacklist.conf"
    local modules_file="/etc/modules"

    if [ "$action" = "enable" ]; then
        printf "Configuring GPU passthrough (vfio-pci)...\n"
        
        # Get all GPU vendor:device IDs
        local -a gpu_ids
        readarray -t gpu_ids < <(_gpu_find_all_gpus)
        
        if [ ${#gpu_ids[@]} -eq 0 ]; then
            printf "No GPU devices found. Nothing to do.\n"
            return 0
        fi

        local vfio_options_line="options vfio-pci ids="
        local ids_to_add=""
        local nvidia_gpus_for_vfio=false
        local amd_gpus_for_vfio=false

        for pci_id in "${gpu_ids[@]}"; do
            local vendor_device_id
            vendor_device_id=$(_gpu_extract_vendor_device_id "$pci_id")
            
            if [ $? -eq 0 ] && [ -n "$vendor_device_id" ]; then
                printf "Found GPU: %s with ID %s\n" "$pci_id" "$vendor_device_id"
                
                if [ -n "$ids_to_add" ]; then
                    ids_to_add+=","
                fi
                ids_to_add+="$vendor_device_id"

                local vendor_id=$(echo "$vendor_device_id" | cut -d':' -f1)
                case "$vendor_id" in
                    "10de") nvidia_gpus_for_vfio=true ;;
                    "1002") amd_gpus_for_vfio=true ;;
                esac
            fi
        done

        if [ -n "$ids_to_add" ]; then
            vfio_options_line+="$ids_to_add"
            echo "$vfio_options_line" | tee "$vfio_conf" > /dev/null
            printf "Content of %s:\n" "$vfio_conf"
            cat "$vfio_conf"
        fi

        # Create blacklist file
        printf "Creating GPU driver blacklist for passthrough...\n"
        rm -f "$passthrough_blacklist_conf"
        touch "$passthrough_blacklist_conf"

        if $nvidia_gpus_for_vfio; then
            {
                echo "blacklist nouveau"
                echo "options nouveau modeset=0"
                echo "blacklist nvidia"
            } | tee -a "$passthrough_blacklist_conf" > /dev/null
        fi

        if $amd_gpus_for_vfio; then
            {
                echo "blacklist radeon"
                echo "blacklist amdgpu"
            } | tee -a "$passthrough_blacklist_conf" > /dev/null
        fi

        # Ensure VFIO modules are in /etc/modules
        local vfio_modules=(vfio vfio_iommu_type1 vfio_pci)
        for module in "${vfio_modules[@]}"; do
            if ! grep -qP "^\s*${module}\s*(#.*)?$" "$modules_file"; then
                echo "$module" | tee -a "$modules_file" > /dev/null
                printf "Added %s to %s.\n" "$module" "$modules_file"
            else
                # Uncomment if commented
                if grep -qP "^\s*#\s*${module}" "$modules_file"; then
                    sed -i "s/^\s*#\s*${module}/${module}/" "$modules_file"
                    printf "Uncommented %s in %s.\n" "$module" "$modules_file"
                fi
            fi
        done

    elif [ "$action" = "disable" ]; then
        printf "Reverting GPU passthrough configuration...\n"
        
        # Remove configuration files
        rm -f "$vfio_conf"
        rm -f "$passthrough_blacklist_conf"

        # Comment out VFIO modules
        local vfio_modules=(vfio vfio_iommu_type1 vfio_pci)
        for module in "${vfio_modules[@]}"; do
            if grep -qP "^\s*${module}" "$modules_file"; then
                sed -i "s/^\s*${module}/# ${module}/" "$modules_file"
                printf "Commented out %s in %s.\n" "$module" "$modules_file"
            fi
        done
        
    else
        printf "Invalid action: %s. Use 'enable' or 'disable'.\n" "$action"
        return 1
    fi

    printf "Updating initramfs...\n"
    update-initramfs -u -k all
    printf "Configuration applied. A reboot is required for changes to take full effect.\n"
}

# Detaches the GPU from the host system for VM passthrough
gpu-ptd() {
    local gpu_id_arg="$1"
    local hostname="${2:-$(hostname -s)}"
    local config_file="${3:-$CONFIG_FUN}"
    local pci0_id="$4"
    local pci1_id="$5"  
    local nvidia_driver_preference="${6:-nvidia}"
    
    local function_name="${FUNCNAME[0]}"
    
    _gpu_init_colors
    
    printf "INFO: Starting GPU detachment process\n"

    # Check IOMMU
    if ! grep -q 'iommu=pt\|intel_iommu=on\|amd_iommu=on' /proc/cmdline; then
        printf "${YELLOW}WARNING: IOMMU does not appear to be enabled in kernel command line.${NC}\n"
        printf "${YELLOW}         VFIO passthrough may not work.${NC}\n"
    fi

    # Load configuration if config file provided
    if [ -n "$config_file" ] && [ -f "$config_file" ]; then
        # shellcheck source=/dev/null
        source "$config_file"
        printf "INFO: Successfully sourced GPU configuration from %s\n" "$config_file"
    fi

    # Ensure VFIO modules are loaded
    if ! _gpu_ensure_vfio_modules; then
        return 1
    fi

    # Get target GPUs (exclude those already on vfio-pci)
    local -a gpus_to_process
    readarray -t gpus_to_process < <(_gpu_get_target_gpus_parameterized "$gpu_id_arg" "$hostname" "" "$pci0_id" "$pci1_id")
    
    # Filter out GPUs already on vfio-pci
    local -a filtered_gpus=()
    for pci_id in "${gpus_to_process[@]}"; do
        local current_driver
        current_driver=$(_gpu_get_current_driver "$pci_id")
        if [ "$current_driver" != "vfio-pci" ]; then
            filtered_gpus+=("$pci_id")
        else
            printf "INFO: GPU %s is already on vfio-pci. Skipping.\n" "$pci_id"
        fi
    done

    if [ ${#filtered_gpus[@]} -eq 0 ]; then
        printf "No suitable GPU devices found for detachment.\n"
        return 0
    fi

    printf "INFO: Processing GPU IDs for detachment: %s\n" "${filtered_gpus[*]}"

    # Process each GPU
    for pci_id in "${filtered_gpus[@]}"; do
        printf "--- Processing GPU %s ---\n" "$pci_id"
        
        # Unbind from current driver
        _gpu_unbind_device "$pci_id"
        
        # Set driver override and bind to vfio-pci
        local full_pci_id="0000:$pci_id"
        printf "INFO: Setting driver_override to vfio-pci for GPU %s...\n" "$pci_id"
        
        if echo "vfio-pci" > "/sys/bus/pci/devices/$full_pci_id/driver_override"; then
            printf "INFO: Successfully set driver_override for %s.\n" "$pci_id"
            
            # Trigger re-probe
            if echo "$full_pci_id" > "/sys/bus/pci/drivers_probe"; then
                printf "INFO: Re-probe triggered for %s.\n" "$pci_id"
                sleep 1
            fi
        fi
        
        # Verify binding or try direct bind
        local current_driver
        current_driver=$(_gpu_get_current_driver "$pci_id")
        if [ "$current_driver" = "vfio-pci" ]; then
            printf "INFO: GPU %s successfully bound to vfio-pci.\n" "$pci_id"
        else
            printf "INFO: Attempting direct bind to vfio-pci for %s...\n" "$pci_id"
            _gpu_bind_device "$pci_id" "vfio-pci"
        fi
    done

    printf "INFO: GPU detachment process completed.\n"
}

# Attaches the GPU back to the host system
gpu-pta() {
    local gpu_id_arg="$1"
    local hostname="${2:-$(hostname -s)}"
    local config_file="${3:-$CONFIG_FUN}"
    local pci0_id="$4"
    local pci1_id="$5"
    local nvidia_driver_preference="${6:-nvidia}"
    
    local function_name="${FUNCNAME[0]}"
    
    _gpu_init_colors
    
    printf "INFO: Starting GPU attachment process...\n"

    # Load configuration if config file provided
    if [ -n "$config_file" ] && [ -f "$config_file" ]; then
        # shellcheck source=/dev/null
        source "$config_file"
        printf "INFO: Successfully sourced GPU configuration from %s\n" "$config_file"
    fi

    # Get target GPUs (only those on vfio-pci)
    local -a gpus_to_process
    readarray -t gpus_to_process < <(_gpu_get_target_gpus_parameterized "$gpu_id_arg" "$hostname" "vfio-pci" "$pci0_id" "$pci1_id")

    if [ ${#gpus_to_process[@]} -eq 0 ]; then
        printf "${YELLOW}No suitable GPU devices found on vfio-pci to attach.${NC}\n"
        return 0
    fi

    printf "INFO: Final list of GPU IDs to process for attachment: %s\n" "${gpus_to_process[*]}"

    # Process each GPU
    for pci_id in "${gpus_to_process[@]}"; do
        printf "${CYAN}--- Processing GPU %s for attachment to host ---${NC}\n" "$pci_id"
        
        # Unbind from vfio-pci
        _gpu_unbind_device "$pci_id"
        
        # Clear driver override
        local full_pci_id="0000:$pci_id"
        printf "INFO: Clearing driver_override for %s...\n" "$pci_id"
        echo > "/sys/bus/pci/devices/$full_pci_id/driver_override"
        
        # Determine host driver
        local host_driver
        host_driver=$(_gpu_get_host_driver_parameterized "$pci_id" "$hostname" "$nvidia_driver_preference")
        
        if [ $? -ne 0 ] || [ -z "$host_driver" ]; then
            printf "${YELLOW}WARNING: Could not determine host driver for %s. Skipping.${NC}\n" "$pci_id"
            continue
        fi
        
        printf "INFO: Target host driver for GPU %s: %s\n" "$pci_id" "$host_driver"
        
        # Load host driver module if needed
        if ! lsmod | grep -q "^${host_driver//-/_}"; then
            printf "INFO: Host driver module %s not loaded. Attempting to load...\n" "$host_driver"
            if ! modprobe "$host_driver"; then
                printf "${RED}ERROR: Failed to load module %s. Cannot attach GPU %s.${NC}\n" "$host_driver" "$pci_id"
                continue
            fi
        fi
        
        # Bind to host driver
        _gpu_bind_device "$pci_id" "$host_driver"
    done

    printf "INFO: GPU attachment process completed.\n"
}

# Checks the current status of the GPU (complete detailed version)
gpu-pts() {
    local hostname="${1:-$(hostname -s)}"
    local config_file="${2:-$CONFIG_FUN}"
    local pci0_id="$3"
    local pci1_id="$4"
    local nvidia_driver_preference="${5:-nvidia}"
    
    local function_name="${FUNCNAME[0]}"
    
    _gpu_init_colors
    
    # Load configuration if config file provided
    if [ -n "$config_file" ] && [ -f "$config_file" ]; then
        # shellcheck source=/dev/null
        source "$config_file"
        printf "INFO: Successfully sourced GPU configuration from %s\n" "$config_file" >/dev/null
    fi
    
    # Get detailed device information
    local detailed_info
    detailed_info=$(_gpu_get_detailed_device_info)
    
    local all_device_blocks_output=""
    local gpu_details_for_checklist=""
    local is_any_gpu_on_vfio=false
    local host_drivers_for_gpu=""
    local vga_devices_processed=false
    
    # Parse the detailed info output
    while IFS= read -r line; do
        case "$line" in
            DEVICE_BLOCKS:*)
                all_device_blocks_output="${line#DEVICE_BLOCKS:}"
                ;;
            GPU_CHECKLIST:*)
                gpu_details_for_checklist="${line#GPU_CHECKLIST:}"
                ;;
            VFIO_STATUS:*)
                is_any_gpu_on_vfio="${line#VFIO_STATUS:}"
                ;;
            HOST_DRIVERS:*)
                host_drivers_for_gpu="${line#HOST_DRIVERS:}"
                ;;
            DEVICES_PROCESSED:*)
                vga_devices_processed="${line#DEVICES_PROCESSED:}"
                ;;
        esac
    done <<< "$detailed_info"
    
    # Define configuration file paths
    local modules_file_path="/etc/modules"
    local blacklist_nouveau_conf_path="/etc/modprobe.d/blacklist-nouveau.conf"
    local vfio_conf_path="/etc/modprobe.d/vfio.conf"
    local passthrough_blacklist_conf_path="/etc/modprobe.d/zz-vfio-gpu-blacklist.conf"

    # --- IOMMU Groups (Details) ---
    echo -e "\n${CYAN}--- IOMMU Groups (Details) ---${NC}"
    if ! command -v find &>/dev/null || ! command -v ls &>/dev/null || ! command -v lspci &>/dev/null; then
        echo -e "${RED}Required commands (find, ls, lspci) not available to list IOMMU groups.${NC}"
    else
        _gpu_get_iommu_groups
    fi

    # --- GPU Device Details (lspci -nnk) ---
    echo -e "\n${CYAN}--- GPU Device Details (lspci -nnk) ---${NC}"
    if [ -n "$all_device_blocks_output" ]; then
        echo -e "${YELLOW}${all_device_blocks_output%\\n\\n}${NC}"
    elif [ "$vga_devices_processed" = "true" ]; then 
         echo -e "${YELLOW}No detailed GPU device blocks were formatted (e.g. lspci output was unusual or parsing issue).${NC}"
    else 
         echo -e "${YELLOW}No VGA compatible or 3D controllers found by lspci to display details.${NC}"
    fi

    # --- Loaded Kernel Modules (GPU related) ---
    echo -e "\n${CYAN}--- Loaded Kernel Modules (GPU related) ---${NC}"
    if lsmod | command grep -E "vfio|nvidia|nouveau|amdgpu|radeon" --color=never; then
        : 
    else
        echo -e "${YELLOW}No common GPU-related modules (vfio, nvidia, nouveau, amdgpu, radeon) loaded.${NC}"
    fi

    echo -e "\n${CYAN}--- GPU Passthrough Workflow & Runtime Status ---${NC}"
    echo -e "${CYAN}==================================================${NC}"

    # 1. Initial System Preparation (Configuration)
    echo -e "${MAGENTA}1. Initial System Preparation (Configuration):${NC}"
    
    local iommu_enabled_cmdline_status="$CROSS_MARK"
    if /usr/bin/grep -E -q 'iommu=pt|intel_iommu=on|amd_iommu=on' /proc/cmdline; then
        iommu_enabled_cmdline_status="$CHECK_MARK"
    fi
    echo -e "   ${iommu_enabled_cmdline_status} IOMMU Enabled in Kernel Command Line (gpu-pt1)"

    local vfio_modules_in_etc_modules_status="$CROSS_MARK"
    local vfio_ok=0; local vfio_iommu_type1_ok=0; local vfio_pci_ok=0
    if [ -f "$modules_file_path" ]; then
        if grep -qP "^\\s*vfio(\\s|$|#)" "$modules_file_path"; then vfio_ok=1; fi
        if grep -qP "^\\s*vfio_iommu_type1(\\s|$|#)" "$modules_file_path"; then vfio_iommu_type1_ok=1; fi
        if grep -qP "^\\s*vfio_pci(\\s|$|#)" "$modules_file_path"; then vfio_pci_ok=1; fi
    fi
    if [ "$vfio_ok" -eq 1 ] && [ "$vfio_iommu_type1_ok" -eq 1 ] && [ "$vfio_pci_ok" -eq 1 ]; then
        vfio_modules_in_etc_modules_status="$CHECK_MARK"
    fi
    echo -e "   ${vfio_modules_in_etc_modules_status} Core VFIO modules in $modules_file_path (gpu-pt2)"

    # 2. NVIDIA Host Driver Setup (Optional Configuration)
    echo -e "${MAGENTA}2. NVIDIA Host Driver Setup (Optional Configuration):${NC}"
    local nouveau_blacklisted_status="$QUESTION_MARK (Not found)"
    if [ -f "$blacklist_nouveau_conf_path" ]; then
        if grep -q "blacklist nouveau" "$blacklist_nouveau_conf_path"; then
            nouveau_blacklisted_status="$CHECK_MARK"
        else
            nouveau_blacklisted_status="$CROSS_MARK (Found, but 'blacklist nouveau' missing)"
        fi
    fi
    echo -e "   ${nouveau_blacklisted_status} Nouveau blacklisted for NVIDIA driver ($blacklist_nouveau_conf_path) (gpu-nds)"

    # 3. Persistent GPU Passthrough Configuration (gpu-pt3 enable status)
    echo -e "${MAGENTA}3. Persistent GPU Passthrough Configuration (gpu-pt3 enable):${NC}"
    local persistent_vfio_ids_status="$CROSS_MARK"
    if [ -f "$vfio_conf_path" ] && grep -qE "^options vfio-pci ids=" "$vfio_conf_path"; then
        persistent_vfio_ids_status="$CHECK_MARK"
    fi
    echo -e "   ${persistent_vfio_ids_status} GPUs assigned to vfio-pci at boot ($vfio_conf_path)"

    local persistent_blacklist_status="$CROSS_MARK"
    if [ -f "$passthrough_blacklist_conf_path" ] && grep -qE "blacklist (nvidia|nouveau|amdgpu|radeon)" "$passthrough_blacklist_conf_path"; then
        persistent_blacklist_status="$CHECK_MARK"
    fi
    echo -e "   ${persistent_blacklist_status} Host drivers blacklisted for selected GPUs ($passthrough_blacklist_conf_path)"

    # 4. Runtime Kernel Module & Driver Status
    echo -e "${MAGENTA}4. Runtime Kernel Module & Driver Status:${NC}"
    local vfio_pci_loaded_status="$CROSS_MARK"
    if lsmod | grep -q "vfio_pci"; then
        vfio_pci_loaded_status="$CHECK_MARK"
    fi
    echo -e "   ${vfio_pci_loaded_status} VFIO-PCI kernel module currently loaded"

    local other_gpu_modules_loaded="-"
    if lsmod | command grep -qE "nvidia|nouveau|amdgpu|radeon"; then
        other_gpu_modules_loaded="${GREEN}Host drivers (nvidia/nouveau/amdgpu/radeon) loaded${NC}"
    else
        other_gpu_modules_loaded="${YELLOW}No common host GPU drivers loaded${NC}"
    fi
    if lsmod | command grep -qE "vfio_iommu_type1|vfio"; then
        if [[ "$other_gpu_modules_loaded" == "-" || "$other_gpu_modules_loaded" == *"${YELLOW}No common host GPU drivers loaded${NC}"* ]]; then
            other_gpu_modules_loaded="${GREEN}VFIO modules (vfio/vfio_iommu_type1) loaded${NC}"
        else
            other_gpu_modules_loaded+=", ${GREEN}VFIO modules (vfio/vfio_iommu_type1) loaded${NC}"
        fi 
    fi
    echo -e "   - Other relevant modules: $other_gpu_modules_loaded"
    
    # 4.3 Kernel Drivers for GPU(s) Summary
    echo -e "   ${CYAN}--- Kernel Drivers for GPU(s) Summary ---${NC}"
    if [ -n "$gpu_details_for_checklist" ]; then
        echo -e "${gpu_details_for_checklist%\\n}"
    elif [ "$vga_devices_processed" = "true" ]; then 
         echo -e "     ${YELLOW}?${NC} No summary for GPU driver bindings could be generated."
    else 
         echo -e "     ${YELLOW}?${NC} No VGA/3D controllers found to summarize driver bindings."
    fi

    # Overall GPU State Determination
    echo -e "\n--- Overall GPU State Summary ---"
    if [ "$is_any_gpu_on_vfio" = "true" ]; then
        echo -e "[SUMMARY] GPU State: DETACHED (for VM use)"
        echo -e "  - At least one GPU device (VGA/3D controller) is bound to vfio-pci."
        if [ -n "$host_drivers_for_gpu" ]; then
             echo -e "  - Note: Other GPU devices might be ATTACHED to host (driver(s): $host_drivers_for_gpu). State could be MIXED."
        fi
    elif [ -n "$host_drivers_for_gpu" ]; then
        echo -e "[SUMMARY] GPU State: ATTACHED to host (driver(s): $host_drivers_for_gpu)"
        echo -e "  - GPU device(s) (VGA/3D controller) are using host driver(s): $host_drivers_for_gpu."
        echo -e "  - No VGA/3D controller found using vfio-pci."
    else
        if [ "$vga_devices_processed" = "true" ]; then
            echo -e "[SUMMARY] GPU State: UNCLEAR / INDETERMINATE"
            echo -e "  - A VGA/3D controller was detected, but it's not using 'vfio-pci' nor any other recognized host driver."
            echo -e "  - It might be unbound. Check 'GPU Device Details' and IOMMU details."
        else
            echo -e "[SUMMARY] GPU State: N/A (No VGA/3D GPU controllers detected)"
        fi
        echo -e "  - Review IOMMU groups and loaded kernel modules above."
    fi

    echo -e "\n--- GPU status check completed. (${function_name}) ---"
    echo -e "===================================================="
}
