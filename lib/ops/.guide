# High-Quality Function Implementation Guide
# Best Practices and Excellence Framework for lib/ops
#
# Purpose: Quality principles, advanced patterns, and excellence standards
# Type: Excellence Framework - defines WHY and guides toward best practices
# Scope: All operational functions in lib/ops modules  
# Companion: .spec (Technical Standards and Compliance Framework)
#
# Last Updated: 2025-06-14
# Maintainer: Lab Environment Management System

# Library: lib/ops - Operational Functions Quality Standards

## Purpose
This guide establishes comprehensive quality standards for implementing high-quality operational functions in the `lib/ops` library. Apply these standards module by module to ensure consistent, reliable, and maintainable infrastructure management code.

## Core Quality Principles

### 1. Function Design Excellence
**Atomic Operations**: Each function should perform one well-defined operation
- Single responsibility principle
- Clear, predictable outcomes
- Minimal side effects outside the intended operation

**Robust Parameter Handling**: All functions must implement comprehensive parameter validation
- Use `aux_val` for all input validation
- Implement help flag handling (`--help`/`-h`) 
- Provide meaningful usage information via `aux_use`
- Follow execution flag pattern (`-x`) for functions executed without parameters

**Stateless Design**: Functions should be environment-independent
- No hardcoded paths or values
- All configuration via parameters or environment variables
- Predictable behavior regardless of execution context

### 2. Error Handling and Resilience

**Comprehensive Error Management**
```bash
# Pattern: Structured error handling with context
if ! command_execution; then
    aux_err "Operation failed: specific_reason" "context=value"
    return 2
fi
```

**Dependency Validation**
```bash
# Pattern: Systematic dependency checking
if ! aux_chk "command" "required_tool"; then
    aux_err "Required tool 'required_tool' not found"
    return 127
fi
```

**Graceful Degradation**
- Provide fallback mechanisms where possible
- Clear error messages with actionable information
- Proper return codes: 0 (success), 1 (parameter error), 2 (system error), 127 (dependency missing)

### 3. Safety and Security

**Safe File Operations**
```bash
# Pattern: Atomic file operations with backup
if [ -f "$target_file" ]; then
    cp "$target_file" "$target_file.backup.$(date +%s)" || {
        aux_err "Failed to create backup"
        return 2
    }
fi
```

**Input Sanitization**
- Validate all inputs using `aux_val` patterns
- Sanitize file paths and system commands
- Prevent injection attacks in command construction

**Permission Verification**
- Check required permissions before operations
- Use `aux_chk` for permission validation
- Clear error messages for permission failures

### 4. User Experience Excellence

**Interactive Guidance**
```bash
# Pattern: Clear user interaction
local user_input=$(aux_ask "Enter configuration value" "default_value" "validation_type")
if ! aux_val "$user_input" "required_format"; then
    aux_err "Invalid input format"
    return 1
fi
```

**Informative Logging**
```bash
# Pattern: Contextual logging
aux_info "Starting operation: $operation_name" "target=$target, mode=$mode"
aux_warn "Non-critical issue detected" "component=$component"
```

**Progress Indication**
- Use `aux_info` for operation status updates
- Provide meaningful progress information for long operations
- Clear success/failure notifications

### 5. Code Quality Standards

**Function Size Limits**
- Maximum 150 lines per function
- Break complex operations into helper functions
- Use internal helper functions (prefixed with `_`) for modular design

**Documentation Requirements**
```bash
# Function: Description of primary functionality
# Short: mnemonic_abbreviation
# <param1> <param2> [optional_param]
function_name() {
    # Technical Description:
    #   Step-by-step explanation of operation
    # Dependencies:
    #   - Required commands: command1, command2
    #   - Required files: /path/to/file
    #   - Required permissions: specific permissions needed
    # Arguments:
    #   param1: Description and expected format
    #   param2: Description and validation requirements
    # Returns:
    #   0: Success with specific outcome
    #   1: Parameter validation failure
    #   2: System operation failure
    # Examples:
    #   function_name "value1" "value2"
    #   function_name --help
```

**Naming Consistency**
- Module prefix for all public functions: `[module]_[operation]`
- Descriptive, mnemonic function names
- Helper functions prefixed with underscore: `_module_helper`

### 6. Testing and Validation

**Built-in Validation**
- Include self-validation where possible
- Verify operation success after execution
- Provide rollback mechanisms for critical operations

**Test-Friendly Design**
- Pure functions with predictable inputs/outputs
- Minimal external dependencies
- Clear return codes for automated testing

**Configuration Validation**
```bash
# Pattern: Validate configurations before use
if ! aux_val "$config_value" "expected_format"; then
    aux_err "Invalid configuration: $config_value"
    return 1
fi
```

## Implementation Checklist

### Pre-Implementation
- [ ] Review existing module structure and patterns
- [ ] Identify helper functions needed
- [ ] Plan parameter validation strategy
- [ ] Design error handling approach

### During Implementation
- [ ] Follow function naming conventions
- [ ] Implement comprehensive parameter validation
- [ ] Add dependency checking for all external commands
- [ ] Include detailed technical documentation
- [ ] Use appropriate auxiliary functions (`aux_val`, `aux_chk`, `aux_log`, etc.)
- [ ] Implement safe file operations with backups
- [ ] Add user interaction where appropriate

### Post-Implementation
- [ ] Test all parameter validation paths
- [ ] Verify error handling with invalid inputs
- [ ] Test dependency failure scenarios
- [ ] Validate help flag functionality
- [ ] Run standards compliance tests
- [ ] Document usage examples

## Quality Assurance Patterns

### Input Validation Pattern
```bash
function_name() {
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        aux_tec
        return 0
    fi
    
    if [ $# -ne 2 ]; then
        aux_use
        return 1
    fi
    
    if ! aux_val "$1" "not_empty"; then
        aux_err "Parameter 1 cannot be empty"
        return 1
    fi
    
    # Function implementation...
}
```

### Safe Command Execution Pattern
```bash
# Pattern: Safe command execution with error handling
if aux_cmd "command" "arg1" "arg2"; then
    aux_info "Command executed successfully"
else
    aux_err "Command execution failed" "command=command, args=arg1 arg2"
    return 2
fi
```

### File Operation Safety Pattern
```bash
# Pattern: Safe file modification
local temp_file=$(mktemp)
if generate_content > "$temp_file"; then
    if aux_cmd "mv" "$temp_file" "$target_file"; then
        aux_info "File updated successfully" "file=$target_file"
    else
        aux_err "Failed to move temporary file"
        rm -f "$temp_file"
        return 2
    fi
else
    aux_err "Failed to generate file content"
    rm -f "$temp_file"
    return 2
fi
```

## Module-Specific Quality Considerations

### Complex System Operations (gpu, sto, pve)
- Implement comprehensive rollback mechanisms
- Add extensive validation for system state changes
- Use staging areas for configuration testing
- Provide dry-run capabilities where possible

### Network Operations (net, srv, ssh)
- Validate network configurations before application
- Test connectivity after configuration changes
- Implement fallback network configurations
- Add network security validation

### User-Facing Operations (usr, sys)
- Maximize user interaction and confirmation
- Provide clear progress indication
- Implement undo mechanisms where feasible
- Add comprehensive logging for audit trails

## Quality Metrics

### Function Quality Indicators
- **Parameter Validation Coverage**: 100% of functions must validate all parameters
- **Error Handling Completeness**: All failure modes must be handled explicitly
- **Documentation Completeness**: All functions must have complete technical documentation
- **Dependency Management**: All external dependencies must be checked before use
- **Return Code Consistency**: All functions must use standard return codes

### Code Quality Metrics
- **Function Length**: Maximum 150 lines per function
- **Cyclomatic Complexity**: Minimize nested conditionals
- **Helper Function Usage**: Use helper functions for repeated operations
- **Auxiliary Function Integration**: Proper use of `aux_*` functions throughout

## Implementation Priority

Apply these quality standards in the following order:
1. **Critical System Functions**: gpu, pve, sto (highest impact)
2. **Network Functions**: net, srv, ssh (security critical)  
3. **Utility Functions**: sys, usr, pbs (user-facing)

Focus on one module at a time to ensure thorough implementation and testing of quality standards.

## Structured Logging Excellence

**Structured Logging Excellence**
```bash
# Pattern: Comprehensive operational logging with context
aux_info "Operation milestone reached" "component=module,operation=function,step=phase,target=resource"
aux_warn "Non-critical condition detected" "component=module,condition=specific_issue,impact=degraded_performance"
aux_err "Critical failure occurred" "component=module,operation=function,error=specific_error,recovery_action=suggested_fix"
aux_dbg "Detailed execution state" "component=module,step=current_step,variables=state_data"
```

**Message Quality Standards**
- Human-readable messages that describe what happened
- Structured context data for filtering and analysis
- Consistent key naming across all modules
- Actionable information in error messages