#!/bin/bash

# Improved readme aliases generation with error handling
generate_readme_aliases() {
    tme_start_nested_timing "gen_readme_aliases"
    log "lvl" "Generating readme aliases"
    local FILEBASE_MD="readme.md"

    # Validate LAB_DIR
    if [[ -z "$LAB_DIR" ]]; then
        log "lvl" "Error: LAB_DIR is not defined"
        error_handler "$LINENO" "${ERROR_CODES[CONFIG_ERROR]}" "false"
        return 1
    fi

    # Check if LAB_DIR exists
    if [[ ! -d "$LAB_DIR" ]]; then
        log "lvl" "Error: LAB_DIR directory does not exist: $LAB_DIR"
        error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        return 1
    fi

    tme_start_nested_timing "process_readme_files"
    local found_files=0
    while IFS= read -r -d '' file; do
        log "lvl" "Processing readme file: $file"
        local dir=$(dirname "$file")
        local dir_name=$(basename "$dir")
        local parent_dir=$(basename "$(dirname "$dir")")
        local relative_file_path="${file#$LAB_DIR/}"

        if [[ "$parent_dir" != "lab" ]]; then
            alias_name="$parent_dir-$dir_name-md"
        else
            alias_name="$dir_name-md"
        fi

        alias "c-$alias_name=cat $file" # Internal alias uses absolute path
        echo "alias c-$alias_name='cat \"\$LAB_DIR/$relative_file_path\"'" >> "$CFG_ALI_DIR/dyn"
        alias "v-$alias_name=vim $file" # Internal alias uses absolute path
        echo "alias v-$alias_name='vim \"\$LAB_DIR/$relative_file_path\"'" >> "$CFG_ALI_DIR/dyn"
        log "lvl" "Created aliases: c-$alias_name and v-$alias_name for $file (using \$LAB_DIR in dyn)"
        ((found_files++))
    done < <(find "$LAB_DIR" -type f -name "$FILEBASE_MD" -print0 2>/dev/null)

    if ((found_files == 0)); then
        log "lvl" "Warning: No readme files found in $LAB_DIR"
        error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
    fi

    tme_end_nested_timing "process_readme_files" "success"
    tme_end_nested_timing "gen_readme_aliases" "success"
}

generate_level_one_vars_and_aliases() {
    tme_start_nested_timing "gen_level_one"
    log "lvl" "Generating top-level directory aliases"

    # Single timer for directory processing
    tme_start_nested_timing "process_directories"
    for dir_path in "$LAB_DIR"/*; do # dir_path will be /home/es/lab/bin, /home/es/lab/cfg etc.
        if [[ -d "$dir_path" ]]; then
            local base_name=$(basename "$dir_path")
            # Alias for current shell (optional, using absolute path for simplicity here)
            alias "d-$base_name=cd \"$dir_path\""
            # Alias for dyn file using $LAB_DIR
            echo "alias d-$base_name='cd \"\$LAB_DIR/$base_name\"'" >> "$CFG_ALI_DIR/dyn"
            log "lvl" "Created alias: d-$base_name for directory $base_name (using \$LAB_DIR in dyn)"
        fi
    done
    tme_end_nested_timing "process_directories" "success"

    tme_end_nested_timing "gen_level_one" "success"
}

# Improved level two arrays generation with error handling
generate_level_two_arrays() {
    tme_start_nested_timing "gen_level_two"
    log "lvl" "Generating level two arrays"

    local success_count=0
    for folder in "${GENERATION_FOLDERS[@]}"; do
        tme_start_nested_timing "process_folder_${folder}"
        local dir_path="$LAB_DIR/$folder"
        log "lvl" "Processing folder: $folder, path: $dir_path"

        if [[ ! -d "$dir_path" ]]; then
            log "lvl" "Directory not found: $dir_path"
            error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
            tme_end_nested_timing "process_folder_${folder}" "error"
            continue
        fi

        # Sanitize array name to be a valid Bash variable (replace / with _)
        local array_name="${folder//\//_}_files"
        local files=()

        log "lvl" "Searching for files in $dir_path"
        while IFS= read -r -d '' found_file_path; do
            local name_without_ext=$(basename "$found_file_path")
            files+=("$name_without_ext")
            log "lvl" "Added file to $array_name: $name_without_ext"
        done < <(find "$dir_path" -maxdepth 1 -type f \( -name "*" ! -name ".*" \) -print0 2>/dev/null)

        if ((${#files[@]} > 0)); then
            log "lvl" "Creating array $array_name"
            local unique_files=($(printf "%s\n" "${files[@]}" | sort -u))
            eval "declare -ga $array_name=(${unique_files[*]})"
            log "lvl" "Created array $array_name with values: ${!array_name[*]}"
            ((success_count++))
        else
            log "lvl" "No files found in directory: $dir_path"
            error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        fi

        tme_end_nested_timing "process_folder_${folder}" "success"
    done

    if ((success_count == 0)); then
        error_handler "$LINENO" "${ERROR_CODES[GENERAL_ERROR]}" "false"
    fi

    tme_end_nested_timing "gen_level_two" "success"
}

# Improved alias generation with comprehensive error handling and logging
generate_aliases() {
    local alias_type=$1
    local directory=$2
    shift 2
    local files_to_alias=("$@") # Renamed for clarity

    tme_start_nested_timing "gen_aliases_${alias_type}"
    log "lvl" "Generating ${alias_type} aliases"

    # Input validation
    if [[ -z "$directory" ]]; then
        log "lvl" "Error: Empty directory provided"
        error_handler "$LINENO" "${ERROR_CODES[CONFIG_ERROR]}" "false"
        tme_end_nested_timing "gen_aliases_${alias_type}" "error"
        return 1
    fi

    if [[ ! -d "$directory" ]]; then
        log "lvl" "Error: Directory does not exist: $directory"
        error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        tme_end_nested_timing "gen_aliases_${alias_type}" "error"
        return 1
    fi

    if ((${#files_to_alias[@]} == 0)); then
        log "lvl" "Warning: No files provided for processing"
        error_handler "$LINENO" "${ERROR_CODES[CONFIG_ERROR]}" "false"
        tme_end_nested_timing "gen_aliases_${alias_type}" "error"
        return 1
    fi

    log "lvl" "Directory: $directory, Files count: ${#files_to_alias[@]}"
    local folder_name=$(basename "$directory" | tr '[:upper:]' '[:lower:]')
    log "lvl" "Using folder name: $folder_name"

    local success_count=0
    local actual_alias_prefix=""

    if [[ "$alias_type" == "cat" ]]; then actual_alias_prefix="c";
    elif [[ "$alias_type" == "vim" ]]; then actual_alias_prefix="v";
    elif [[ "$alias_type" == "bash" ]]; then actual_alias_prefix="b";
    else
        log "lvl" "Error: Unknown alias type '$alias_type' for directory '$directory'"
        error_handler "$LINENO" "${ERROR_CODES[INVALID_INPUT]}" "false"
        tme_end_nested_timing "gen_aliases_${alias_type}" "failure"
        return 1
    fi

    for file_base_name in "${files_to_alias[@]}"; do
        local actual_file_path="$directory/$file_base_name"

        if [[ ! -e "$actual_file_path" ]]; then
            log "lvl" "Warning: File '$actual_file_path' not found for aliasing. Skipping."
            continue
        fi
        
        if [[ "$alias_type" == "bash" && ! -x "$actual_file_path" ]]; then
            log "lvl" "Warning: File '$actual_file_path' is not executable. Skipping bash alias."
            continue
        fi

        local relative_file_path="${actual_file_path#$LAB_DIR/}"
        local alias_name_to_create="${actual_alias_prefix}.${folder_name}.${file_base_name}"
        
        alias "$alias_name_to_create=${alias_type} \"$actual_file_path\""
        echo "alias $alias_name_to_create='${alias_type} \"\$LAB_DIR/$relative_file_path\"'" >> "$CFG_ALI_DIR/dyn"
        log "lvl" "Created alias: $alias_name_to_create for $actual_file_path (using \$LAB_DIR in dyn)"
        ((success_count++))
    done

    if ((success_count == 0)); then
        log "lvl" "Warning: No ${alias_type} aliases created for ${directory}"
        error_handler "$LINENO" "${ERROR_CODES[NO_ALIAS_CREATED]}" "false"
        tme_end_nested_timing "gen_aliases_${alias_type}" "partial_success"
        return 1
    fi

    log "lvl" "Successfully created ${success_count} ${alias_type} aliases for ${directory}"
    tme_end_nested_timing "gen_aliases_${alias_type}" "success"
    return 0
}

# Main entry point function with cleaner timing structure
ali-dyn() {
    tme_start_timer "set_dynamic"
    log "lvl" "Setting up Navigation"

    echo "# Dynamically generated aliases by set_dynamic on $(date)" > "$CFG_ALI_DIR/dyn"
    echo "# Version: 1.0.0" >> "$CFG_ALI_DIR/dyn"
    echo "" >> "$CFG_ALI_DIR/dyn"

    echo "# --- Readme Aliases ---" >> "$CFG_ALI_DIR/dyn"
    tme_start_nested_timing "readme_processing"
    generate_readme_aliases
    tme_end_nested_timing "readme_processing" "success"
    echo "" >> "$CFG_ALI_DIR/dyn"

    echo "# --- Level One Directory Aliases ---" >> "$CFG_ALI_DIR/dyn"
    tme_start_nested_timing "level_one_processing"
    generate_level_one_vars_and_aliases
    tme_end_nested_timing "level_one_processing" "success"
    echo "" >> "$CFG_ALI_DIR/dyn"

    tme_start_nested_timing "level_two_processing"
    generate_level_two_arrays
    tme_end_nested_timing "level_two_processing" "success"

    tme_start_nested_timing "alias_processing"
    log "lvl" "Generating all aliases"

    echo "# --- Environment File Aliases (cfg/env) ---" >> "$CFG_ALI_DIR/dyn"
    tme_start_nested_timing "env_aliases"
    generate_aliases "cat" "$CFG_ENV_DIR" "${cfg_env_files[@]}"
    generate_aliases "vim" "$CFG_ENV_DIR" "${cfg_env_files[@]}"
    tme_end_nested_timing "env_aliases" "success"
    echo "" >> "$CFG_ALI_DIR/dyn"

    echo "# --- Function Library Aliases (lib/dep) ---" >> "$CFG_ALI_DIR/dyn"
    tme_start_nested_timing "fun_aliases"
    generate_aliases "cat" "$LIB_DEP_DIR" "${lib_dep_files[@]}"
    generate_aliases "vim" "$LIB_DEP_DIR" "${lib_dep_files[@]}"
    tme_end_nested_timing "fun_aliases" "success"
    echo "" >> "$CFG_ALI_DIR/dyn"

    echo "# --- Set Script Aliases (src/set) ---" >> "$CFG_ALI_DIR/dyn"
    tme_start_nested_timing "gem_aliases"
    generate_aliases "cat" "$SRC_SET_DIR" "${src_set_files[@]}"
    generate_aliases "vim" "$SRC_SET_DIR" "${src_set_files[@]}"
    generate_aliases "bash" "$SRC_SET_DIR" "${src_set_files[@]}"
    tme_end_nested_timing "gem_aliases" "success"
    echo "" >> "$CFG_ALI_DIR/dyn"

    tme_end_nested_timing "alias_processing" "success"

    tme_end_timer "set_dynamic" "success"
}

