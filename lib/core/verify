#!/bin/bash
# Module: Verification
# Purpose: Provides verification capabilities for modules, paths, functions and dependencies

# Debug logging helper - uses existing LOG_DEBUG_FILE from ruc
debug_log() {
    [[ "${DEBUG_LOG_ENABLED:-false}" != "true" ]] && return 0
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local message="$1"
    local source="${2:-${FUNCNAME[1]:-main}}"
    printf "[DEBUG] %s - [%s] %s\n" "$timestamp" "$source" "$message" >> "${LOG_DEBUG_FILE}"
}

###########################################
# Path and Variable Verification
###########################################

verify_path() {
    local path="$1"
    local type="$2"
    local create="${3:-false}"

    debug_log "Verifying path: $path (type: $type, create: $create)"

    [[ -z "$path" ]] && {
        echo "Empty path provided" >&2
        return 1
    }

    case "$type" in
        "dir")
            if [[ ! -d "$path" ]]; then
                if [[ "$create" == "true" ]]; then
                    mkdir -p "$path" || {
                        echo "Failed to create directory: $path" >&2
                        return 1
                    }
                    debug_log "Created directory: $path"
                else
                    echo "Directory does not exist: $path" >&2
                    return 1
                fi
            fi
            ;;
        "file")
            if [[ ! -f "$path" ]]; then
                if [[ "$create" == "true" ]]; then
                    mkdir -p "$(dirname "$path")" || {
                        echo "Failed to create parent directory for: $path" >&2
                        return 1
                    }
                    touch "$path" || {
                        echo "Failed to create file: $path" >&2
                        return 1
                    }
                    debug_log "Created file: $path"
                else
                    echo "File does not exist: $path" >&2
                    return 1
                fi
            fi
            ;;
        *)
            echo "Invalid path type: $type" >&2
            return 1
            ;;
    esac

    return 0
}

verify_var() {
    local var_name="$1"
    local var_value="${!var_name}"

    debug_log "Verifying variable: $var_name"

    if [[ -z "$var_value" ]]; then
        echo "Variable '$var_name' is empty or undefined" >&2
        return 1
    fi

    return 0
}

###########################################
# Module Verification
###########################################

essential_check() {
    # Verify that constants are loaded
    [[ -z "$CONS_LOADED" ]] && {
        echo "Constants not loaded" >&2
        return 1
    }

    # Verify critical variables
    local failed=0
    for var in LAB_DIR BAS_DIR LOG_DIR TMP_DIR; do
        if ! verify_var "$var"; then
            ((failed++))
        fi
    done

    # Ensure essential directories exist
    for dir in "$LOG_DIR" "$TMP_DIR"; do
        if ! verify_path "$dir" "dir" true; then
            ((failed++))
        fi
    done

    ((failed > 0)) && return 1
    return 0
}

verify_module() {
    local module="$1"
    debug_log "Verifying module: $module"

    # Initialize requirements if not already done
    if [[ -z "${MODULE_VARS[*]}" ]]; then
        init_module_requirements
    fi

    local failed=0

    # Verify module variables
    for var_key in "${!MODULE_VARS[@]}"; do
        if [[ $var_key == $module.* ]]; then
            local var_name="${var_key#$module.}"
            if ! verify_var "$var_name"; then
                ((failed++))
            fi
        fi
    done

    # Verify module paths
    for path_key in "${!MODULE_PATHS[@]}"; do
        if [[ $path_key == $module.* ]]; then
            local path_var="${path_key#$module.}"
            local path_spec="${MODULE_PATHS[$path_key]}"
            local type="${path_spec%%:*}"
            local create="${path_spec##*:}"

            if ! verify_path "${!path_var}" "$type" "$create"; then
                ((failed++))
            fi
        fi
    done

    ((failed > 0)) && return 1
    return 0
}

validate_module() {
    local file="$1"
    local module_name="$(basename "$file")"

    debug_log "Validating module: $module_name"

    # Check file exists and is executable
    [[ ! -f "$file" ]] && { echo "Module file does not exist: $file" >&2; return 1; }
    [[ ! -x "$file" ]] && chmod +x "$file"

    # Validate shebang
    local shebang
    read -r shebang < "$file"
    [[ "$shebang" != "#!/bin/bash" ]] && {
        echo "Invalid or missing shebang in $module_name" >&2
        return 1
    }

    return 0
}

###########################################
# Function and Dependency Verification
###########################################

verify_function_dependencies() {
    local func_name="$1"
    debug_log "Verifying function dependencies: $func_name"

    # Get required modules for this function
    local modules="${FUNCTION_DEPENDENCIES[$func_name]}"
    [[ -z "$modules" ]] && {
        debug_log "No dependencies found for function: $func_name"
        return 1
    }

    local failed=0
    IFS=',' read -ra MODULE_ARRAY <<< "$modules"

    for module in "${MODULE_ARRAY[@]}"; do
        if ! verify_module "$module"; then
            debug_log "ERROR: Required module '$module' not verified for function '$func_name'"
            ((failed++))
        fi
    done

    return $((failed > 0 ? 1 : 0))
}

verify_function() {
    local func_name="$1"
    local module_path="$2"

    debug_log "Verifying function existence: $func_name in $module_path"

    if [[ ! -f "$module_path" ]]; then
        debug_log "ERROR: Module file not found: $module_path"
        return 1
    fi

    if ! grep -q "^[[:space:]]*$func_name[[:space:]]*(" "$module_path"; then
        debug_log "ERROR: Function $func_name not found in $module_path"
        return 1
    fi

    return 0
}

# Initialize verification system
init_verification() {
    local orig_trace_setting=$(set -o | grep xtrace | cut -f2)
    set -x

    # Ensure log directory exists
    mkdir -p "$(dirname "$LOG_DEBUG_FILE")" 2>/dev/null

    # Redirect output
    exec 1> >(tee -a "$LOG_DEBUG_FILE") 2>&1

    debug_log "Starting verification initialization..."

    if ! essential_check; then
        echo "Fatal: Essential verification failed" >&2
        echo "Check $LOG_DEBUG_FILE for details" >&2
        return 1
    fi

    # Restore original trace setting
    [[ "$orig_trace_setting" == "off" ]] && set +x

    debug_log "Verification initialization completed"
    return 0
}

# Export all verification functions
export -f debug_log
export -f verify_path
export -f verify_var
export -f verify_module
export -f validate_module
export -f essential_check
export -f init_verification
export -f verify_function_dependencies
export -f verify_function
