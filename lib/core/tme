#!/bin/bash
#
# -----------------------------------------------------------------------------
# Module: Timing and Performance Monitoring (tme)
# -----------------------------------------------------------------------------
# Purpose:     Provide functions to measure and report execution time of different
#              parts of shell scripts.
# File:        lib/util/tme
#
# Description: This module offers a system for timing components within scripts.
#              It allows starting and stopping timers for named components,
#              supports nested timing, calculates durations, and can print a
#              formatted report of all timed events. It also logs timing
#              information to a dedicated file.
#
# Dependencies: Relies on 'verify_module' for module integrity.
#               Uses environment variables: TME_LOG_DIR (or a passed argument to
#               tme_init_timer), LOG_STATE_FILE (for managing log output during its
#               own logging), TME_LEVELS_FILE, TME_STATE_FILE.
#
# Usage:       Sourced by scripts needing performance measurement.
#              'tme_init_timer' initializes the system.
#              'tme_start_timer <component_name> [parent_component]' starts timing.
#              'tme_end_timer <component_name> [status]' (or 'tme_stop_timer') ends timing.
#              'tme_print_timing_report' displays the collected timing data.
#              'tme_settme' can be used to control aspects of the timer's behavior or output.
#
# Notes:       Timing data is logged to 'timing.log' in the specified log directory.
#              The module defines color codes for its report output.
#              It manages a hierarchy of timed components (parent/child).
# -----------------------------------------------------------------------------


verify_module "tme" || exit 1

# Performance monitoring setup
declare -gA TME_START_TIMES     # Stores component start times
declare -gA TME_END_TIMES       # Stores component end times
declare -gA TME_DURATIONS       # Stores calculated durations
declare -gA TME_STATUS          # Stores completion status
declare -gA TME_PARENTS         # Stores parent-child relationships
declare -gA TME_CHILDREN        # Stores child components for each parent
declare -g TME_STARTUP_BEGIN    # Global startup timestamp
declare -g TME_CURRENT_PARENT   # Tracks current parent for nested timing
declare -ga TME_COMPONENT_ORDER # Stores components in chronological order
declare -g TME_SORT_ORDER_FILE_PATH # Path to the sort order configuration file

# Color definitions - using printf to ensure proper escape sequences
readonly TME_RED=$(printf '\033[0;31m')
readonly TME_ORANGE=$(printf '\033[0;33m')
readonly TME_YELLOW=$(printf '\033[1;33m')
readonly TME_GREEN=$(printf '\033[0;32m')
readonly TME_CYAN=$(printf '\033[0;36m')
readonly TME_BLUE=$(printf '\033[0;34m')
readonly TME_INDIGO=$(printf '\033[0;35m')
readonly TME_VIOLET=$(printf '\033[1;35m')
readonly TME_WHITE=$(printf '\033[1;37m')
readonly TME_NC=$(printf '\033[0m')

# Initialize timer system with optional log file
tme_init_timer() {
    local log_dir="${1:-$TME_LOG_DIR}"

    # Ensure log_dir is set, fallback to a default if necessary
    if [[ -z "$log_dir" ]]; then
        if [[ -n "$BASE_DIR" ]]; then
            log_dir="${BASE_DIR}/.log"
        else
            log_dir="./.log"
        fi
    fi
    mkdir -p "$log_dir" 2>/dev/null # Ensure log_dir exists

    TME_LOG_FILE="${log_dir}/tme.log"
    TME_SORT_ORDER_FILE_PATH="${TMP_DIR}/tme_sort_order"

    # Initialize TME_LOG_FILE (create/clear)
    > "$TME_LOG_FILE"

    # Initialize TME_SORT_ORDER_FILE_PATH with default if empty
    mkdir -p "$TMP_DIR" 2>/dev/null
    touch "$TME_SORT_ORDER_FILE_PATH" 2>/dev/null
    if [[ ! -s "$TME_SORT_ORDER_FILE_PATH" ]]; then
        echo "chron" > "$TME_SORT_ORDER_FILE_PATH" # Changed default to chron
    fi

    # Initialize TME_LEVELS_FILE with default if empty
    if [[ -n "$TMP_DIR" && -n "$TME_LEVELS_FILE" ]]; then
        mkdir -p "$TMP_DIR" 2>/dev/null
        touch "$TME_LEVELS_FILE" 2>/dev/null
        if [[ ! -s "$TME_LEVELS_FILE" ]]; then
            echo "9" > "$TME_LEVELS_FILE"
        fi
    elif [[ -z "$TMP_DIR" ]]; then
        # Conditionally print warning
        if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
            printf "Warning: TMP_DIR not set. TME_LEVELS_FILE (%s) might not be initialized properly.\n" "$TME_LEVELS_FILE" >&2
        fi
    elif [[ -z "$TME_LEVELS_FILE" ]]; then
        # Conditionally print warning
        if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
            printf "Warning: TME_LEVELS_FILE variable not set. Cannot initialize default depth.\n" >&2
        fi
    fi

    # Initialize TME_STATE_FILE with default if empty
    if [[ -n "$TMP_DIR" && -n "$TME_STATE_FILE" ]]; then
        mkdir -p "$TMP_DIR" 2>/dev/null
        touch "$TME_STATE_FILE" 2>/dev/null
        if [[ ! -s "$TME_STATE_FILE" ]]; then
            echo "true" > "$TME_STATE_FILE"
        fi
    elif [[ -z "$TMP_DIR" ]]; then
        # Conditionally print warning
        if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
            printf "Warning: TMP_DIR not set. TME_STATE_FILE (%s) might not be initialized properly.\n" "$TME_STATE_FILE" >&2
        fi
    elif [[ -z "$TME_STATE_FILE" ]]; then
        # Conditionally print warning
        if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
            printf "Warning: TME_STATE_FILE variable not set. Cannot initialize default report state.\n" >&2
        fi
    fi

    TME_STARTUP_BEGIN=$(date +%s.%N)
    TME_CURRENT_PARENT=""

    TME_START_TIMES=()
    TME_END_TIMES=()
    TME_DURATIONS=()
    TME_STATUS=()
    TME_PARENTS=()
    TME_CHILDREN=()
    TME_COMPONENT_ORDER=()

    [[ ! -d "$log_dir" ]] && mkdir -p "$log_dir"

    {
        printf "%sRC Timing Log - %s%s\n" "$TME_BLUE" "$(date)" "$TME_NC"
        printf "====================\n"
        printf "Startup time: %s%s%s\n\n" "$TME_CYAN" "$(date -d @${TME_STARTUP_BEGIN})" "$TME_NC"
    } >> "$TME_LOG_FILE"
}

# Start timing a component with optional parent component
tme_start_timer() {
    local component="$1"
    local parent="${2:-$TME_CURRENT_PARENT}"
    local timestamp=$(date +%s.%N)

    TME_START_TIMES[$component]=$timestamp
    TME_STATUS[$component]="running"
    TME_COMPONENT_ORDER+=("$component")

    if [[ -n "$parent" ]]; then
        TME_PARENTS[$component]=$parent
        if [[ -z "${TME_CHILDREN[$parent]}" ]]; then
            TME_CHILDREN[$parent]="$component"
        else
            TME_CHILDREN[$parent]="${TME_CHILDREN[$parent]}:$component"
        fi
    fi

    TME_CURRENT_PARENT="$component"

    local orig_log_state
    orig_log_state=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
    echo "false" > "$LOG_STATE_FILE"

    {
        printf "[START] %s\n" "$component"
        [[ -n "$parent" ]] && printf "Parent: %s\n" "$parent"
        printf "Time: %s\n\n" "$(date -d @${timestamp})"
    } >> "$TME_LOG_FILE"

    echo "$orig_log_state" > "$LOG_STATE_FILE"
}

# Stop timing for a component (alias for end_timer for compatibility)
tme_stop_timer() {
    local component="$1"
    local status="${2:-success}"
    tme_end_timer "$component" "$status"
}

# End timing for a component
tme_end_timer() {
    local component="$1"
    local status="${2:-success}"
    local timestamp=$(date +%s.%N)

    TME_END_TIMES[$component]=$timestamp

    local start_time="${TME_START_TIMES[$component]}"
    if [[ -n "$start_time" ]]; then
        TME_DURATIONS[$component]=$(echo "$timestamp - $start_time" | bc)
        TME_STATUS[$component]=$status
    else
        TME_DURATIONS[$component]=0
        TME_STATUS[$component]="error_no_start"
    fi

    TME_CURRENT_PARENT="${TME_PARENTS[$component]}"

    local orig_log_state
    orig_log_state=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
    echo "false" > "$LOG_STATE_FILE"

    {
        printf "[END] %s\n" "$component"
        printf "Status: %s\n" "$status"
        printf "Duration: %.3fs\n\n" "${TME_DURATIONS[$component]}"
    } >> "$TME_LOG_FILE"

    echo "$orig_log_state" > "$LOG_STATE_FILE"
}

# Calculate the depth of a component in the timing tree
calculate_component_depth() {
    local component="$1"
    local depth=0
    local current="$component"

    while [[ -n "${TME_PARENTS[$current]}" ]]; do
        ((depth++))
        current="${TME_PARENTS[$current]}"
    done

    echo "$depth"
}

# Print formatted timing entry
print_timing_entry() {
    local component="$1"
    local base_indent="$2"
    local duration="$3"
    local total_time="$4"
    local depth="$5"
    local status="${TME_STATUS[$component]}"

    local percentage=0
    if (( $(echo "$total_time > 0" | bc -l) )); then
        percentage=$(echo "scale=2; ($duration / $total_time) * 100" | bc)
    fi

    local color
    case $depth in
        0) color=$TME_RED ;;
        1) color=$TME_ORANGE ;;
        2) color=$TME_YELLOW ;;
        3) color=$TME_GREEN ;;
        4) color=$TME_CYAN ;;
        5) color=$TME_BLUE ;;
        6) color=$TME_INDIGO ;;
        7) color=$TME_VIOLET ;;
        *) color=$TME_WHITE ;;
    esac

    local status_icon
    case "$status" in
        "success") status_icon="✓" ;;
        "error_no_start") status_icon="✗" ;;
        "running") status_icon="⏳" ;;
        *) status_icon="?" ;;
    esac

    local tree_prefix="└─ "
    local component_display
    component_display=$(printf "%-25s" "$component")

    printf "%s%s%s%s %6.3fs [%5.1f%%] [%s]%s\n" \
        "$base_indent" \
        "$color" \
        "$tree_prefix" \
        "$component_display" \
        "$duration" \
        "$percentage" \
        "$status_icon" \
        "$TME_NC"
}

# Helper function to sort an array of component names by their TME_DURATIONS
sort_components_by_duration() {
    local -n _components_ref=$1
    local temp_file
    temp_file=$(mktemp)

    for comp_name in "${_components_ref[@]}"; do
        if [[ -n "${TME_DURATIONS[$comp_name]}" ]]; then
            printf "%.9f %s\n" "${TME_DURATIONS[$comp_name]}" "$comp_name" >> "$temp_file"
        else
            printf "0 %s\n" "$comp_name" >> "$temp_file"
        fi
    done

    mapfile -t sorted_lines < <(sort -k1,1nr "$temp_file")
    rm "$temp_file"

    local sorted_comp_names=()
    for line in "${sorted_lines[@]}"; do
        sorted_comp_names+=( "${line#* }" )
    done
    _components_ref=("${sorted_comp_names[@]}")
}

# Recursive function to print the component tree
print_tree_recursive() {
    local component="$1"
    local current_indent="$2"
    local total_time="$3"
    local sort_order="$4"

    local depth
    depth=$(calculate_component_depth "$component")

    if [[ ! -v "TME_DURATIONS[$component]" ]]; then
        return
    fi
    print_timing_entry "$component" "$current_indent" "${TME_DURATIONS[$component]}" "$total_time" "$depth"

    local max_depth
    local max_depth_from_file=""
    if [[ -n "$TME_LEVELS_FILE" && -f "$TME_LEVELS_FILE" ]]; then
        max_depth_from_file=$(cat "$TME_LEVELS_FILE" 2>/dev/null)
    fi
    max_depth="${max_depth_from_file:-9}"

    if ((depth < max_depth)); then
        local children_str="${TME_CHILDREN[$component]}"
        if [[ -n "$children_str" ]]; then
            IFS=':' read -r -a children_array <<< "$children_str"

            local valid_children=()
            for child in "${children_array[@]}"; do
                if [[ -v "TME_DURATIONS[$child]" ]]; then
                    valid_children+=("$child")
                fi
            done
            
            if [[ ${#valid_children[@]} -eq 0 ]]; then
                return
            fi

            if [[ "$sort_order" == "dura" ]]; then
                sort_components_by_duration valid_children
            fi

            for child in "${valid_children[@]}"; do
                print_tree_recursive "$child" "${current_indent}  " "$total_time" "$sort_order"
            done
        fi
    fi
}

# The settme function to control timer output
tme_settme() {
    if [[ "$#" -eq 0 ]]; then
        if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
            echo "Usage: tme_settme [report on|off | sort chron|duration | depth <number>]" >&2
        fi
        return 1
    fi

    local current_report_state
    local current_sort_order
    local current_max_depth

    current_report_state=$(cat "$TME_STATE_FILE" 2>/dev/null || echo "true")
    current_sort_order=$(cat "$TME_SORT_ORDER_FILE_PATH" 2>/dev/null || echo "chron")
    current_max_depth=$(cat "$TME_LEVELS_FILE" 2>/dev/null || echo "9")

    case "$1" in
        report)
            if [[ "$2" == "on" || "$2" == "true" ]]; then
                echo "true" > "$TME_STATE_FILE"
                current_report_state="true"
            elif [[ "$2" == "off" || "$2" == "false" ]]; then
                echo "false" > "$TME_STATE_FILE"
                current_report_state="false"
            else
                if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
                    echo "Invalid value for tme_settme report: $2. Use 'on' or 'off'." >&2
                fi
                return 1
            fi
            ;;
        sort)
            if [[ "$2" == "chron" || "$2" == "duration" ]]; then
                echo "$2" > "$TME_SORT_ORDER_FILE_PATH"
                current_sort_order="$2"
            else
                if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
                    echo "Invalid value for tme_settme sort: $2. Use 'chron' or 'duration'." >&2
                fi
                return 1
            fi
            ;;
        depth)
            if [[ "$2" =~ ^[0-9]+$ ]]; then
                echo "$2" > "$TME_LEVELS_FILE"
                current_max_depth="$2"
            else
                if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
                    echo "Invalid value for tme_settme depth: $2. Must be a number." >&2
                fi
                return 1
            fi
            ;;
        *)
            if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
                echo "Invalid command for tme_settme: $1" >&2
            fi
            return 1
            ;;
    esac
    if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${TME_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
        printf "Timing Report: %s | Sort Order: %s | Max Depth: %s\n" \
            "$current_report_state" "$current_sort_order" "$current_max_depth"
    fi
}

# Enhanced timing report
tme_print_timing_report() {
    if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" != "on" || "${TME_TERMINAL_VERBOSITY:-on}" != "on" ]]; then
        return 0 # Do not print report if verbosity is off
    fi

    local report_enabled
    report_enabled=$(cat "$TME_STATE_FILE" 2>/dev/null || echo "true")
    if [[ "$report_enabled" != "true" ]]; then
        return 0 # Report is explicitly disabled
    fi

    local total_duration
    total_duration=$(echo "$(date +%s.%N) - $TME_STARTUP_BEGIN" | bc)
    local sort_order
    sort_order=$(cat "$TME_SORT_ORDER_FILE_PATH" 2>/dev/null || echo "chron")

    printf "\n%s ━ RC Timing Report%s\n" "$TME_BLUE" "$TME_NC"
    printf "%s ━ Generated: %s%s\n" "$TME_BLUE" "$(date)" "$TME_NC"
    printf "%s ━ Total execution time: %.3fs%s\n" "$TME_BLUE" "$total_duration" "$TME_NC"
    printf "%s ━ Sort order: %s%s\n" "$TME_BLUE" "$sort_order" "$TME_NC"
    printf "\n"

    local components_to_print=()
    # Populate components_to_print based on top-level items (no parent)
    for comp in "${TME_COMPONENT_ORDER[@]}"; do
        if [[ -z "${TME_PARENTS[$comp]}" ]]; then
            components_to_print+=("$comp")
        fi
    done

    if [[ "$sort_order" == "duration" ]]; then
        sort_components_by_duration components_to_print # This sorts the array in place
    fi    

    for component in "${components_to_print[@]}"; do
        print_tree_recursive "$component" "  " "$total_duration" "$sort_order"
    done

    printf "\n%s ━ Timing log file: %s%s\n" "$TME_BLUE" "$TME_LOG_FILE" "$TME_NC"
    printf "\n"
}

# Example of how to use nested timing
tme_start_nested_timing() {
    local component="$1"
    tme_start_timer "$component"
}

tme_end_nested_timing() {
    local component="$1"
    tme_end_timer "$component"
}

tme_cleanup_timer() {
    local orig_log_state
    orig_log_state=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "true")
    echo "false" > "$LOG_STATE_FILE"

    for component in "${!TME_STATUS[@]}"; do
        if [[ "${TME_STATUS[$component]}" == "running" ]]; then
            tme_end_timer "$component" "interrupted"
        fi
    done

    {
        printf "====================\n"
        printf "Timer cleanup completed at %s\n" "$(date)"
        printf "Total execution time: %.3fs\n\n" "$(echo "$(date +%s.%N) - $TME_STARTUP_BEGIN" | bc)"
    } >> "$TME_LOG_FILE"


}

# Add automatic initialization when sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    tme_init_timer "$LOG_DIR"
fi

# Export all functions and variables
export TME_STARTUP_BEGIN
export -A TME_START_TIMES
export -A TME_END_TIMES
export -A TME_DURATIONS
export -A TME_STATUS
export -A TME_PARENTS
export -A TME_CHILDREN
export TME_CURRENT_PARENT
export TME_LOG_FILE
export TME_SORT_ORDER_FILE_PATH
export -ga TME_COMPONENT_ORDER
export -f tme_init_timer
export -f tme_start_timer
export -f tme_stop_timer
export -f tme_end_timer
export -f tme_start_nested_timing
export -f tme_end_nested_timing
export -f calculate_component_depth
export -f print_timing_entry
export -f print_tree_recursive
export -f tme_print_timing_report
export -f tme_settme
export -f tme_cleanup_timer
export -f sort_components_by_duration
