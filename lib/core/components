#!/bin/bash

# Helper function to safely source files with improved error handling and logging
source_helper() {
    local file="$1"
    local description="${2:-$(basename "$file")}"
    local temp_dir="/tmp"
    local temp_error="$temp_dir/source_error.$$"

    start_timer "source_$description"

    # Verify the file exists
    if [[ ! -f "$file" ]]; then
        log "lvl" " Warning: File $description ($file) not found." | tee -a "$ERROR_LOG" >&2
        error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        end_timer "source_$description"
        return 1
    fi

    # Verify the file is readable
    if [[ ! -r "$file" ]]; then
        log "lvl" " Warning: File $description ($file) is not readable." | tee -a "$ERROR_LOG" >&2
        error_handler "$LINENO" "${ERROR_CODES[PERMISSION_DENIED]}" "false"
        end_timer "source_$description"
        return 1
    fi

    # Verify temp directory exists and is writable
    if [[ ! -d "$temp_dir" ]] || [[ ! -w "$temp_dir" ]]; then
        log "lvl" " Error: Temporary directory $temp_dir is not available or writable" | tee -a "$ERROR_LOG" >&2
        error_handler "$LINENO" "${ERROR_CODES[PERMISSION_DENIED]}" "false"
        end_timer "source_$description"
        return 1
    fi

    # Source the file and capture any errors
    if source "$file" 2>"$temp_error"; then
        log "lvl" "Successfully sourced: $description" | tee -a "$ERROR_LOG"
        end_timer "source_$description" "success"
        rm -f "$temp_error"
        return 0
    else
        local error=$(cat "$temp_error")
        log "lvl" " Error sourcing $description: $error" | tee -a "$ERROR_LOG" >&2
        rm -f "$temp_error"
        error_handler "$LINENO" "${ERROR_CODES[SOURCE_ERROR]}" "false"
        end_timer "source_$description" "error"
        return 1
    fi
}

# Function to source all files in a directory with consistent sorting and error handling
source_directory() {
    local dir="$1"
    local pattern="${2:-*}"
    local description="$3"
    local return_value=0

    start_timer "dir_$description"
    log "lvl" "Sourcing $description: $dir" | tee -a "$ERROR_LOG"

    if [[ ! -d "$dir" ]]; then
        log "lvl" " Warning: Directory $dir not found. Skipping." | tee -a "$ERROR_LOG" >&2
        end_timer "dir_$description"
        return 1
    fi

    # Get all matching files in the directory
    local files=()
    while IFS= read -r -d '' file; do
        files+=("$file")
    done < <(find "$dir" -maxdepth 1 -type f -name "$pattern" -print0 | sort -z)

    if [[ ${#files[@]} -eq 0 ]]; then
        log "lvl" " Warning: No matching files found in $dir" | tee -a "$ERROR_LOG" >&2
        end_timer "dir_$description"
        return 1
    fi

    # Source each file
    local success_count=0
    for file in "${files[@]}"; do
        if source_helper "$file" "$(basename "$file")"; then
            ((success_count++))
        fi
    done

    if ((success_count == 0)); then
        log "lvl" " Warning: No files were successfully sourced from $dir" | tee -a "$ERROR_LOG" >&2
        return_value=1
    else
        log "lvl" "Successfully sourced $success_count files from $dir" | tee -a "$ERROR_LOG"
        return_value=0
    fi

    end_timer "dir_$description"
    return $return_value
}

# Source the environment files
source_env() {
    source_directory "$LAB_DIR/env" "*" "environment configuration files"
    return $?
}

# Source the function files
source_fun() {
    source_directory "$LAB_DIR/fun" "*" "function files"
    return $?
}

# Execute RC-specific setup functions
execution_rc() {
    log "lvl" "Starting ${FUNCNAME[0]}"
    start_timer "execution_rc"

    local setup_functions=("set_static" "set_dynamic" "set_aliaswrap")
    local success_count=0

    for func in "${setup_functions[@]}"; do
        start_nested_timing "setup_${func}"

        if ! type "$func" &>/dev/null; then
            log "lvl" "Warning: Function $func not found" | tee -a "$ERROR_LOG" >&2
            end_nested_timing "setup_${func}" "error_not_found"
            continue
        fi

        log "lvl" "Executing $func"
        if $func; then
            ((success_count++))
            end_nested_timing "setup_${func}" "success"
        else
            log "lvl" "Warning: $func failed" | tee -a "$ERROR_LOG" >&2
            end_nested_timing "setup_${func}" "error_execution"
        fi
    done

    local status=$((success_count > 0 ? "success" : "error"))
    end_timer "execution_rc" "$status"

    return $((success_count > 0 ? 0 : 1))
}

# Component execution with status tracking
execute_component() {
    local func="$1"
    local component="$2"
    local required="${3:-1}"  # Default to required
    local success_var="${component}_SUCCESS"
    local return_value=0

    start_timer "$component"
    log "lvl" " Executing component: $component ..." | tee -a "$ERROR_LOG"

    if ! type "$func" &>/dev/null; then
        log "lvl" " Error: Function $func not found" | tee -a "$ERROR_LOG" >&2
        error_handler "$LINENO" "${ERROR_CODES[FUNCTION_NOT_FOUND]}" "$([[ $required -eq 0 ]] && echo true || echo false)"
        return_value=1
    elif $func; then
        export "$success_var=1"
        log "lvl" " Component $component completed successfully" | tee -a "$ERROR_LOG"
        return_value=0
    else
        unset "$success_var"
        local msg="Component $component failed"
        if ((required)); then
            log "lvl" " Error: $msg" | tee -a "$ERROR_LOG" >&2
            error_handler "$LINENO" "${ERROR_CODES[EXECUTION_FAILED]}" "false"
            return_value=1
        else
            log "lvl" " Warning: $msg (optional component)" | tee -a "$ERROR_LOG" >&2
            error_handler "$LINENO" "${ERROR_CODES[EXECUTION_FAILED]}" "true"
            return_value=0
        fi
    fi

    end_timer "$component"
    return $return_value
}

setup_components() {

    log "lvl" "Validating component configuration..." | tee -a "$ERROR_LOG"

    local components=(
        "execution_rc:EXEC:1"        # Required
        "source_env:ENV:0"           # Optional
        "source_fun:FUN:0"           # Optional
    )

    log "lvl" "Executing component functions..." | tee -a "$ERROR_LOG"

    local failed_required=0
    for component in "${components[@]}"; do
        IFS=':' read -r func name required <<< "$component"
        if ! execute_component "$func" "$name" "$required"; then
            if ((required)); then
                failed_required=1
                log "lvl" " Required component $name failed" | tee -a "$ERROR_LOG" >&2
                break
            fi
        fi
    done

    if ((failed_required)); then
        unset RC_SOURCED
        log "lvl" " RC initialization failed: required component(s) failed" | tee -a "$ERROR_LOG" >&2
        print_timing_report
        print_error_report
        return 1
    else
        export RC_SOURCED=1
        log "lvl" " RC initialization completed successfully" | tee -a "$ERROR_LOG"
        print_timing_report
        print_error_report
        return 0
    fi
}
