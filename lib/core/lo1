#!/bin/bash
#
# -----------------------------------------------------------------------------
# Module: Advanced Logging (lo1)
# -----------------------------------------------------------------------------
# Purpose:     Provide enhanced logging capabilities, including color-coded output,
#              call stack depth analysis for log indentation, and debug logging.
# File:        lib/core/lo1
#
# Description: This module offers a sophisticated logging system for the 'lab'
#              project. It includes functions for debug logging, colorized console
#              output based on log levels or depth, and utilities to calculate
#              and cache logging depths to represent call stack hierarchy.
#
# Dependencies: Relies on 'ver_verify_module' for module integrity checks.
#               Uses environment variables such as LOG_DIR, TMP_DIR,
#               LOG_DEBUG_ENABLED, LOG_STATE_FILE, and LOG_FILE.
#
# Usage:       Sourced by other modules and scripts for consistent logging.
#              Use 'lo1_setlog on|off' to enable or disable logging output to console.
#              Key functions include 'lo1_debug_log' for detailed debug output,
#              'lo1_log_message' for structured logging, 'lo1_get_base_depth' and
#              'lo1_calculate_final_depth' for managing log indentation and context.
#              Backward compatibility aliases are provided for 'setlog', 'log', etc.
#
# Notes:       LOG_DEBUG_ENABLED controls the activation of debug messages.
#              The module maintains a cache for log depths to optimize performance.
#              Color definitions are provided for rich terminal output.
# -----------------------------------------------------------------------------

ver_verify_module "lo1" || exit 1

# Configuration constants
readonly LO1_CACHE_CLEANUP_INTERVAL=${LO1_CACHE_CLEANUP_INTERVAL:-300}  # 5 minutes
readonly LO1_TIMESTAMP_FORMAT=${LO1_TIMESTAMP_FORMAT:-'%H:%M:%S.%2N'}

# Enable debug logging by default
export LOG_DEBUG_ENABLED=1
declare -gA ROOT_FUNCTIONS=([main_rc]=1)

# Cached log state for performance
declare -g LOG_STATE_CACHED=""
declare -g LOG_STATE_LAST_CHECK=0
readonly LOG_STATE_CACHE_TTL=5  # Cache for 5 seconds

# Enhanced debug logging - moved to top
# Debug Log One - DLO
# <message> <source>
lo1_debug_log() {
    [[ "${LOG_DEBUG_ENABLED}" != "1" ]] && return 0
    local timestamp
    printf -v timestamp '%(%H:%M:%S)T' -1
    local message="$1"
    local source="${2:-unknown}"
    printf "[LO1-DEBUG] %s - [%s] %s\n" "$timestamp" "$source" "$message" >> "$LOG_FILE"
}

# Define depth cache file
declare -g LOG_DEPTH_CACHE_FILE="${TMP_DIR}/lo1_depth_cache"

# Color definitions - use centralized color system from lib/core/col
# If col module is available, use its colors; otherwise define our own
if [[ -n "${COL_LOADED:-}" ]]; then
    # Use centralized colors from col module
    readonly LOG_NC="$COL_RESET"
    readonly -a LOG_COLORS=("${COL_DEPTH[@]}")
else
    # Fallback: define our own colors if col module is not available
    readonly LOG_NC=$(printf '\033[0m')
    readonly -a LOG_COLORS=(
        $(printf '\033[0;31m')          # Level 0  - Pure Red
        $(printf '\033[38;5;202m')      # Level 1  - Red-Orange
        $(printf '\033[38;5;208m')      # Level 2  - Orange
        $(printf '\033[38;5;214m')      # Level 3  - Orange-Yellow
        $(printf '\033[38;5;220m')      # Level 4  - Yellow
        $(printf '\033[38;5;112m')      # Level 5  - Yellow-Green
        $(printf '\033[38;5;34m')       # Level 6  - Green
        $(printf '\033[38;5;35m')       # Level 7  - Green-Cyan
        $(printf '\033[38;5;37m')       # Level 8  - Cyan
        $(printf '\033[38;5;39m')       # Level 9  - Cyan-Blue
        $(printf '\033[38;5;27m')       # Level 10 - Blue
        $(printf '\033[38;5;57m')       # Level 11 - Blue-Indigo
        $(printf '\033[38;5;54m')       # Level 12 - Indigo
        $(printf '\033[38;5;93m')       # Level 13 - Indigo-Violet
        $(printf '\033[38;5;92m')       # Level 14 - Violet
        $(printf '\033[38;5;91m')       # Level 15 - Deep Violet
    )
fi

# State tracking
declare -A LOG_DEPTH_CACHE
declare -A LOG_PARENTS
declare -A LOG_CHILDREN
declare -g LOG_CURRENT_PARENT=""
declare -i LAST_CACHE_CLEANUP=0

# Retrieve cached log state to optimize file access performance
# Get Cached Log State - GCL
# 
lo1_get_cached_log_state() {
    local current_time=$(date +%s)
    if [[ -z "$LOG_STATE_CACHED" ]] || ((current_time - LOG_STATE_LAST_CHECK >= LOG_STATE_CACHE_TTL)); then
        LOG_STATE_CACHED=$(cat "$LOG_STATE_FILE" 2>/dev/null || echo "on")
        LOG_STATE_LAST_CHECK=$current_time
    fi
    echo "$LOG_STATE_CACHED"
}

# Display detailed stack trace for debugging function calls
# Dump Stack Trace - DST
# <func>
lo1_dump_stack_trace() {
    local func="${1:-${FUNCNAME[1]}}"
    lo1_debug_log "" "stack"
    lo1_debug_log "Stack trace for $func:" "stack"
    local i=0
    while [[ -n "${FUNCNAME[$i]:-}" ]]; do
        lo1_debug_log "  $i: ${FUNCNAME[$i]:-main} (${BASH_SOURCE[$i]:-unknown}:${BASH_LINENO[$i]:-0})" "stack"
        ((i++))
    done
}

# Periodic cleanup of depth cache to optimize performance
# Cleanup Cache - CCH
# 
cleanup_cache() {
    local current_time=$(date +%s)
    if ((current_time - LAST_CACHE_CLEANUP >= LO1_CACHE_CLEANUP_INTERVAL)); then
        lo1_debug_log "Performing cache cleanup" "cache"
        LOG_DEPTH_CACHE=()
        : > "$LOG_DEPTH_CACHE_FILE"
        LAST_CACHE_CLEANUP=$current_time
    fi
}

# Create required logging directories if they don't exist
# Ensure State Directories - ESD
# 
ensure_state_directories() {
    local dirs=("$LOG_DIR" "$TMP_DIR")
    local success=true

    for dir in "${dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            if ! mkdir -p "$dir" 2>/dev/null; then
                echo "Warning: Failed to create directory: $dir" >&2
                success=false
            fi
        fi
    done

    $success
}

# Initialize state files for logging
# Initialize State Files - ISF
# 
init_state_files() {
    [[ ! -f "$LOG_STATE_FILE" ]] && echo "on" > "$LOG_STATE_FILE"  # Changed "true" to "on"
    [[ ! -f "$LOG_DEPTH_CACHE_FILE" ]] && touch "$LOG_DEPTH_CACHE_FILE"
}

# Check if given function is a root function for depth calculation
# Is Root Function - IRF
# <func_name>
is_root_function() {
    local func_name="$1"
    case "$func_name" in
        main_rc) return 0 ;;
        *) return 1 ;;
    esac
}

# Calculate base depth for call stack indentation in logs
# Get Base Depth - GBD
# 
lo1_get_base_depth() {
    local current_func="${FUNCNAME[1]:-main}"

    # Performance: Check cache first
    if [[ -n "${LOG_DEPTH_CACHE[$current_func]:-}" ]]; then
        lo1_debug_log "Cache hit for $current_func: ${LOG_DEPTH_CACHE[$current_func]}" "depth"
        echo "${LOG_DEPTH_CACHE[$current_func]}"
        return
    fi

    cleanup_cache

    local depth=0
    local i=1
    local prev_func=""
    local found_exec=false
    local stack_trace=""

    while [[ -n "${FUNCNAME[$i]:-}" ]]; do
        local func="${FUNCNAME[$i]}"

        [[ "$func" =~ ^(lo1_log|debug_log|lo1_get_base_depth|lo1_get_indent)$ ]] && { ((i++)); continue; }
        [[ "$func" == "execution_rc" ]] && found_exec=true
        [[ "$func" == "$prev_func" ]] && { ((i++)); continue; }

        if ! is_root_function "$func"; then
            ((depth++))
        elif [[ "$func" == "main_rc" ]]; then
            break
        fi

        stack_trace+="$func:"
        prev_func="$func"
        ((i++))
    done

    [[ "$found_exec" == "true" ]] && ((depth++))

    # Cache the result
    LOG_DEPTH_CACHE[$current_func]=$depth
    lo1_debug_log "Cached depth for $current_func: $depth (stack: $stack_trace)" "depth"

    echo "$depth"
}

# Calculate final depth for logging
# Calculate Final Depth - CFD
# 
lo1_calculate_final_depth() {
    lo1_get_base_depth
}

# Get indentation string based on depth
# Get Indent - GIN
# <depth>
lo1_get_indent() {
    local depth="$1"
    local indent=""

    case $depth in
        0) indent="    " ;;
        1) indent="      " ;;
        *)
            indent="      "
            for ((i=2; i<=depth; i++)); do
                indent="  $indent"
            done
            ;;
    esac

    echo -n "$indent└─"
}

# Get color based on depth level
# Get Color - GCO
# <depth>
lo1_get_color() {
    local depth="$1"
    if ((depth >= 0 && depth < ${#LOG_COLORS[@]})); then
        echo -n "${LOG_COLORS[$depth]}"
    else
        echo -n "${LOG_COLORS[15]}"  # For any depth > 15, use deep violet
    fi
}

# Main logging function
# Main Log Function - LOG
# <lvl> <message>
lo1_log() {
    [[ "$1" != "lvl" ]] && { echo "Error: Invalid log command" >&2; return 1; }
    local message="$2"
    local log_enabled
    log_enabled=$(lo1_get_cached_log_state)

    local depth
    depth=$(lo1_calculate_final_depth)
    local indent
    indent=$(lo1_get_indent "$depth")
    local color
    color=$(lo1_get_color "$depth")
    local timestamp
    printf -v timestamp '%(%H:%M:%S)T' -1

    # 1. Log to file if lo1 logging is enabled
    if [[ "$log_enabled" == "on" ]]; then
        if [[ "$message" == *"Report"* || "$message" == *"initialization"* ]]; then
            printf " %s━ %s%s\n" "$color" "$message" "$LOG_NC" >> "$LOG_FILE"
        else
            printf "%s%s %s %s%s\n" "$indent" "$color" "$timestamp" "$message" "$LOG_NC" >> "$LOG_FILE"
        fi
    fi

    # 2. Conditionally log to terminal
    #    Respects lo1's own state (setlog on/off), global verbosity, and lo1-specific verbosity
    if [[ "$log_enabled" == "on" && "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${LO1_LOG_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
        if [[ "$message" == *"Report"* || "$message" == *"initialization"* ]]; then
            printf " %s━ %s%s\n" "$color" "$message" "$LOG_NC" # Output to stdout
        else
            printf "%s%s %s %s%s\n" "$indent" "$color" "$timestamp" "$message" "$LOG_NC" >&2 # Output to stderr
        fi
    fi

    [[ "${LOG_DEBUG_ENABLED}" == "1" ]] && { lo1_debug_log "Logged: $message (Depth: $depth)" "log"; lo1_dump_stack_trace "log"; }
}

# Logger control
# Set Log State - SLG
# <state>
lo1_setlog() {
    case "$1" in
        "off")
            echo "off" > "$LOG_STATE_FILE"
            LOG_STATE_CACHED="off"  # Update cache immediately
            LOG_STATE_LAST_CHECK=$(date +%s)
            if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${LO1_LOG_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
                printf "%s      └─ Logging disabled%s\n" "$LOG_NC"
            fi
            ;;
        "on")
            echo "on" > "$LOG_STATE_FILE"
            LOG_STATE_CACHED="on"  # Update cache immediately
            LOG_STATE_LAST_CHECK=$(date +%s)
            if [[ "${MASTER_TERMINAL_VERBOSITY:-on}" == "on" && "${LO1_LOG_TERMINAL_VERBOSITY:-on}" == "on" ]]; then
                printf "%s      └─ Logging enabled%s\n" "$LOG_NC"
            fi
            ;;
        *)
            printf "Usage: lo1_setlog on|off\n"
            return 1
            ;;
    esac
}

# Initialize logger system and setup logging environment
# Initialize Logger - ILG
# 
lo1_init_logger() {
    ensure_state_directories # Ensure $LOG_DIR and $TMP_DIR exist

    # Clear lo1.log at the start of logger initialization
    if [[ -n "$LOG_FILE" ]]; then
        # The directory for LOG_FILE should exist due to ensure_state_directories
        if : > "$LOG_FILE"; then
            : # Successfully cleared
        else
            echo "Warning: Failed to clear $LOG_FILE. Check permissions or path." >&2
        fi
    else
        echo "Warning: LOG_FILE variable not set in lib/util/lo1 init_logger. Cannot clear lo1.log." >&2
    fi

    init_state_files     # Ensure state files like $LOG_STATE_FILE exist (might be empty)

    lo1_debug_log "Initializing logger..." "init_logger"

    # Default to 'on' if state file is missing, empty, or has invalid content
    # Assumes LOG_STATE_FILE is defined in the environment (e.g., from ric)
    if [[ -z "$LOG_STATE_FILE" ]]; then
        lo1_debug_log "LOG_STATE_FILE variable is not set. Cannot manage logger state persistence. Logging will be 'on' by default for this session." "init_logger"
        lo1_setlog "on" # Attempt to set log on, but state won't be saved if LOG_STATE_FILE is unknown
    elif [[ ! -f "$LOG_STATE_FILE" || ! -s "$LOG_STATE_FILE" ]]; then
        lo1_debug_log "Log state file '$LOG_STATE_FILE' is missing or empty. Defaulting to 'on'." "init_logger"
        lo1_setlog "on" # This should also write 'on' to LOG_STATE_FILE
    else
        local current_state
        current_state=$(<"$LOG_STATE_FILE")
        if [[ "$current_state" == "on" ]]; then # Changed from "true"
            lo1_setlog "on"
            lo1_debug_log "Logger state loaded as 'on' from $LOG_STATE_FILE." "init_logger"
        elif [[ "$current_state" == "off" ]]; then # Changed from "false"
            lo1_setlog "off"
            lo1_debug_log "Logger state loaded as 'off' from $LOG_STATE_FILE." "init_logger"
        else
            # If the file has "true", "false", or something else, it defaults to "on"
            lo1_debug_log "Invalid content in $LOG_STATE_FILE: '$current_state'. Defaulting to 'on'." "init_logger"
            lo1_setlog "on"
        fi
    fi
    lo1_debug_log "Logger initialization completed." "init_logger"
}

# Clean up logger state and reset cache variables
# Cleanup Logger - CLG
# 
lo1_cleanup_logger() {
    lo1_debug_log "Cleaning up logger state" "cleanup"
    LOG_DEPTH_CACHE=()
    LOG_PARENTS=()
    LOG_CHILDREN=()
    LOG_CURRENT_PARENT=""
    [[ -f "$LOG_DEPTH_CACHE_FILE" ]] && : > "$LOG_DEPTH_CACHE_FILE"
}

# Add automatic cleanup registration
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    trap lo1_cleanup_logger EXIT
fi

# Standard logging function for modules to use
# Log Message One - LMO
# <message> <level> <component>
lo1_log_message() {
    local message="$1"
    local level="${2:-1}"
    local component="${3:-${FUNCNAME[1]:-main}}"
    local timestamp
    printf -v timestamp '%(%Y-%m-%d %H:%M:%S)T' -1
    
    # Get indent and color based on call stack depth
    local depth
    depth=$(lo1_calculate_final_depth) # Calculate depth
    local indent
    indent=$(lo1_get_indent "$depth") # Use depth for indent
    local color
    color=$(lo1_get_color "$level") # Use level for color
    local reset="$LOG_NC"
    
    # Format the message
    local formatted_message="${color}${indent}[$component] $message${reset}"
    
    # Log to file
    printf "[LOG] %s - %s\n" "$timestamp" "$formatted_message" >> "$LOG_FILE"
    
    # Output to console if enabled
    local log_enabled
    log_enabled=$(lo1_get_cached_log_state)
    if [[ "$log_enabled" == "on" ]]; then
        printf "%s\n" "$formatted_message"
    fi
    
    return 0
}

# Log message with timing information if TME module available
# Log Message Timer One - LTO
# <message> <component> <level>
lo1_tme_log_with_timer() {
    local message="$1"
    local component="${2:-${FUNCNAME[1]:-main}}"
    local level="${3:-1}"
    
    # Check if TME module is available and if the component has timing data
    if declare -p TME_DURATIONS &>/dev/null && [[ -n "${TME_DURATIONS[$component]:-}" ]]; then
        local elapsed="${TME_DURATIONS[$component]}"
        lo1_log_message "$message (elapsed: ${elapsed}s)" "$level" "$component"
    else
        lo1_log_message "$message (timing unavailable)" "$level" "$component"
    fi
    
    return 0
}

# Export optimized functions and variables
export LOG_FILE LOG_STATE_FILE TMP_DIR
export -f lo1_log lo1_setlog lo1_init_logger lo1_cleanup_logger lo1_get_cached_log_state
export -f is_root_function lo1_get_base_depth lo1_calculate_final_depth
export -f lo1_get_indent lo1_get_color lo1_debug_log lo1_dump_stack_trace
export -f lo1_log_message lo1_tme_log_with_timer
export -A ROOT_FUNCTIONS LOG_COLORS

# Backward compatibility aliases for commonly used public functions
alias log='lo1_log'
alias setlog='lo1_setlog'
alias init_logger='lo1_init_logger'
alias cleanup_logger='lo1_cleanup_logger'
alias get_cached_log_state='lo1_get_cached_log_state'
alias get_base_depth='lo1_get_base_depth'
alias calculate_final_depth='lo1_calculate_final_depth'
alias get_indent='lo1_get_indent'
alias get_color='lo1_get_color'
alias dump_stack_trace='lo1_dump_stack_trace'

# Initialize on source
lo1_init_logger
