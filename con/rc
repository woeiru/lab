#!/bin/bash
set -o pipefail

# First declare all globals
declare -g TRAP_INITIALIZED
declare -gA CLEANUP_FUNCTIONS
declare -g TRAP_INITIALIZED=false
declare -g VERIFICATION_MODE="RC"  # Can be "RC" or "FALLBACK"

ini_log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local message="${2:-$1}"  # Accept both log "lvl" "msg" and log "msg" formats
    printf "[FALLBACK] %s - %s\n" "$timestamp" "$message" >&2
}
export -f fallback_log

# Create initial log function that uses fallback until real logging is ready
log() {
    ini_log "$@"
}
export -f log

essential_verify_var() {
    local var_name="$1"
    local var_value="${!var_name}"
    local prefix="[${VERIFICATION_MODE}]"

    if [[ -z "$var_value" ]]; then
        printf "%s Variable '%s' is empty\n" "$prefix" "$var_name" >&2
        return 1
    fi
    return 0
}

essential_verify_path() {
    local var_name=$1
    local var_value=$2
    local var_type=$3
    local create=$4

    if [[ -z "$var_value" ]]; then
        echo "[ERROR] $var_name is not set or empty" | tee -a /tmp/rc_init.log
        return 1
    fi

    if [[ "$var_type" == "dir" ]]; then
        if [[ ! -d "$var_value" ]]; then
            if [[ "$create" == "true" ]]; then
                mkdir -p "$var_value" 2>/dev/null
                if [[ $? -ne 0 ]]; then
                    echo "[ERROR] Failed to create directory: $var_value" | tee -a /tmp/rc_init.log
                    return 1
                fi
                echo "[INFO] Created directory: $var_value" | tee -a /tmp/rc_init.log
            else
                echo "[ERROR] Directory does not exist: $var_value" | tee -a /tmp/rc_init.log
                return 1
            fi
        fi
    elif [[ "$var_type" == "file" ]]; then
        if [[ ! -f "$var_value" ]]; then
            if [[ "$create" == "true" ]]; then
                touch "$var_value" 2>/dev/null
            if [[ $? -ne 0 ]]; then
                    echo "[ERROR] Failed to create file: $var_value" | tee -a /tmp/rc_init.log
                    return 1
                fi
                echo "[INFO] Created file: $var_value" | tee -a /tmp/rc_init.log
            else
                echo "[ERROR] File does not exist: $var_value" | tee -a /tmp/rc_init.log
                return 1
            fi
        fi
    else
        echo "[ERROR] Unknown type: $var_type for $var_name" | tee -a /tmp/rc_init.log
        return 1
    fi

    echo "[INFO] Successfully verified path: $var_value" | tee -a /tmp/rc_init.log
    return 0
}

essential_verify_vars() {
    local failed=0
    for var in "$@"; do
        essential_verify_var "$var" || ((failed++))
    done
    # Return 0 if no failures, 1 if any failed
    return $((failed > 0))
}

essential_check() {
    # Load constants if needed
    if [[ -z "$CONS_LOADED" ]]; then
        local cons_file="${HOME}/lab/dic/cons"
        if [[ ! -f "$cons_file" ]]; then
            printf "[%s] Constants file not found: %s\n" "$VERIFICATION_MODE" "$cons_file" >&2
            return 1
        fi
        source "$cons_file" || {
            printf "[%s] Failed to source constants\n" "$VERIFICATION_MODE" >&2
            return 1
        }
    fi

    # Verify critical variables
    local essential_vars=(LAB_DIR BAS_DIR LOG_DIR TMP_DIR)
    if ! essential_verify_vars "${essential_vars[@]}"; then
        printf "[%s] Critical variable verification failed\n" "$VERIFICATION_MODE" >&2
        return 1
    fi

    # Create essential directories if they don't exist
    for dir in "$LOG_DIR" "$TMP_DIR"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir" || {
                printf "[%s] Failed to create directory: %s\n" "$VERIFICATION_MODE" "$dir" >&2
                return 1
            }
        fi
    done

    return 0
}

# Function to switch verification mode
set_verification_mode() {
    VERIFICATION_MODE="$1"
}

# Initialize verification system
init_verification() {
    # First save original trace settings and enable tracing
    local orig_trace_setting=$(set -o | grep xtrace | cut -f2)
    set -x

    # Create log directory if it doesn't exist
    mkdir -p "$(dirname /tmp/rc_init.log)" 2>/dev/null

    # Redirect all output to both console and a log file
    exec 1> >(tee /tmp/rc_init.log) 2>&1

    echo "Starting initialization verification..."

    # For RC startup
    set_verification_mode "RC"
    if ! essential_check; then
        echo "Fatal: Essential verification failed during RC initialization" >&2
        echo "Check /tmp/rc_init.log for details"
        # Don't exit, just return failure
        return 1
    fi

    # Verify critical directories exist after essential_check
    local missing=0
    for dir in "$LAB_DIR" "$BAS_DIR" "$LOG_DIR" "$TMP_DIR"; do
        if [[ ! -d "$dir" ]]; then
            echo "Creating directory: $dir"
            mkdir -p "$dir" || {
                echo "Failed to create directory: $dir" >&2
                ((missing++))
            }
        fi
    done

    if ((missing > 0)); then
        echo "Some directories could not be created" >&2
        return 1
    fi

    # Restore original trace setting
    if [[ "$orig_trace_setting" == "off" ]]; then
        set +x
    fi

    echo "Initialization verification completed successfully"
    return 0
}

# Fallback initialization
init_fallback_verification() {
    # For fallback mode
    set_verification_mode "FALLBACK"
    if ! essential_check; then
        echo "Fatal: Essential verification failed in fallback mode" >&2
        # Don't exit immediately, try to create directories first
        local missing=0
        for dir in "$LOG_DIR" "$TMP_DIR"; do
            if [[ ! -d "$dir" ]]; then
                echo "Attempting to create directory: $dir"
                mkdir -p "$dir" || ((missing++))
            }
        done
        if ((missing > 0)); then
            return 1
        fi
    fi
    return 0
}

verify_module() {
    local module_name="$1"

    # Use essential verification functions
    if ! essential_check; then
        echo "Fatal: Environment verification failed for module: $module_name" >&2
        return 1
    fi

    # Check module-specific required variables
    if [[ -n "${MODULE_REQUIRED_VARS[$module_name]}" ]]; then
        if ! essential_verify_vars ${MODULE_REQUIRED_VARS[$module_name]}; then
            echo "Fatal: Missing required variables for $module_name" >&2
            return 1
        fi
    fi

    # Check module-specific required paths
    if [[ -n "${MODULE_REQUIRED_PATHS[$module_name]}" ]]; then
        # Split path specifications into array
        local path_specs
        IFS=';' read -ra path_specs <<< "${MODULE_REQUIRED_PATHS[$module_name]}"

        for path_spec in "${path_specs[@]}"; do
            # Split single specification into components
            local path_var path_type create_flag
            IFS=':' read -r path_var path_type create_flag <<< "$path_spec"

            if [[ -z "$path_var" || -z "$path_type" ]]; then
                echo "Fatal: Invalid path specification for $module_name: $path_spec" >&2
                return 1
            fi

            # Debug output
            echo "[DEBUG] Processing: var=$path_var type=$path_type create=$create_flag"

            if ! essential_verify_path "$path_var" "$path_type" "${create_flag:-false}"; then
                echo "Fatal: Required path $path_var not accessible for $module_name" >&2
                return 1
            fi
        done
    fi

    return 0
}

list_module_deps() {
    local module="$1"

    echo "Dependencies for module: $module"
    echo "Required variables:"
    if [[ -n "${MODULE_REQUIRED_VARS[$module]}" ]]; then
        echo "  ${MODULE_REQUIRED_VARS[$module]}"
    else
        echo "  None"
    fi

    echo "Required paths:"
    if [[ -n "${MODULE_REQUIRED_PATHS[$module]}" ]]; then
        local IFS=';'
        local paths=(${MODULE_REQUIRED_PATHS[$module]})
        for path_spec in "${paths[@]}"; do
            IFS=':' read -r path_var path_type create_flag <<< "$path_spec"
            echo "  $path_var ($path_type, create: $create_flag)"
        done
    else
        echo "  None"
    fi
}

# Debug logging helper
debug_log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local message="$1"
    local debug_file="$LOG_DEBUG_FILE"
    
    mkdir -p "$(dirname "$debug_file")"
    printf "[DEBUG] %s - %s\n" "$timestamp" "$message" | tee -a "$debug_file" >&2
}

# Add this validation function before init_base
validate_module() {
    local file="$1"
    local module_name="$(basename "$file")"

    # Verify file exists using essential verification
    if ! essential_verify_path "file" "file" false; then
        debug_log "ERROR: $module_name is not a regular file"
        return 1
    fi

    # Check if file is executable
    [[ -x "$file" ]] || {
        debug_log "Adding execute permission to $module_name"
        chmod +x "$file" || {
            debug_log "ERROR: Failed to make $module_name executable"
            return 1
        }
    }

    # Validate shebang
    local shebang
    read -r shebang < "$file"
    [[ "$shebang" == "#!/bin/bash" ]] || {
        debug_log "ERROR: Invalid or missing shebang in $module_name"
        return 1
    }

    return 0
}

# Modified init_base function without var module dependency
init_base() {
    debug_log "Starting init_base"
    debug_log "BAS_DIR=$BAS_DIR"
    debug_log "Current directory: $(pwd)"
    debug_log "Script directory: $CON_DIR"

        # Inside init_base, just before source "$file":
    echo "DEBUG VARS:"
    echo "LOG_STATE_FILE=$LOG_STATE_FILE"
    echo "LOG_DEBUG_FILE=$LOG_DEBUG_FILE"
    echo "LOG_DIR=$LOG_DIR"
    echo "TMP_DIR=$TMP_DIR"
    echo "Current module paths:"
    for path_spec in ${MODULE_REQUIRED_PATHS[lo1]}; do
        echo "Path spec: $path_spec"
        IFS=':' read -r path_var path_type create_flag <<< "$path_spec"
        echo "  Var: $path_var = ${!path_var}"
        echo "  Type: $path_type"
        echo "  Create: $create_flag"
    done

    # Check BAS_DIR using essential verification
    if ! essential_verify_path "BAS_DIR" "dir" false; then
        debug_log "ERROR: BAS_DIR verification failed"
        return 1
    fi

    debug_log "BAS_DIR contents:"
    ls -la "$BAS_DIR" 2>&1 | while read -r line; do
        debug_log "  $line"
    done

    # First initialize directories using essential verification
    debug_log "Initializing directories"
    init_dirs || {
        debug_log "ERROR: Directory initialization failed"
        echo "         └─ Fatal: Directory initialization failed" >&2
        return 1
    }

    local module_loaded=0

    # Updated module loading order array - removed var module
    local modules=(
        "err"
        "lo1"
        "lo2"
        "tme"
    )

    # Track loaded modules for dependencies
    declare -A loaded_modules

    # Try to source each module
    for module in "${modules[@]}"; do
        local file="$BAS_DIR/$module"
        debug_log "Attempting to load module: $module"

        # Validate module before loading
        if ! validate_module "$file"; then
            debug_log "ERROR: Module validation failed for $module"
            continue
        fi

        # Source the module and capture errors
        local error_file
        error_file=$(mktemp)

        if ! source "$file" 2>"$error_file"; then
            local error_output
            error_output=$(<"$error_file")
            rm -f "$error_file"
            debug_log "ERROR: Failed to load module $module with error: $error_output"
            echo "        └─ Warning: Failed to load $module" >&2
            continue
        fi
        rm -f "$error_file"

        # Mark module as loaded
        loaded_modules[$module]=1
        ((module_loaded++))

        # Verify module functions are available
        debug_log "Verifying module functions for: $module"
        for func in $(grep -o '^[a-zA-Z0-9_]\+()' "$file" 2>/dev/null | tr -d '()'); do
            if type "$func" >/dev/null 2>&1; then
                debug_log "  Function verified: $func"
            else
                debug_log "  ERROR: Function not available after sourcing: $func"
            fi
        done
    done

    debug_log "Environment after module loading:"
    env | grep -i "lab\|dir\|path" | while read -r line; do
        debug_log "  $line"
    done

    # Initialize timer system if available using essential verification
    if type init_timer >/dev/null 2>&1 && essential_verify_path "LOG_DIR" "dir" true; then
        debug_log "Initializing timer system"
        init_timer "$LOG_DIR" || {
            debug_log "ERROR: Timer initialization failed"
            echo "         └─ Warning: Timer initialization failed" >&2
        }
    else
        debug_log "Timer initialization function not available"
    fi

    debug_log "init_base completed with $module_loaded modules loaded"
    return $((module_loaded > 0 ? 0 : 1))
}

# init base modules tmp and log dirs
init_dirs() {
    local debug_log="${AUX_DIR:-/tmp}/init_dirs.log"
    mkdir -p "$(dirname "$debug_log")" 2>/dev/null

    # Verify and create base directories using essential verification
    if ! essential_verify_path "LOG_DIR" "dir" true || ! essential_verify_path "TMP_DIR" "dir" true; then
        echo "Fatal: Unable to create base directories" >&2
        return 1
    fi

    # Ensure proper permissions (only for current user)
    chmod 700 "$LOG_DIR" "$TMP_DIR" || {
        echo "Warning: Unable to set directory permissions" >&2
    }

    # Debug logging for initial state
    {
        printf '%s\n' "=== Directory Initialization Debug Log ==="
        printf 'Timestamp: %s\n' "$(date)"
        printf 'Initial TMP_DIR value: %s\n' "${TMP_DIR:-unset}"
        printf 'Initial LOG_DIR value: %s\n' "${LOG_DIR:-unset}"
        printf 'Caller: %s\n' "${FUNCNAME[1]:-main}"
        echo "Call stack:"
        local i=0
        # Redirect stderr to prevent error messages
        while caller $i 2>/dev/null; do
            ((i++))
        done
        echo "Current environment variables affecting paths:"
        env | grep -i "dir\|path" || echo "No relevant environment variables found"
        echo "=== End Initial State ==="
        echo
    } > "$debug_log" 2>/dev/null  # Redirect all potential errors to prevent them

    # Debug logging post-definition
    {
        printf '%s\n' "=== Post-Definition State ==="
        printf 'LOG_DIR set to: %s\n' "${LOG_DIR}"
        printf 'TMP_DIR set to: %s\n' "${TMP_DIR}"
        printf '%s\n\n' "=== End Post-Definition State ==="
    } >> "$debug_log"


    # Verify critical directories exist
    local -a critical_dirs=(
        "${LOG_DIR}"
        "${TMP_DIR}"
    )

    {
        printf '%s\n' "=== Critical Directory Verification ==="
        local missing_critical=0
        local dir
        for dir in "${critical_dirs[@]}"; do
            if [[ ! -d "$dir" ]]; then
                printf 'MISSING CRITICAL DIRECTORY: %s\n' "$dir"
                echo "Parent directory status:"
                ls -ld "$(dirname "$dir")" 2>&1 || echo "Cannot access parent directory"
                printf 'Critical: Required directory missing: %s\n' "$dir" >&2
                missing_critical=1
            else
                printf 'Verified critical directory exists: %s\n' "$dir"
                echo "Directory permissions:"
                ls -ld "$dir"
            fi
        done

        printf '%s\n' "=== Final State ==="
        printf 'Final LOG_DIR: %s\n' "${LOG_DIR}"
        printf 'Final TMP_DIR: %s\n' "${TMP_DIR}"
        printf 'Missing critical directories: %d\n' "$missing_critical"
        printf '%s\n\n' "=== End Directory Initialization ==="

        # Exit if critical directories are missing
        if (( missing_critical )); then
            echo "Fatal: Missing critical directories. Cannot continue." >&2
            return 1
        fi
    } > "$debug_log" 2>/dev/null

    return 0
}

# Central trap registration system
register_cleanup() {
    local module="$1"
    local function="$2"

    [[ -z "$module" || -z "$function" ]] && {
        echo "Error: Invalid cleanup registration arguments" >&2
        return 1
    }
    if [[ -n "$function" && $(type -t "$function") == "function" ]]; then
        CLEANUP_FUNCTIONS[$module]="$function"
        type log >/dev/null 2>&1 && log "lvl" "Registered cleanup for module: $module" || echo "Registered cleanup for module: $module"
    else
        type log >/dev/null 2>&1 && log "lvl" "Failed to register cleanup for module: $module" || echo "Failed to register cleanup for module: $module"
        return 1
    fi
}

# Main cleanup orchestrator
main_cleanup() {
    log "lvl" "Starting main cleanup sequence"

    # First cleanup logging system
    if [[ -n "${CLEANUP_FUNCTIONS[lo]}" ]]; then
        ${CLEANUP_FUNCTIONS[lo]}
    fi

    # Then cleanup timing system
    if [[ -n "${CLEANUP_FUNCTIONS[tme]}" ]]; then
        ${CLEANUP_FUNCTIONS[tme]}
    fi

    # Finally cleanup error handling
    if [[ -n "${CLEANUP_FUNCTIONS[err]}" ]]; then
        ${CLEANUP_FUNCTIONS[err]}
    fi

    log "lvl" "Main cleanup sequence completed"
}

# Central error handler
main_error_handler() {
    local line_number="$1"
    local error_code="$2"

    # Call error handler from err module if available
    if type error_handler &>/dev/null; then
        error_handler "$line_number" "$error_code"
    fi
}

# Initialize trap system
init_traps() {
    if [[ "$TRAP_INITIALIZED" != "true" ]]; then
        # Remove any existing traps
        trap - EXIT
        trap - ERR

        # Set up main traps
        trap main_cleanup EXIT
        trap 'main_error_handler $LINENO $?' ERR

        TRAP_INITIALIZED=true
    fi
}

source_rc() {
    debug_log "Starting source_rc"
    local rc_modules=("rc1" "rc2" "rc3" "rc4")
    local success_count=0

    for module in "${rc_modules[@]}"; do
        debug_log "Attempting to source $module"
        if [[ -r "$CON_DIR/$module" ]]; then
            debug_log "Module $module is readable"
            debug_log "Module permissions: $(ls -l "$CON_DIR/$module")"
            if source "$CON_DIR/$module" 2> >(debug_log "Source error: $(cat)"); then
                debug_log "Successfully sourced $module"
                ((success_count++))
            else
                debug_log "ERROR: Failed to source $module"
            fi
        else
            debug_log "ERROR: Cannot read $module at $CON_DIR/$module"
        fi
    done

    debug_log "source_rc completed with $success_count successful modules"
    [[ $success_count -gt 0 ]] || return 1
    return 0
}

debug_rc_init() {
    echo "Checking critical paths..."
    echo "HOME=$HOME"
    echo "LAB_DIR=$LAB_DIR"
    echo "BAS_DIR=$BAS_DIR"
    echo "LOG_DIR=$LOG_DIR"
    echo "TMP_DIR=$TMP_DIR"

    echo -e "\nChecking directory existence:"
    for dir in "$HOME" "$LAB_DIR" "$BAS_DIR" "$LOG_DIR" "$TMP_DIR"; do
        printf "%-30s: %s\n" "$dir" "$([ -d "$dir" ] && echo "exists" || echo "missing")"
    done

    echo -e "\nChecking file permissions:"
    for dir in "$HOME" "$LAB_DIR" "$BAS_DIR" "$LOG_DIR" "$TMP_DIR"; do
        if [ -e "$dir" ]; then
            ls -ld "$dir"
        fi
    done
}

# Modified main_rc to remove module function dependencies
main_rc() {
    # Save original error exit setting
    local orig_errexit_setting=$(set -o | grep errexit | cut -f2)
    set +e  # Disable exit on error temporarily

    echo "Starting main_rc initialization..." | tee -a /tmp/rc_init.log

    # Try initialization with status tracking
    if ! init_verification; then
        echo "Warning: Initialization verification failed, attempting fallback mode..." >&2 | tee -a /tmp/rc_init.log
        if ! init_fallback_verification; then
            echo "Fatal: Both main and fallback initialization failed" >&2 | tee -a /tmp/rc_init.log
            return 1
        fi
    fi

    echo "      └─ main_rc : init_traps" | tee -a /tmp/rc_init.log
    init_traps || {
        echo "Warning: Trap initialization failed" >&2 | tee -a /tmp/rc_init.log
        echo "init_traps returned: $?" >> /tmp/rc_init.log
    }

    echo "      └─ main_rc : init_base" | tee -a /tmp/rc_init.log
    init_base
    local init_base_status=$?
    echo "init_base returned: $init_base_status" >> /tmp/rc_init.log

    # Track status of each major operation
    local rc_status=0

    # Simple echo for logging
    echo "main_rc : source_rc" | tee -a /tmp/rc_init.log

    # Source RC files with status tracking
    if ! source_rc; then
        echo "Warning: Failed to source RC files" >&2 | tee -a /tmp/rc_init.log
        rc_status=1
    fi

    # Restore original errexit setting
    if [[ "$orig_errexit_setting" == "on" ]]; then
        set -e
    fi

    echo "main_rc completing with status: $rc_status" >> /tmp/rc_init.log
    return $rc_status
}

echo " ─── initializing"
# Disable exit on error for the initialization
set +e

# Add debug trapping for main_rc status
main_rc
MAIN_RC_STATUS=$?
echo "main_rc returned with status: $MAIN_RC_STATUS" >> /tmp/rc_init.log

if [ $MAIN_RC_STATUS -ne 0 ]; then
    echo "RC initialization failed with status $MAIN_RC_STATUS. Check /tmp/rc_init.log for details" >&2
    # Create essential directories as last resort
    for dir in "$LOG_DIR" "$TMP_DIR"; do
        mkdir -p "$dir" 2>/dev/null
    done

    # Set up minimal environment to keep shell usable
    echo "Setting up minimal environment..." >&2
    export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$HOME/bin"

    # Set a basic prompt to indicate we're in minimal mode
    PS1="(minimal)[\u@\h \W]\$ "

    # Continue with shell despite initialization failure
    return 0
fi

# Restore exit on error if it was enabled
if [[ "$(set -o | grep errexit | cut -f2)" == "on" ]]; then
    set -e
fi

export VERIFICATION_MODE
export -f essential_verify_var essential_verify_path essential_verify_vars
export -f essential_check set_verification_mode
export -f init_verification init_fallback_verification
