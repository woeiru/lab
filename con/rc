#!/bin/bash
set -o pipefail

export LOG_DIR="/var/log/lab"
export TMP_DIR="/tmp/lab"

# Create all required base directories
for dir in \
    "$LOG_DIR" "$TMP_DIR" \
    "$LOG_DIR/lo" "$TMP_DIR/lo" \
    "$LOG_DIR/tme" "$TMP_DIR/tme" \
    "$LOG_DIR/rc" "$TMP_DIR/rc"; do
    mkdir -p "$dir" 2>/dev/null
done

[[ ! -d "$LOG_DIR" ]] && LOG_DIR="/tmp/lab"

# Set up important directory paths
DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)"
PARENT_DIR="/root/lab"
export LAB_DIR="$PARENT_DIR"

# Initialize timer at the very start
[[ -z "${BAS_DIR:-}" ]] && readonly BAS_DIR="$PARENT_DIR/bas"
source "$BAS_DIR/tme" || {
    echo "Fatal: Failed to source timing module" >&2
    exit 1
}
command source "$BAS_DIR/err" || {
    echo "Fatal: Failed to source error handling module" >&2
    exit 1
}

# Initialize systems
init_timer "$RC_LOG_DIR"

# Helper function to safely source files with improved error handling and logging
source_helper() {
    local file="$1"
    local description="${2:-$(basename "$file")}"

    start_timer "source_$description"

    if [[ ! -f "$file" ]]; then
        echo "       ━ Warning: File $description ($file) not found." | tee -a "$ERROR_LOG" >&2
        error_handler "$LINENO" "${ERROR_CODES[FILE_NOT_FOUND]}" "false"
        end_timer "source_$description"
        return 1
    fi

    if [[ ! -r "$file" ]]; then
        echo "       ━ Warning: File $description ($file) is not readable." | tee -a "$ERROR_LOG" >&2
        error_handler "$LINENO" "${ERROR_CODES[PERMISSION_DENIED]}" "false"
        end_timer "source_$description"
        return 1
    fi

    # Source the file and capture any errors
    local temp_error="/tmp/source_error.$$"
    if source "$file" 2>"$temp_error"; then
        echo "       ━ Successfully sourced: $description" | tee -a "$ERROR_LOG"
        end_timer "source_$description" "success"
        rm -f "$temp_error"
        return 0
    else
        local error=$(cat "$temp_error")
        echo "       ━ Error sourcing $description: $error" | tee -a "$ERROR_LOG" >&2
        rm -f "$temp_error"
        error_handler "$LINENO" "${ERROR_CODES[SOURCE_ERROR]}" "false"
        end_timer "source_$description" "error"
        return 1
    fi
}

# Function to source all files in a directory with consistent sorting and error handling
source_directory() {
    local dir="$1"
    local pattern="${2:-*}"
    local description="$3"
    local return_value=0

    start_timer "dir_$description"
    echo "     ━ Sourcing $description: $dir" | tee -a "$ERROR_LOG"

    if [[ ! -d "$dir" ]]; then
        echo "     ━ Warning: Directory $dir not found. Skipping." | tee -a "$ERROR_LOG" >&2
        end_timer "dir_$description"
        return 1
    fi

    # Get all matching files in the directory
    local files=()
    while IFS= read -r -d '' file; do
        files+=("$file")
    done < <(find "$dir" -maxdepth 1 -type f -name "$pattern" -print0 | sort -z)

    if [[ ${#files[@]} -eq 0 ]]; then
        echo "     ━ Warning: No matching files found in $dir" | tee -a "$ERROR_LOG" >&2
        end_timer "dir_$description"
        return 1
    fi

    # Source each file
    local success_count=0
    for file in "${files[@]}"; do
        if source_helper "$file" "$(basename "$file")"; then
            ((success_count++))
        fi
    done

    if ((success_count == 0)); then
        echo "     ━ Warning: No files were successfully sourced from $dir" | tee -a "$ERROR_LOG" >&2
        return_value=1
    else
        echo "     ━ Successfully sourced $success_count files from $dir" | tee -a "$ERROR_LOG"
        return_value=0
    fi

    end_timer "dir_$description"
    return $return_value
}

# Source the base files
source_bas() {
    source_directory "$BAS_DIR" "*" "base folder"
    return $?
}

# Source the RC modules
source_rc() {
    log "lvl" "Sourcing primary RC modules"
    local rc_modules=("rc1" "rc2" "rc3")
    local success_count=0

    for module in "${rc_modules[@]}"; do
        if source_helper "$DIR/$module" "RC module $module"; then
            ((success_count++))
        fi
    done

    if ((success_count == 0)); then
        log "lvl" "Warning: No RC modules were successfully sourced"
        return 1
    fi

    return 0
}

# Source the environment files
source_env() {
    source_directory "$PARENT_DIR/env" "*" "environment configuration files"
    return $?
}

# Source the function files
source_fun() {
    source_directory "$PARENT_DIR/fun" "*" "function files"
    return $?
}

# Execute RC-specific setup functions
execution_rc() {
    log "lvl" "Starting ${FUNCNAME[0]}"
    start_timer "execution_rc"

    local setup_functions=("set_static" "set_dynamic" "set_aliaswrap")
    local success_count=0

    for func in "${setup_functions[@]}"; do
        start_nested_timing "setup_${func}"

        if ! type "$func" &>/dev/null; then
            log "lvl" "Warning: Function $func not found" | tee -a "$ERROR_LOG" >&2
            end_nested_timing "setup_${func}" "error_not_found"
            continue
        fi

        log "lvl" "Executing $func"
        if $func; then
            ((success_count++))
            end_nested_timing "setup_${func}" "success"
        else
            log "lvl" "Warning: $func failed" | tee -a "$ERROR_LOG" >&2
            end_nested_timing "setup_${func}" "error_execution"
        fi
    done

    local status=$((success_count > 0 ? "success" : "error"))
    end_timer "execution_rc" "$status"

    return $((success_count > 0 ? 0 : 1))
}

# Component execution with status tracking
execute_component() {
    local func="$1"
    local component="$2"
    local required="${3:-1}"  # Default to required
    local success_var="${component}_SUCCESS"
    local return_value=0

    start_timer "$component"
    echo | tee -a "$ERROR_LOG"
    echo "   ━ Executing component: $component" | tee -a "$ERROR_LOG"

    if ! type "$func" &>/dev/null; then
        echo "   ━ Error: Function $func not found" | tee -a "$ERROR_LOG" >&2
        error_handler "$LINENO" "${ERROR_CODES[FUNCTION_NOT_FOUND]}" "$([[ $required -eq 0 ]] && echo true || echo false)"
        return_value=1
    elif $func; then
        export "$success_var=1"
        echo "   ━ Component $component completed successfully" | tee -a "$ERROR_LOG"
        return_value=0
    else
        unset "$success_var"
        local msg="Component $component failed"
        if ((required)); then
            echo "   ━ Error: $msg" | tee -a "$ERROR_LOG" >&2
            error_handler "$LINENO" "${ERROR_CODES[EXECUTION_FAILED]}" "false"
            return_value=1
        else
            echo "   ━ Warning: $msg (optional component)" | tee -a "$ERROR_LOG" >&2
            error_handler "$LINENO" "${ERROR_CODES[EXECUTION_FAILED]}" "true"
            return_value=0
        fi
    fi

    end_timer "$component"
    return $return_value
}

# Main execution function with component dependency management
main_rc() {
    local components=(
        "source_bas:BAS:1"           # Required
        "source_rc:RC:1"             # Required
        "source_env:ENV:0"           # Optional
        "source_fun:FUN:0"           # Optional
        "execution_rc:EXEC:1"        # Required
    )

    local failed_required=0

    # Setup error handling
    setup_error_handling

    echo | tee -a "$ERROR_LOG"
    echo " ━ RC initialization started" | tee -a "$ERROR_LOG"

    for component in "${components[@]}"; do
        IFS=':' read -r func name required <<< "$component"

        if ! execute_component "$func" "$name" "$required"; then
            if ((required)); then
                failed_required=1
                echo " ━ Required component $name failed" | tee -a "$ERROR_LOG" >&2
                echo
                break
            fi
        fi
    done

    if ((failed_required)); then
        unset RC_SOURCED
        echo " ━ RC initialization failed: required component(s) failed" | tee -a "$ERROR_LOG" >&2
        echo
        print_timing_report
        print_error_report
        return 1
    else
        export RC_SOURCED=1
        echo
        echo " ━ RC initialization completed successfully" | tee -a "$ERROR_LOG"
        print_timing_report
        print_error_report
        echo
        return 0
    fi
}

# Set up traps for error handling and cleanup
trap 'error_handler $LINENO' ERR
trap 'cleanup_timer' EXIT

# Execute the main function
main_rc
