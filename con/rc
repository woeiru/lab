#!/bin/bash
set -o pipefail

# Global declarations should be at the very top
declare -gA CLEANUP_FUNCTIONS    # Associative array to store cleanup functions by module
declare -g TRAP_INITIALIZED=false    # Global flag to track trap initialization state

# Debug logging helper
debug_log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local message="$1"
    local debug_file="$HOME/.local/lab/log/rc/debug.log"
    
    mkdir -p "$(dirname "$debug_file")"
    printf "[DEBUG] %s - %s\n" "$timestamp" "$message" | tee -a "$debug_file" >&2
}

# Get the current script's directory
DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)"

# Find LAB_DIR by going up two directories from DIR (con -> lab)
export LAB_DIR="$(cd "$DIR/.." >/dev/null 2>&1 && pwd)"

# Set up user-specific log and temp directories
export LOG_DIR="$HOME/.local/lab/log"
export TMP_DIR="$HOME/.local/lab/tmp"

# Set BAS_DIR to the correct directory containing your base modules
export BAS_DIR="$LAB_DIR/bas"

# Add this validation function before init_base
validate_module() {
    local file="$1"
    local module_name="$(basename "$file")"
    
    # Check if file exists and is regular file
    [[ -f "$file" ]] || {
        debug_log "ERROR: $module_name is not a regular file"
        return 1
    }

    # Check if file is executable
    [[ -x "$file" ]] || {
        debug_log "Adding execute permission to $module_name"
        chmod +x "$file" || {
            debug_log "ERROR: Failed to make $module_name executable"
            return 1
        }
    }

    # Validate shebang
    local shebang
    read -r shebang < "$file"
    [[ "$shebang" == "#!/bin/bash" ]] || {
        debug_log "ERROR: Invalid or missing shebang in $module_name"
        return 1
    }

    return 0
}

# init base modules
init_base() {
    debug_log "Starting init_base"
    debug_log "BAS_DIR=$BAS_DIR"
    debug_log "Current directory: $(pwd)"
    debug_log "Script directory: $DIR"

    # Check BAS_DIR exists and is readable
    if [[ ! -d "$BAS_DIR" ]]; then
        debug_log "ERROR: BAS_DIR does not exist: $BAS_DIR"
        return 1
    fi
    
    debug_log "BAS_DIR contents:"
    ls -la "$BAS_DIR" 2>&1 | while read -r line; do
        debug_log "  $line"
    done

    # First initialize directories
    debug_log "Initializing directories"
    init_dirs || {
        debug_log "ERROR: Directory initialization failed"
        echo "         └─ Fatal: Directory initialization failed" >&2
        return 1
    }

    local module_loaded=0
    local fallback_active=false

    # Try to source each module, fall back if needed
    for file in "$BAS_DIR"/*; do
        local module_name=$(basename "$file")
        debug_log "Attempting to load module: $module_name"
        
        # Validate module before loading
        if ! validate_module "$file"; then
            debug_log "ERROR: Module validation failed for $module_name"
            continue
        fi

        # Source the module and capture errors to temp file
        local error_file=$(mktemp)
        if ! source "$file" 2>"$error_file"; then
            local error_output=$(<"$error_file")
            rm -f "$error_file"
            debug_log "ERROR: Failed to load module $module_name with error: $error_output"
            echo "        └─ Warning: Failed to load $module_name" >&2

            case "$module_name" in
                "lo1")
                    debug_log "Activating fallback for logging"
                    fallback_lo
                    echo "         └─ Activated fallback logging system"
                    ;;
                "err")
                    debug_log "Activating fallback for err"
                    fallback_err
                    echo "         └─ Activated fallback error handling"
                    ;;
                "tme")
                    debug_log "Activating fallback for tme"
                    fallback_tme
                    echo "         └─ Activated fallback timing system"
                    ;;
            esac

            fallback_active=true
            continue
        fi
        rm -f "$error_file"

        # Verify module loaded successfully
        if [[ -n "$error_output" ]]; then
            debug_log "WARNING: Module $module_name loaded with warnings: $error_output"
        else
            debug_log "Successfully loaded module: $module_name"
        fi

        # Verify module functions are available
        for func in $(grep -o '^[a-zA-Z0-9_]\+()' "$file" 2>/dev/null | tr -d '()'); do
            if type "$func" >/dev/null 2>&1; then
                debug_log "  Function verified: $func"
            else
                debug_log "  ERROR: Function not available after sourcing: $func"
            fi
        done
        ((module_loaded++))
    done

    debug_log "Environment after module loading:"
    env | grep -i "lab\|dir\|path" | while read -r line; do
        debug_log "  $line"
    done

    # Initialize timer system if available
    if type init_timer >/dev/null 2>&1; then
        debug_log "Initializing timer system"
        init_timer "$RC_LOG_DIR" || {
            debug_log "ERROR: Timer initialization failed"
            echo "         └─ Warning: Timer initialization failed, using fallback" >&2
            fallback_tme
            fallback_active=true
        }
    else
        debug_log "Timer initialization function not available"
    fi

    if $fallback_active; then
        debug_log "Running in fallback mode"
        echo "        └─ Notice: Running in partial fallback mode with minimal functionality"
        return 0
    fi

    debug_log "init_base completed with $module_loaded modules loaded"
    return $((module_loaded > 0 ? 0 : 1))
}

# init base modules tmp and log dirs
init_dirs() {
    local debug_log="$AUX_DIR/init_dirs.log"
    
    # Create base directories with proper permissions
    mkdir -p "$LOG_DIR" "$TMP_DIR" || {
        echo "Fatal: Unable to create base directories" >&2
        return 1
    }

    # Ensure proper permissions (only for current user)
    chmod 700 "$LOG_DIR" "$TMP_DIR" || {
        echo "Warning: Unable to set directory permissions" >&2
    }

    # Debug logging for initial state
    {
        printf '%s\n' "=== Directory Initialization Debug Log ==="
        printf 'Timestamp: %s\n' "$(date)"
        printf 'Initial TMP_DIR value: %s\n' "${TMP_DIR:-unset}"
        printf 'Initial LOG_DIR value: %s\n' "${LOG_DIR:-unset}"
        printf 'Caller: %s\n' "${FUNCNAME[1]:-main}"
        echo "Call stack:"
        local i=0
        # Redirect stderr to prevent error messages
        while caller $i 2>/dev/null; do
            ((i++))
        done
        echo "Current environment variables affecting paths:"
        env | grep -i "dir\|path" || echo "No relevant environment variables found"
        echo "=== End Initial State ==="
        echo
    } > "$debug_log" 2>/dev/null  # Redirect all potential errors to prevent them

    # Force set base directories - override any existing values
    LOG_DIR="$HOME/.local/log/lab"
    TMP_DIR="$HOME/.local/tmp/lab"
    export LOG_DIR TMP_DIR

    # Debug logging post-definition
    {
        printf '%s\n' "=== Post-Definition State ==="
        printf 'LOG_DIR set to: %s\n' "${LOG_DIR}"
        printf 'TMP_DIR set to: %s\n' "${TMP_DIR}"
        printf '%s\n\n' "=== End Post-Definition State ==="
    } >> "$debug_log"

    # LOG & TMP dir structures
    local base_dirs=("${LOG_DIR}" "${TMP_DIR}")
    local sub_dirs=("err" "lo" "tme" "rc")
    local required_dirs=()

    for base in "${base_dirs[@]}"; do
        required_dirs+=("$base")
        for sub in "${sub_dirs[@]}"; do
            required_dirs+=("$base/$sub")
        done  # <- Fixed: changed 'end' to 'done'
    done

    # Create all directories in one pass
    local -a failed_dirs=()
    local dir
    for dir in "${required_dirs[@]}"; do
        if ! mkdir -p "$dir" 2>/dev/null; then
            failed_dirs+=("$dir")
            printf 'Warning: Failed to create directory: %s\n' "$dir" >&2
            {
                printf 'FAILED to create directory: %s\n' "$dir"
                echo "Current permissions:"
                ls -ld "$(dirname "$dir")" 2>&1 || echo "Cannot access parent directory"
            } >> "$debug_log"
        else
            {
                printf 'Successfully created/verified directory: %s\n' "$dir"
                echo "Directory permissions:"
                ls -ld "$dir"
            } >> "$debug_log"
        fi
    done

    # Handle failures and set fallbacks
    if (( ${#failed_dirs[@]} > 0 )); then
        {
            printf '%s\n' "=== Directory Creation Failures ==="
            printf '%s\n' "${failed_dirs[@]}"
            echo "Warning: Some directories could not be created" >&2

            # Critical fallback: If main LOG_DIR fails, use TMP_DIR
            if [[ ! -d "$LOG_DIR" ]]; then
                printf 'LOG_DIR (%s) not accessible, falling back to TMP_DIR\n' "$LOG_DIR"
                LOG_DIR="$TMP_DIR"
                echo "Falling back to TMP_DIR for logging: $TMP_DIR" >&2

                # Attempt to create subdirectories in fallback location
                local subdir
                for subdir in err lo tme rc; do
                    if ! mkdir -p "${LOG_DIR}/${subdir}" 2>/dev/null; then
                        printf 'Warning: Failed to create fallback directory: %s/%s\n' "$LOG_DIR" "$subdir" >&2
                    fi
                done
            fi
        } >> "$debug_log"
    fi

    # Verify critical directories exist
    local -a critical_dirs=(
        "${LOG_DIR}"
        "${TMP_DIR}"
        "${LOG_DIR}/err"
        "${TMP_DIR}/err"
    )

    {
        printf '%s\n' "=== Critical Directory Verification ==="
        local missing_critical=0
        local dir
        for dir in "${critical_dirs[@]}"; do
            if [[ ! -d "$dir" ]]; then
                printf 'MISSING CRITICAL DIRECTORY: %s\n' "$dir"
                echo "Parent directory status:"
                ls -ld "$(dirname "$dir")" 2>&1 || echo "Cannot access parent directory"
                printf 'Critical: Required directory missing: %s\n' "$dir" >&2
                missing_critical=1
            else
                printf 'Verified critical directory exists: %s\n' "$dir"
                echo "Directory permissions:"
                ls -ld "$dir"
            fi
        done

        printf '%s\n' "=== Final State ==="
        printf 'Final LOG_DIR: %s\n' "${LOG_DIR}"
        printf 'Final TMP_DIR: %s\n' "${TMP_DIR}"
        printf 'Missing critical directories: %d\n' "$missing_critical"
        printf '%s\n\n' "=== End Directory Initialization ==="

        # Exit if critical directories are missing
        if (( missing_critical )); then
            echo "Fatal: Missing critical directories. Cannot continue." >&2
            return 1
        fi
    } >> "$debug_log"

    return 0
}

# Central trap registration system
register_cleanup() {
    local module="$1"
    local function="$2"

    if [[ -n "$function" && $(type -t "$function") == "function" ]]; then
        CLEANUP_FUNCTIONS[$module]="$function"
        log "lvl" "Registered cleanup for module: $module"
    else
        log "lvl" "Failed to register cleanup for module: $module - invalid function"
        return 1
    fi
}

# Main cleanup orchestrator
main_cleanup() {
    log "lvl" "Starting main cleanup sequence"

    # First cleanup logging system
    if [[ -n "${CLEANUP_FUNCTIONS[lo]}" ]]; then
        ${CLEANUP_FUNCTIONS[lo]}
    fi

    # Then cleanup timing system
    if [[ -n "${CLEANUP_FUNCTIONS[tme]}" ]]; then
        ${CLEANUP_FUNCTIONS[tme]}
    fi

    # Finally cleanup error handling
    if [[ -n "${CLEANUP_FUNCTIONS[err]}" ]]; then
        ${CLEANUP_FUNCTIONS[err]}
    fi

    log "lvl" "Main cleanup sequence completed"
}

# Central error handler
main_error_handler() {
    local line_number="$1"
    local error_code="$2"

    # Call error handler from err module if available
    if type error_handler &>/dev/null; then
        error_handler "$line_number" "$error_code"
    fi
}

# Initialize trap system
init_traps() {
    if [[ "$TRAP_INITIALIZED" != "true" ]]; then
        # Remove any existing traps
        trap - EXIT
        trap - ERR

        # Set up main traps
        trap main_cleanup EXIT
        trap 'main_error_handler $LINENO $?' ERR

        TRAP_INITIALIZED=true
    fi
}

fallback_lo() {
    # Minimal logging functionality
    log() {
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[FALLBACK-LOG] $timestamp - $2"
    }

    setlog() {
        echo "[FALLBACK-LOG] Logging control not available in fallback mode"
    }

    init_logger() {
        echo "[FALLBACK-LOG] Using minimal fallback logger"
    }

    cleanup_logger() {
        :  # No-op in fallback mode
    }

    # Export fallback functions
    export -f log setlog init_logger cleanup_logger
}

fallback_err() {
    # Minimal error handling
    error_handler() {
        echo "[FALLBACK-ERROR] Error on line $1: $2"
    }

    clean_exit() {
        exit "${1:-0}"
    }

    setup_error_handling() {
        trap 'error_handler $LINENO $?' ERR
    }

    # Export fallback functions
    export -f error_handler clean_exit setup_error_handling
}

fallback_tme() {
    # Minimal timing functionality
    init_timer() {
        echo "[FALLBACK-TIMER] Timer initialization skipped in fallback mode"
    }

    start_timer() {
        :  # No-op in fallback mode
    }

    end_timer() {
        :  # No-op in fallback mode
    }

    print_timing_report() {
        echo "[FALLBACK-TIMER] Timing report not available in fallback mode"
    }

    # Export fallback functions
    export -f init_timer start_timer end_timer print_timing_report
}

source_rc() {
    debug_log "Starting source_rc"
    local rc_modules=("rc1" "rc2" "rc3" "rc4")
    local success_count=0

    for module in "${rc_modules[@]}"; do
        debug_log "Attempting to source $module"
        if [[ -r "$DIR/$module" ]]; then
            debug_log "Module $module is readable"
            debug_log "Module permissions: $(ls -l "$DIR/$module")"
            if source "$DIR/$module" 2> >(debug_log "Source error: $(cat)"); then
                debug_log "Successfully sourced $module"
                ((success_count++))
            else
                debug_log "ERROR: Failed to source $module"
            fi
        else
            debug_log "ERROR: Cannot read $module at $DIR/$module"
        fi
    done

    debug_log "source_rc completed with $success_count successful modules"
    [[ $success_count -gt 0 ]] || return 1
    return 0
}

# Modify main_rc to handle fallback mode
main_rc() {
    echo "      └─ main_rc : init_traps"
    init_traps

    echo "      └─ main_rc : init_base"
    if ! init_base; then
        echo "Warning: Environment initialization using fallbacks" >&2
    fi

    # From this point on, we can safely use log() as either the main or fallback logging is available
    log "lvl" "main_rc : register_cleanup"
    # Register cleanups if functions exist
    type cleanup_logger >/dev/null 2>&1 && register_cleanup "lo" "cleanup_logger"
    type cleanup_timer >/dev/null 2>&1 && register_cleanup "tme" "cleanup_timer"
    type clean_exit >/dev/null 2>&1 && register_cleanup "err" "clean_exit"

    log "lvl" "main_rc : setup_error_handling"
    type setup_error_handling >/dev/null 2>&1 && setup_error_handling

    log "lvl" "main_rc : source_rc"
    source_rc

    log "lvl" "main_rc : setup_components"
    setup_components
}

# Execute the main function
echo " ─── initializating"
main_rc
