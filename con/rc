#!/bin/bash
set -o pipefail

# Global declarations should be at the very top
declare -gA CLEANUP_FUNCTIONS    # Associative array to store cleanup functions by module
declare -g TRAP_INITIALIZED=false    # Global flag to track trap initialization state

# Rest of your variables
DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)"
PARENT_DIR="/root/lab"
export LAB_DIR="$PARENT_DIR"
readonly BAS_DIR="$PARENT_DIR/bas"

# init base modules
init_base() {
    # First initialize directories
    init_dirs || {
        echo "Fatal: Directory initialization failed" >&2
        return 1
    }

    # Source all files in BAS_DIR
    for file in "$BAS_DIR"/*; do
        source "$file" || {
            echo "Fatal: Failed to source $(basename "$file")" >&2
            return 1
        }
    done

    # Initialize timer system with proper log directory
    init_timer "$RC_LOG_DIR" || {
        echo "Fatal: Failed to initialize timer" >&2
        return 1
    }

    return 0
}

# init base modules tmp and log dirs
init_dirs() {
    local debug_log="/tmp/directory_init_debug.log"

    # Debug logging for initial state
    {
        printf '%s\n' "=== Directory Initialization Debug Log ==="
        printf 'Timestamp: %s\n' "$(date)"
        printf 'Initial TMP_DIR value: %s\n' "${TMP_DIR:-unset}"
        printf 'Initial LOG_DIR value: %s\n' "${LOG_DIR:-unset}"
        printf 'Caller: %s\n' "${FUNCNAME[1]:-main}"
        echo "Call stack:"
        local i=0
        # Redirect stderr to prevent error messages
        while caller $i 2>/dev/null; do
            ((i++))
        done
        echo "Current environment variables affecting paths:"
        env | grep -i "dir\|path" || echo "No relevant environment variables found"
        echo "=== End Initial State ==="
        echo
    } > "$debug_log" 2>/dev/null  # Redirect all potential errors to prevent them

    # Force set base directories - override any existing values
    LOG_DIR="/var/log/lab"
    TMP_DIR="/tmp/lab"
    export LOG_DIR TMP_DIR

    # Debug logging post-definition
    {
        printf '%s\n' "=== Post-Definition State ==="
        printf 'LOG_DIR set to: %s\n' "${LOG_DIR}"
        printf 'TMP_DIR set to: %s\n' "${TMP_DIR}"
        printf '%s\n\n' "=== End Post-Definition State ==="
    } >> "$debug_log"

    # LOG & TMP dir structures
    local base_dirs=("${LOG_DIR}" "${TMP_DIR}")
    local sub_dirs=("err" "lo" "tme" "rc")
    local required_dirs=()

    for base in "${base_dirs[@]}"; do
        required_dirs+=("$base")
        for sub in "${sub_dirs[@]}"; do
            required_dirs+=("$base/$sub")
        done
    done

    # Create all directories in one pass
    local -a failed_dirs=()
    local dir
    for dir in "${required_dirs[@]}"; do
        if ! mkdir -p "$dir" 2>/dev/null; then
            failed_dirs+=("$dir")
            printf 'Warning: Failed to create directory: %s\n' "$dir" >&2
            {
                printf 'FAILED to create directory: %s\n' "$dir"
                echo "Current permissions:"
                ls -ld "$(dirname "$dir")" 2>&1 || echo "Cannot access parent directory"
            } >> "$debug_log"
        else
            {
                printf 'Successfully created/verified directory: %s\n' "$dir"
                echo "Directory permissions:"
                ls -ld "$dir"
            } >> "$debug_log"
        fi
    done

    # Handle failures and set fallbacks
    if (( ${#failed_dirs[@]} > 0 )); then
        {
            printf '%s\n' "=== Directory Creation Failures ==="
            printf '%s\n' "${failed_dirs[@]}"
            echo "Warning: Some directories could not be created" >&2

            # Critical fallback: If main LOG_DIR fails, use TMP_DIR
            if [[ ! -d "$LOG_DIR" ]]; then
                printf 'LOG_DIR (%s) not accessible, falling back to TMP_DIR\n' "$LOG_DIR"
                LOG_DIR="$TMP_DIR"
                echo "Falling back to TMP_DIR for logging: $TMP_DIR" >&2

                # Attempt to create subdirectories in fallback location
                local subdir
                for subdir in err lo tme rc; do
                    if ! mkdir -p "${LOG_DIR}/${subdir}" 2>/dev/null; then
                        printf 'Warning: Failed to create fallback directory: %s/%s\n' "$LOG_DIR" "$subdir" >&2
                    fi
                done
            fi
        } >> "$debug_log"
    fi

    # Verify critical directories exist
    local -a critical_dirs=(
        "${LOG_DIR}"
        "${TMP_DIR}"
        "${LOG_DIR}/err"
        "${TMP_DIR}/err"
    )

    {
        printf '%s\n' "=== Critical Directory Verification ==="
        local missing_critical=0
        local dir
        for dir in "${critical_dirs[@]}"; do
            if [[ ! -d "$dir" ]]; then
                printf 'MISSING CRITICAL DIRECTORY: %s\n' "$dir"
                echo "Parent directory status:"
                ls -ld "$(dirname "$dir")" 2>&1 || echo "Cannot access parent directory"
                printf 'Critical: Required directory missing: %s\n' "$dir" >&2
                missing_critical=1
            else
                printf 'Verified critical directory exists: %s\n' "$dir"
                echo "Directory permissions:"
                ls -ld "$dir"
            fi
        done

        printf '%s\n' "=== Final State ==="
        printf 'Final LOG_DIR: %s\n' "${LOG_DIR}"
        printf 'Final TMP_DIR: %s\n' "${TMP_DIR}"
        printf 'Missing critical directories: %d\n' "$missing_critical"
        printf '%s\n\n' "=== End Directory Initialization ==="

        # Exit if critical directories are missing
        if (( missing_critical )); then
            echo "Fatal: Missing critical directories. Cannot continue." >&2
            return 1
        fi
    } >> "$debug_log"

    return 0
}


# Central trap registration system
register_cleanup() {
    local module="$1"
    local function="$2"

    if [[ -n "$function" && $(type -t "$function") == "function" ]]; then
        CLEANUP_FUNCTIONS[$module]="$function"
        log "lvl" "Registered cleanup for module: $module"
    else
        log "lvl" "Failed to register cleanup for module: $module - invalid function"
        return 1
    fi
}

# Main cleanup orchestrator
main_cleanup() {
    log "lvl" "Starting main cleanup sequence"

    # First cleanup logging system
    if [[ -n "${CLEANUP_FUNCTIONS[lo]}" ]]; then
        ${CLEANUP_FUNCTIONS[lo]}
    fi

    # Then cleanup timing system
    if [[ -n "${CLEANUP_FUNCTIONS[tme]}" ]]; then
        ${CLEANUP_FUNCTIONS[tme]}
    fi

    # Finally cleanup error handling
    if [[ -n "${CLEANUP_FUNCTIONS[err]}" ]]; then
        ${CLEANUP_FUNCTIONS[err]}
    fi

    log "lvl" "Main cleanup sequence completed"
}

# Central error handler
main_error_handler() {
    local line_number="$1"
    local error_code="$2"

    # Call error handler from err module if available
    if type error_handler &>/dev/null; then
        error_handler "$line_number" "$error_code"
    fi
}

# Initialize trap system
init_traps() {
    if [[ "$TRAP_INITIALIZED" != "true" ]]; then
        # Remove any existing traps
        trap - EXIT
        trap - ERR

        # Set up main traps
        trap main_cleanup EXIT
        trap 'main_error_handler $LINENO $?' ERR

        TRAP_INITIALIZED=true
    fi
}

source_rc() {
    local rc_modules=("rc1" "rc2" "rc3" "rc4")
    local success_count=0

    for module in "${rc_modules[@]}"; do
        if [[ -r "$DIR/$module" ]] && source "$DIR/$module" 2>/dev/null; then
            ((success_count++))
        fi
    done

    [[ $success_count -gt 0 ]] || return 1
    return 0
}

# Then in main_rc():
main_rc() {
    echo "    └─ main_rc : init_traps"
    init_traps

    echo "    └─ main_rc : init_base"
    init_base || {
        echo "Fatal: Environment initialization failed" >&2
        return 1
    }

    log "lvl" " main_rc : register_cleanup"
    register_cleanup "lo" "cleanup_logger"
    register_cleanup "tme" "cleanup_timer"
    register_cleanup "err" "clean_exit"

    log "lvl" " main_rc : setup_error_handling"
    setup_error_handling

    log "lvl" " main_rc : source_rc" | tee -a "$ERROR_LOG"
    source_rc

    log "lvl" " main_rc : setup_components" | tee -a "$ERROR_LOG"
    setup_components
}

# Execute the main function
echo " ─── initializating"
main_rc
