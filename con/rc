#!/bin/bash
set -o pipefail

# Source verification module early
source "$LAB_DIR/dic/veri" || {
    echo "Failed to source verification module" >&2
    exit 1
}

# First declare all globals
declare -g TRAP_INITIALIZED
declare -gA CLEANUP_FUNCTIONS
declare -g TRAP_INITIALIZED=false

# Add initial log functions that use fallback until real logging is ready
ini_log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local message="${2:-$1}"  # Accept both log "lvl" "msg" and log "msg" formats
    printf "[FALLBACK] %s - %s\n" "$timestamp" "$message" >&2
}
export -f ini_log

# Create initial log function that uses fallback until real logging is ready
log() {
    ini_log "$@"
}
export -f log

# Function to switch verification mode
set_verification_mode() {
    VERIFICATION_MODE="$1"
}

# Initialize verification system
init_verification() {
    # First save original trace settings and enable tracing
    local orig_trace_setting=$(set -o | grep xtrace | cut -f2)
    set -x

    # Create log directory if it doesn't exist
    mkdir -p "$(dirname /tmp/rc_init.log)" 2>/dev/null

    # Redirect all output to both console and a log file
    exec 1> >(tee /tmp/rc_init.log) 2>&1

    echo "Starting initialization verification..."

    # For RC startup
    set_verification_mode "RC"
    if ! essential_check; then
        echo "Fatal: Essential verification failed during RC initialization" >&2
        echo "Check /tmp/rc_init.log for details"
        return 1
    fi

    # Verify critical directories exist after essential_check
    local missing=0
    for dir in "$LAB_DIR" "$BAS_DIR" "$LOG_DIR" "$TMP_DIR"; do
        if [[ ! -d "$dir" ]]; then
            echo "Creating directory: $dir"
            mkdir -p "$dir" || {
                echo "Failed to create directory: $dir" >&2
                ((missing++))
            }
        fi
    done

    if ((missing > 0)); then
        echo "Some directories could not be created" >&2
        return 1
    fi

    # Restore original trace setting
    if [[ "$orig_trace_setting" == "off" ]]; then
        set +x
    fi

    echo "Initialization verification completed successfully"
    return 0
}

# Fallback initialization
init_fallback_verification() {
    set_verification_mode "FALLBACK"
    if ! essential_check; then
        echo "Fatal: Essential verification failed in fallback mode" >&2
        local missing=0
        for dir in "$LOG_DIR" "$TMP_DIR"; do
            if [[ ! -d "$dir" ]]; then
                echo "Attempting to create directory: $dir"
                mkdir -p "$dir" || ((missing++))
            fi
        done
        if ((missing > 0)); then
            return 1
        fi
    fi
    return 0
}

# Central trap registration system
register_cleanup() {
    local module="$1"
    local function="$2"

    [[ -z "$module" || -z "$function" ]] && {
        echo "Error: Invalid cleanup registration arguments" >&2
        return 1
    }
    if [[ -n "$function" && $(type -t "$function") == "function" ]]; then
        CLEANUP_FUNCTIONS[$module]="$function"
        type log >/dev/null 2>&1 && log "lvl" "Registered cleanup for module: $module" || echo "Registered cleanup for module: $module"
    else
        type log >/dev/null 2>&1 && log "lvl" "Failed to register cleanup for module: $module" || echo "Failed to register cleanup for module: $module"
        return 1
    fi
}

# Main cleanup orchestrator
main_cleanup() {
    log "lvl" "Starting main cleanup sequence"

    # First cleanup logging system
    if [[ -n "${CLEANUP_FUNCTIONS[lo]}" ]]; then
        ${CLEANUP_FUNCTIONS[lo]}
    fi

    # Then cleanup timing system
    if [[ -n "${CLEANUP_FUNCTIONS[tme]}" ]]; then
        ${CLEANUP_FUNCTIONS[tme]}
    fi

    # Finally cleanup error handling
    if [[ -n "${CLEANUP_FUNCTIONS[err]}" ]]; then
        ${CLEANUP_FUNCTIONS[err]}
    fi

    log "lvl" "Main cleanup sequence completed"
}

# Central error handler
main_error_handler() {
    local line_number="$1"
    local error_code="$2"

    # Call error handler from err module if available
    if type error_handler &>/dev/null; then
        error_handler "$line_number" "$error_code"
    fi
}

# Initialize trap system
init_traps() {
    if [[ "$TRAP_INITIALIZED" != "true" ]]; then
        # Remove any existing traps
        trap - EXIT
        trap - ERR

        # Set up main traps
        trap main_cleanup EXIT
        trap 'main_error_handler $LINENO $?' ERR

        TRAP_INITIALIZED=true
    fi
}

# Modified init_base function with better error handling
init_base() {
    debug_log "Starting init_base"
    debug_log "BAS_DIR=$BAS_DIR"

    # Initialize directories first
    if ! init_dirs; then
        debug_log "ERROR: Directory initialization failed"
        return 1
    fi

    local module_loaded=0
    local modules=(
        "$BAS_DIR/err"
        "$BAS_DIR/lo1"
        "$BAS_DIR/lo2"
        "$BAS_DIR/tme"
    )

    # Track loaded modules
    declare -A loaded_modules

    for module in "${modules[@]}"; do
        local module_name="$(basename "$module")"
        debug_log "Processing module: $module_name"

        # Verify module first
        if ! verify_module "$module_name"; then
            debug_log "ERROR: Module verification failed for $module_name"
            continue
        fi

        # Validate and source the module
        if [[ -f "$module" ]] && [[ -r "$module" ]]; then
            if source "$module" 2> >(debug_log "Source error: $(cat)"); then
                debug_log "Successfully loaded module: $module_name"
                loaded_modules[$module_name]=1
                ((module_loaded++))
            else
                debug_log "ERROR: Failed to source module $module_name"
            fi
        else
            debug_log "ERROR: Module file not found or not readable: $module"
        fi
    done

    return $((module_loaded > 0 ? 0 : 1))
}

# Initialize base directories
init_dirs() {
    debug_log "Starting directory initialization"

    # Create base directories
    if ! essential_verify_path "LOG_DIR" "$LOG_DIR" "dir" "true" || \
       ! essential_verify_path "TMP_DIR" "$TMP_DIR" "dir" "true"; then
        debug_log "ERROR: Failed to create base directories"
        echo "Fatal: Unable to create base directories" >&2
        return 1
    fi

    # Set correct permissions
    chmod 700 "$LOG_DIR" "$TMP_DIR" 2>/dev/null || {
        debug_log "WARNING: Unable to set directory permissions"
    }

    # Process module-specific paths
    for module in "${!MODULE_REQUIRED_PATHS[@]}"; do
        local path_spec="${MODULE_REQUIRED_PATHS[$module]}"
        debug_log "Processing module $module paths: $path_spec"

        if ! parse_path_spec "$path_spec"; then
            debug_log "ERROR: Failed to process paths for module $module"
            echo "Fatal: Module path initialization failed for $module" >&2
            return 1
        fi
    done

    debug_log "Directory initialization completed successfully"
    debug_log "LOG_DIR=$LOG_DIR"
    debug_log "TMP_DIR=$TMP_DIR"

    return 0
}

source_rc() {
    debug_log "Starting source_rc"
    local rc_modules=("rc1" "rc2" "rc3" "rc4")
    local success_count=0

    for module in "${rc_modules[@]}"; do
        debug_log "Attempting to source $module"
        if [[ -r "$CON_DIR/$module" ]]; then
            debug_log "Module $module is readable"
            debug_log "Module permissions: $(ls -l "$CON_DIR/$module")"
            if [[ ! -x "$CON_DIR/$module" ]]; then
                debug_log "Adding execute permission to $module"
                chmod +x "$CON_DIR/$module" || {
                    debug_log "ERROR: Failed to add execute permission to $module"
                    continue
                }
            fi
            if source "$CON_DIR/$module" 2> >(debug_log "Source error: $(cat)"); then
                debug_log "Successfully sourced $module"
                ((success_count++))
            else
                debug_log "ERROR: Failed to source $module"
            fi
        else
            debug_log "ERROR: Cannot read $module at $CON_DIR/$module"
        fi
    done

    debug_log "source_rc completed with $success_count successful modules"
    [[ $success_count -gt 0 ]] || return 1
    return 0
}

debug_env() {
    local prefix="DEBUG ENV:"
    echo "$prefix Current directory: $(pwd)"
    echo "$prefix Script directory: $CON_DIR"
    echo "$prefix Important variables:"
    echo "  LAB_DIR=$LAB_DIR"
    echo "  BAS_DIR=$BAS_DIR"
    echo "  CON_DIR=$CON_DIR"
    echo "  LOG_DIR=$LOG_DIR"
    echo "  TMP_DIR=$TMP_DIR"
    echo "  ERROR_LOG=$ERROR_LOG"
    echo "  LOG_STATE_FILE=$LOG_STATE_FILE"
    echo "  LOG_DEBUG_FILE=$LOG_DEBUG_FILE"
}

# List module dependencies
list_module_deps() {
    local module="$1"

    echo "Dependencies for module: $module"
    echo "Required variables:"
    if [[ -n "${MODULE_REQUIRED_VARS[$module]}" ]]; then
        echo "  ${MODULE_REQUIRED_VARS[$module]}"
    else
        echo "  None"
    fi

    echo "Required paths:"
    if [[ -n "${MODULE_REQUIRED_PATHS[$module]}" ]]; then
        local IFS=';'
        local paths=(${MODULE_REQUIRED_PATHS[$module]})
        for path_spec in "${paths[@]}"; do
            IFS=':' read -r path_var path_type create_flag <<< "$path_spec"
            echo "  $path_var ($path_type, create: $create_flag)"
        done
    else
        echo "  None"
    fi
}

# Parse path specifications
parse_path_spec() {
    local spec="$1"
    [[ -z "$spec" ]] && return 1

    local success=0
    local IFS=';'
    read -ra specs <<< "$spec"

    for single_spec in "${specs[@]}"; do
        [[ -z "$single_spec" ]] && continue

        local var_name type create_flag
        IFS=':' read -r var_name type create_flag <<< "$single_spec"

        # Validate all parts are present
        [[ -z "$var_name" || -z "$type" || -z "$create_flag" ]] && {
            debug_log "ERROR: Invalid path specification: $single_spec"
            continue
        }

        # Clean up variables and remove any trailing/leading whitespace
        var_name="${var_name%%:*}"
        type="${type%%:*}"
        create_flag="${create_flag%%:*}"

        # Get actual path value and verify it's not empty
        local path_value="${!var_name}"
        [[ -z "$path_value" ]] && {
            debug_log "ERROR: Empty path value for $var_name"
            continue
        }

        debug_log "Processing spec: var=$var_name, path=$path_value, type=$type, create=$create_flag"

        if essential_verify_path "$var_name" "$path_value" "$type" "$create_flag"; then
            ((success++))
        else
            debug_log "ERROR: Path verification failed for $var_name"
            return 1
        fi
    done

    return $((success > 0 ? 0 : 1))
}

# Validate module file
validate_module() {
    local file="$1"
    local module_name="$(basename "$file")"

    debug_log "Validating module: $module_name at $file"

    # Check if file exists
    if [[ ! -f "$file" ]]; then
        debug_log "ERROR: Module file does not exist: $file"
        return 1
    fi

    # Check if file is executable
    if [[ ! -x "$file" ]]; then
        debug_log "Adding execute permission to $module_name"
        chmod +x "$file" || {
            debug_log "ERROR: Failed to make $module_name executable"
            return 1
        }
    fi

    # Validate shebang
    local shebang
    read -r shebang < "$file"
    if [[ "$shebang" != "#!/bin/bash" ]]; then
        debug_log "ERROR: Invalid or missing shebang in $module_name"
        return 1
    fi

    debug_log "Module $module_name validation successful"
    return 0
}

# Main entry point function
main_rc() {
    # Save original error exit setting
    local orig_errexit_setting=$(set -o | grep errexit | cut -f2)
    set +e  # Disable exit on error temporarily

    echo "Starting main_rc initialization..." | tee -a /tmp/rc_init.log

    echo "      └─ main_rc : init_traps" | tee -a /tmp/rc_init.log
    init_traps || {
        echo "Warning: Trap initialization failed" >&2 | tee -a /tmp/rc_init.log
        echo "init_traps returned: $?" >> /tmp/rc_init.log
    }

    echo "      └─ main_rc : init_base" | tee -a /tmp/rc_init.log
    init_base
    local init_base_status=$?
    echo "init_base returned: $init_base_status" >> /tmp/rc_init.log

    # Track status of each major operation
    local rc_status=0

    echo "main_rc : source_rc" | tee -a /tmp/rc_init.log

    # Source RC files with status tracking
    if ! source_rc; then
        echo "Warning: Failed to source RC files" >&2 | tee -a /tmp/rc_init.log
        rc_status=1
    fi

    # Restore original errexit setting
    if [[ "$orig_errexit_setting" == "on" ]]; then
        set -e
    fi

    echo "main_rc completing with status: $rc_status" >> /tmp/rc_init.log
    return $rc_status
}

echo " ─── initializing"
# Disable exit on error for the initialization
set +e

# Add debug trapping for main_rc status
main_rc
MAIN_RC_STATUS=$?
echo "main_rc returned with status: $MAIN_RC_STATUS" >> /tmp/rc_init.log

if [ $MAIN_RC_STATUS -ne 0 ]; then
    echo "RC initialization failed with status $MAIN_RC_STATUS. Check /tmp/rc_init.log for details" >&2
    # Create essential directories as last resort
    for dir in "$LOG_DIR" "$TMP_DIR"; do
        mkdir -p "$dir" 2>/dev/null
    done

    # Set up minimal environment to keep shell usable
    echo "Setting up minimal environment..." >&2
    export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$HOME/bin"

    # Set a basic prompt to indicate we're in minimal mode
    PS1="(minimal)[\u@\h \W]\$ "
fi

# Add these exports at the end of the file:
export -f register_cleanup
export -f main_cleanup
export -f main_error_handler
export -f init_traps
export -f init_base
export -f init_dirs
export -f source_rc
export -f debug_env
export -f list_module_deps
export -f parse_path_spec
export -f validate_module
export -f main_rc
