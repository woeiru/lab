#!/bin/bash
#######################################################################
# Environment Management System - Comprehensive Test Suite
#######################################################################
# File: /home/es/lab/tst/test_environment
# Description: Comprehensive testing framework for validating all
#              components of the environment management system including
#              infrastructure utilities, security features, environment
#              switching, and integration testing.
#
# Dependencies:
#   - Bash 4.0+ (for associative arrays and advanced features)
#   - All environment management system components
#   - Standard UNIX utilities (date, stat, etc.)
#   - Color terminal support (optional)
#
# Purpose:
#   Provides comprehensive validation of the environment management
#   system to ensure all components work correctly individually and
#   in integration. Includes both unit tests and end-to-end workflow
#   validation with detailed reporting and debugging information.
#
# Test Categories:
#   1. Infrastructure Utilities Testing
#      - Function availability validation
#      - Container definition testing
#      - IP sequence generation testing
#      - Configuration validation testing
#
#   2. Security Utilities Testing
#      - Password generation validation
#      - Secure storage testing
#      - File permission verification
#      - Password initialization testing
#
#   3. Environment Switching Testing
#      - Base environment loading
#      - Development environment overrides
#      - Node-specific configuration testing
#      - Variable inheritance validation
#
#   4. Configuration File Testing
#      - File existence validation
#      - Configuration loading testing
#      - Syntax validation
#      - Integration verification
#
#   5. Deployment Script Testing
#      - Script availability validation
#      - Execution permission testing
#      - Framework integration testing
#      - Function availability testing
#
#   6. Container Configuration Testing
#      - Single container definition testing
#      - Bulk container creation testing
#      - Variable assignment validation
#      - Parameter passing verification
#
#   7. Password Security Testing
#      - Secure password generation testing
#      - File permission validation
#      - Storage mechanism testing
#      - Access control verification
#
#   8. Complete Workflow Testing
#      - End-to-end environment setup
#      - Multi-component integration
#      - State preservation testing
#      - Error recovery validation
#
# Test Framework Features:
#   - Colored output for easy result identification
#   - Detailed test counters and statistics
#   - Individual test isolation and cleanup
#   - Comprehensive error reporting
#   - Performance timing information
#   - Debug mode for troubleshooting
#
# Usage Examples:
#   ./tst/test_environment                    # Run all tests
#   bash tst/test_environment                 # Alternative execution
#   DEBUG=1 ./tst/test_environment           # Run with debug output
#
# Output Format:
#   - Green checkmarks (✓) for passing tests
#   - Red X marks (✗) for failing tests
#   - Yellow warnings (⚠) for non-critical issues
#   - Blue timestamps for progress tracking
#   - Final summary with pass/fail statistics
#
# Test Isolation:
#   - Each test function runs in isolation
#   - Temporary directories created/cleaned up
#   - Environment variables reset between tests
#   - No persistent state between test runs
#
# Error Handling:
#   - set -euo pipefail for strict error handling
#   - Individual test failure doesn't stop test suite
#   - Detailed error reporting with context
#   - Cleanup functions for test artifacts
#
# Integration Points:
#   - Tests all components of environment management system
#   - Validates integration with existing deployment scripts
#   - Checks compatibility with configuration hierarchy
#   - Verifies security implementation compliance
#
# Maintenance:
#   - Add new test functions for new features
#   - Update test data when configurations change
#   - Extend validation criteria as system evolves
#   - Monitor test execution time for performance
#
# Security Considerations:
#   - Uses temporary directories for sensitive testing
#   - Cleans up test artifacts automatically
#   - Validates security implementations thoroughly
#   - No production credentials used in testing
#######################################################################

# Comprehensive testing script for the environment management system
# Tests infrastructure utilities, security features, and environment switching

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counters
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0

# Logging function
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}✓${NC} $1"
    ((TESTS_PASSED++))
}

failure() {
    echo -e "${RED}✗${NC} $1"
    ((TESTS_FAILED++))
}

warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

run_test() {
    local test_name="$1"
    shift
    ((TESTS_RUN++))
    
    log "Running test: $test_name"
    
    if "$@"; then
        success "$test_name"
        return 0
    else
        failure "$test_name"
        return 1
    fi
}

# Test infrastructure utilities
test_infrastructure_utilities() {
    log "Testing infrastructure utilities..."
    
    # Test if infrastructure utilities can be sourced
    run_test "Source infrastructure utilities" test -f /home/es/lab/lib/gen/inf
    
    if source /home/es/lab/lib/gen/inf 2>/dev/null; then
        success "Infrastructure utilities loaded successfully"
        
        # Test default configuration functions
        run_test "Test set_container_defaults function" declare -f set_container_defaults > /dev/null
        run_test "Test define_container function" declare -f define_container > /dev/null
        run_test "Test define_containers function" declare -f define_containers > /dev/null
        run_test "Test generate_ip_sequence function" declare -f generate_ip_sequence > /dev/null
        run_test "Test validate_config function" declare -f validate_config > /dev/null
        
        # Test IP generation
        local test_ips
        if test_ips=$(generate_ip_sequence "192.168.1.100" 3 2>/dev/null); then
            if [[ "$test_ips" == "192.168.1.100 192.168.1.101 192.168.1.102" ]]; then
                success "IP sequence generation works correctly"
            else
                failure "IP sequence generation returned unexpected result: $test_ips"
            fi
        else
            failure "IP sequence generation failed"
        fi
        
    else
        failure "Failed to load infrastructure utilities"
    fi
}

# Test security utilities
test_security_utilities() {
    log "Testing security utilities..."
    
    # Test if security utilities can be sourced
    run_test "Source security utilities" test -f /home/es/lab/lib/gen/sec
    
    if source /home/es/lab/lib/gen/sec 2>/dev/null; then
        success "Security utilities loaded successfully"
        
        # Test password generation functions
        run_test "Test generate_secure_password function" declare -f generate_secure_password > /dev/null
        run_test "Test store_secure_password function" declare -f store_secure_password > /dev/null
        run_test "Test init_password_management function" declare -f init_password_management > /dev/null
        
        # Test password generation
        local test_password
        if test_password=$(generate_secure_password 16 2>/dev/null); then
            if [[ ${#test_password} -eq 16 ]]; then
                success "Password generation produces correct length (16 chars)"
            else
                failure "Password generation incorrect length: ${#test_password} (expected 16)"
            fi
        else
            failure "Password generation failed"
        fi
        
        # Test password storage
        if store_secure_password "TEST_PWD" 12 2>/dev/null; then
            if [[ -n "${TEST_PWD:-}" ]] && [[ ${#TEST_PWD} -eq 12 ]]; then
                success "Password storage works correctly"
            else
                failure "Password storage failed or incorrect length"
            fi
        else
            failure "Password storage function failed"
        fi
        
    else
        failure "Failed to load security utilities"
    fi
}

# Test environment switching
test_environment_switching() {
    log "Testing environment switching..."
    
    # Test base environment loading
    if source /home/es/lab/src/aux/set 2>/dev/null; then
        success "Base environment sourcing works"
        
        # Check if environment variables are set
        run_test "LAB_ROOT variable set" test -n "${LAB_ROOT:-}"
        run_test "SITE variable set" test -n "${SITE:-}"
        
        # Test development environment override
        export ENVIRONMENT="dev"
        if source /home/es/lab/src/aux/set 2>/dev/null; then
            success "Development environment override works"
        else
            failure "Development environment override failed"
        fi
        
        # Test node-specific override
        export NODE="w2"
        if source /home/es/lab/src/aux/set 2>/dev/null; then
            success "Node-specific override works"
        else
            failure "Node-specific override failed"
        fi
        
        # Reset environment
        unset ENVIRONMENT NODE
        
    else
        failure "Base environment sourcing failed"
    fi
}

# Test configuration files
test_configuration_files() {
    log "Testing configuration files..."
    
    # Test main site configuration
    run_test "Site1 configuration exists" test -f /home/es/lab/cfg/env/site1
    run_test "Site1-dev configuration exists" test -f /home/es/lab/cfg/env/site1-dev
    run_test "Site1-w2 configuration exists" test -f /home/es/lab/cfg/env/site1-w2
    
    # Test core configuration files
    run_test "Runtime constants exist" test -f /home/es/lab/cfg/core/ric
    run_test "Environment controller config exists" test -f /home/es/lab/cfg/core/ecc
    
    # Test that site1 config can be sourced
    if source /home/es/lab/cfg/env/site1 2>/dev/null; then
        success "Site1 configuration can be sourced"
        
        # Test that new infrastructure utilities are used
        if declare -f define_containers > /dev/null 2>&1; then
            success "Site1 configuration loads infrastructure utilities"
        else
            failure "Site1 configuration doesn't load infrastructure utilities"
        fi
        
    else
        failure "Site1 configuration cannot be sourced"
    fi
}

# Test deployment scripts
test_deployment_scripts() {
    log "Testing deployment scripts..."
    
    # Test if deployment scripts exist
    local scripts=("pve" "nfs" "smb" "pbs")
    
    for script in "${scripts[@]}"; do
        run_test "Deployment script $script exists" test -f "/home/es/lab/src/set/$script"
        run_test "Deployment script $script is executable" test -x "/home/es/lab/src/set/$script"
    done
    
    # Test if aux/src can be loaded by deployment scripts
    if source /home/es/lab/src/aux/set 2>/dev/null; then
        success "Deployment framework can be loaded"
        run_test "setup_source function available" declare -f setup_source > /dev/null
    else
        failure "Deployment framework cannot be loaded"
    fi
}

# Test container configuration validation
test_container_configuration() {
    log "Testing container configuration..."
    
    # Load utilities
    source /home/es/lab/lib/gen/inf 2>/dev/null
    source /home/es/lab/lib/gen/sec 2>/dev/null
    
    # Test container definition
    if define_container 999 "test" "192.168.178.999" memory=4096 2>/dev/null; then
        success "Container definition works"
        
        # Check if variables are set correctly
        if [[ "${CT_999_ID:-}" == "999" ]] && [[ "${CT_999_HOSTNAME:-}" == "test" ]]; then
            success "Container variables set correctly"
        else
            failure "Container variables not set correctly"
        fi
        
    else
        failure "Container definition failed"
    fi
    
    # Test bulk container definition
    if define_containers "901:test1:192.168.178.901:902:test2:192.168.178.902" 2>/dev/null; then
        success "Bulk container definition works"
        
        # Verify both containers were defined
        if [[ "${CT_901_HOSTNAME:-}" == "test1" ]] && [[ "${CT_902_HOSTNAME:-}" == "test2" ]]; then
            success "Bulk container variables set correctly"
        else
            failure "Bulk container variables not set correctly"
        fi
        
    else
        failure "Bulk container definition failed"
    fi
}

# Test password security
test_password_security() {
    log "Testing password security..."
    
    source /home/es/lab/lib/gen/sec 2>/dev/null
    
    # Create temporary password directory for testing
    local temp_dir="/tmp/test_passwords_$$"
    mkdir -p "$temp_dir"
    chmod 700 "$temp_dir"
    
    # Test password initialization
    if init_password_management "$temp_dir" 2>/dev/null; then
        success "Password management initialization works"
        
        # Check if password files were created
        if [[ -f "$temp_dir/ct_pbs.pwd" ]] && [[ -f "$temp_dir/nfs_user.pwd" ]]; then
            success "Password files created successfully"
            
            # Check file permissions
            local perm
            perm=$(stat -c "%a" "$temp_dir/ct_pbs.pwd")
            if [[ "$perm" == "600" ]]; then
                success "Password file permissions are secure (600)"
            else
                failure "Password file permissions are insecure: $perm"
            fi
            
        else
            failure "Password files were not created"
        fi
        
    else
        failure "Password management initialization failed"
    fi
    
    # Cleanup
    rm -rf "$temp_dir"
}

# Test complete workflow
test_complete_workflow() {
    log "Testing complete workflow..."
    
    # Set environment variables
    export ENVIRONMENT="dev"
    export NODE="w2"
    
    # Test complete environment setup
    if source /home/es/lab/src/aux/set 2>/dev/null; then
        success "Complete environment setup works"
        
        # Verify environment context
        if [[ "${ENVIRONMENT:-}" == "dev" ]] && [[ "${NODE:-}" == "w2" ]]; then
            success "Environment context preserved"
        else
            failure "Environment context not preserved"
        fi
        
        # Test configuration loading
        if source /home/es/lab/cfg/env/site1 2>/dev/null; then
            success "Configuration loading in environment context works"
        else
            failure "Configuration loading in environment context failed"
        fi
        
    else
        failure "Complete environment setup failed"
    fi
    
    # Reset environment
    unset ENVIRONMENT NODE
}

# Main test execution
main() {
    log "Starting comprehensive environment management system tests..."
    echo
    
    # Run all test suites
    test_infrastructure_utilities
    echo
    test_security_utilities
    echo
    test_environment_switching
    echo
    test_configuration_files
    echo
    test_deployment_scripts
    echo
    test_container_configuration
    echo
    test_password_security
    echo
    test_complete_workflow
    echo
    
    # Test summary
    log "Test Summary:"
    echo "  Tests Run: $TESTS_RUN"
    echo -e "  ${GREEN}Passed: $TESTS_PASSED${NC}"
    echo -e "  ${RED}Failed: $TESTS_FAILED${NC}"
    
    if [[ $TESTS_FAILED -eq 0 ]]; then
        echo
        success "All tests passed! Environment management system is working correctly."
        return 0
    else
        echo
        failure "Some tests failed. Please review the output above."
        return 1
    fi
}

# Run tests if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
