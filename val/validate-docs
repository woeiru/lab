#!/bin/bash
# Documentation Link Validator
# Validates all internal links in markdown files to ensure documentation integrity

set -euo pipefail

# Initialize lab environment - simple approach
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Set LAB_DIR if not already set
if [[ -z "${LAB_DIR:-}" ]]; then
    readonly LAB_DIR="$(dirname "$SCRIPT_DIR")"
fi

# Configuration using lab environment variables
readonly DOC_DIR="$LAB_DIR/doc"
readonly WORKING_DOC_DIR="$LAB_DIR/tmp"

# Color definitions (using lab infrastructure if available, fallback otherwise)
if [[ -n "${LOG_NC:-}" ]]; then
    # Use lab color infrastructure
    readonly RED="${LOG_COLORS[0]:-\033[0;31m}"
    readonly GREEN='\033[0;32m'
    readonly YELLOW='\033[1;33m'
    readonly BLUE='\033[0;34m'
    readonly NC="${LOG_NC}"
else
    # Fallback color definitions
    readonly RED='\033[0;31m'
    readonly GREEN='\033[0;32m'
    readonly YELLOW='\033[1;33m'
    readonly BLUE='\033[0;34m'
    readonly NC='\033[0m'
fi

# Counters
TOTAL_FILES=0
TOTAL_LINKS=0
BROKEN_LINKS=0
EXTERNAL_LINKS=0

# Enhanced logging functions
log() { 
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $*"
}

success() { 
    echo -e "${GREEN}‚úÖ${NC} $*"
}

warning() { 
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $*"
}

error() { 
    echo -e "${RED}‚ùå${NC} $*"
}

# Function to extract markdown links from a file
extract_links() {
    local file="$1"
    
    # Extract markdown links [text](url) and reference links [text][ref]
    grep -oE '\[([^\]]*)\]\(([^)]+)\)' "$file" 2>/dev/null | \
        sed 's/\[.*\](\([^)]*\))/\1/' || true
}

# Function to check if a file exists relative to another file
check_relative_link() {
    local source_file="$1"
    local link="$2"
    local source_dir
    local target_file
    
    source_dir="$(dirname "$source_file")"
    
    # Handle different types of relative links
    if [[ "$link" == ../* ]]; then
        # Parent directory reference
        target_file="$(cd "$source_dir" && realpath "$link" 2>/dev/null || echo "")"
    elif [[ "$link" == ./* ]]; then
        # Current directory reference
        target_file="$(cd "$source_dir" && realpath "$link" 2>/dev/null || echo "")"
    elif [[ "$link" != /* ]] && [[ "$link" != http* ]]; then
        # Relative path without ./ prefix
        target_file="$(cd "$source_dir" && realpath "$link" 2>/dev/null || echo "")"
    else
        # Absolute path or external link
        target_file="$link"
    fi
    
    # Check if target file exists
    if [[ -n "$target_file" ]] && [[ -f "$target_file" ]]; then
        return 0
    else
        return 1
    fi
}

# Function to validate links in a file
validate_file_links() {
    local file="$1"
    local file_broken=0
    local file_total=0
    local file_external=0
    
    log "Validating links in: ${file#$LAB_DIR/}"
    
    # Extract all links from the file
    local links
    links=$(extract_links "$file")
    
    if [[ -z "$links" ]]; then
        echo "  No links found"
        return 0
    fi
    
    while IFS= read -r link; do
        [[ -z "$link" ]] && continue
        
        ((file_total++))
        ((TOTAL_LINKS++))
        
        # Skip anchor links (internal page references)
        if [[ "$link" == "#"* ]]; then
            echo "  üîó $link (anchor link - skipped)"
            continue
        fi
        
        # Check external links
        if [[ "$link" == http* ]]; then
            ((file_external++))
            ((EXTERNAL_LINKS++))
            echo "  üåê $link (external link - not validated)"
            continue
        fi
        
        # Validate internal links
        if check_relative_link "$file" "$link"; then
            echo "  ‚úÖ $link"
        else
            ((file_broken++))
            ((BROKEN_LINKS++))
            error "  ‚ùå $link (broken link)"
        fi
        
    done <<< "$links"
    
    echo "  üìä File summary: $file_total total, $file_broken broken, $file_external external"
    echo ""
    
    return $file_broken
}

# Function to validate all markdown files in a directory
validate_directory() {
    local dir="$1"
    local dir_name="$2"
    
    if [[ ! -d "$dir" ]]; then
        warning "Directory not found: $dir"
        return 0
    fi
    
    log "Validating $dir_name documentation..."
    echo ""
    
    local dir_broken=0
    
    # Find all markdown files and validate them
    while IFS= read -r -d '' file; do
        ((TOTAL_FILES++))
        if ! validate_file_links "$file"; then
            ((dir_broken++))
        fi
    done < <(find "$dir" -name "*.md" -type f -print0)
    
    if [[ $dir_broken -eq 0 ]]; then
        success "$dir_name validation completed - no broken links found"
    else
        error "$dir_name validation completed - $dir_broken files with broken links"
    fi
    
    echo ""
    return $dir_broken
}

# Function to validate root documentation files
validate_root_files() {
    log "Validating root documentation files..."
    echo ""
    
    local root_broken=0
    local root_files=("$LAB_DIR/README.md" 
                      "$LAB_DIR/DOCUMENTATION_INDEX.md")
    
    for file in "${root_files[@]}"; do
        if [[ -f "$file" ]]; then
            ((TOTAL_FILES++))
            if ! validate_file_links "$file"; then
                ((root_broken++))
            fi
        else
            warning "Root file not found: ${file#$LAB_DIR/}"
        fi
    done
    
    if [[ $root_broken -eq 0 ]]; then
        success "Root documentation validation completed - no broken links found"
    else
        error "Root documentation validation completed - $root_broken files with broken links"
    fi
    
    echo ""
    return $root_broken
}

# Function to check for orphaned files (files not referenced by any other file)
check_orphaned_files() {
    log "Checking for orphaned documentation files..."
    echo ""
    
    local all_md_files
    local referenced_files
    local orphaned_count=0
    
    # Get all markdown files
    all_md_files=$(find "$LAB_DIR" -name "*.md" -type f | grep -v ".git" || true)
    
    # Get all referenced files from links
    referenced_files=$(find "$LAB_DIR" -name "*.md" -exec grep -oE '\[([^\]]*)\]\(([^)]+)\)' {} \; 2>/dev/null | \
        sed 's/\[.*\](\([^)]*\))/\1/' | \
        grep -v "^http" | \
        grep -v "^#" | \
        sort -u || true)
    
    # Check each markdown file to see if it's referenced
    while IFS= read -r file; do
        local relative_path="${file#$LAB_DIR/}"
        local basename_file
        basename_file=$(basename "$file")
        
        # Skip README files as they are typically entry points
        if [[ "$basename_file" == "README.md" ]]; then
            continue
        fi
        
        # Check if this file is referenced anywhere
        local is_referenced=false
        while IFS= read -r ref; do
            [[ -z "$ref" ]] && continue
            
            # Check various ways the file might be referenced
            if [[ "$ref" == *"$relative_path"* ]] || \
               [[ "$ref" == *"$basename_file"* ]] || \
               [[ "$ref" == *"${basename_file%.*}"* ]]; then
                is_referenced=true
                break
            fi
        done <<< "$referenced_files"
        
        if [[ "$is_referenced" == "false" ]]; then
            ((orphaned_count++))
            warning "Orphaned file (not referenced): $relative_path"
        fi
    done <<< "$all_md_files"
    
    if [[ $orphaned_count -eq 0 ]]; then
        success "No orphaned files found"
    else
        warning "Found $orphaned_count potentially orphaned files"
    fi
    
    echo ""
}

# Function to generate validation report
generate_report() {
    echo ""
    log "Documentation Link Validation Report"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    echo "üìä **Summary Statistics**"
    echo "   ‚Ä¢ Total files validated: $TOTAL_FILES"
    echo "   ‚Ä¢ Total links checked: $TOTAL_LINKS"
    echo "   ‚Ä¢ Broken links found: $BROKEN_LINKS"
    echo "   ‚Ä¢ External links (not validated): $EXTERNAL_LINKS"
    echo ""
    
    if [[ $BROKEN_LINKS -eq 0 ]]; then
        success "All internal links are valid! üéâ"
        echo ""
        echo "‚ú® **Documentation Health**: Excellent"
        echo "   ‚Ä¢ No broken internal links detected"
        echo "   ‚Ä¢ Documentation integrity maintained"
        echo "   ‚Ä¢ Cross-references are functional"
    else
        error "Found $BROKEN_LINKS broken links that need attention"
        echo ""
        echo "üîß **Recommended Actions**:"
        echo "   ‚Ä¢ Review and fix broken links listed above"
        echo "   ‚Ä¢ Verify target files exist at expected locations"
        echo "   ‚Ä¢ Update links to reflect current file structure"
        echo "   ‚Ä¢ Re-run validation after fixes: ./bin/validate-docs"
    fi
    
    echo ""
    echo "üîÑ **Maintenance Notes**:"
    echo "   ‚Ä¢ Run this validation regularly to catch link rot"
    echo "   ‚Ä¢ Consider automated validation in CI/CD pipeline"
    echo "   ‚Ä¢ Update documentation index after structural changes"
    echo ""
    echo "üìÖ **Validation Date**: $(date '+%Y-%m-%d %H:%M:%S')"
    echo ""
}

# Main execution function
main() {
    log "Starting comprehensive documentation link validation..."
    echo ""
    
    # Validate different documentation areas
    local total_broken=0
    
    # Root files
    if ! validate_root_files; then
        ((total_broken++))
    fi
    
    # Main documentation
    if ! validate_directory "$DOC_DIR" "Core Documentation"; then
        ((total_broken++))
    fi
    
    # Working documentation
    if ! validate_directory "$WORKING_DOC_DIR" "Working Documentation"; then
        ((total_broken++))
    fi
    
    # Check for orphaned files
    check_orphaned_files
    
    # Generate final report
    generate_report
    
    # Exit with appropriate code
    if [[ $BROKEN_LINKS -gt 0 ]]; then
        exit 1
    else
        exit 0
    fi
}

# Show help if requested
if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
    echo "Documentation Link Validator"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help    Show this help message"
    echo ""
    echo "This script validates all internal links in markdown files across the"
    echo "documentation system to ensure link integrity and documentation health."
    echo ""
    echo "The validation covers:"
    echo "  ‚Ä¢ Root documentation files (README.md, DOCUMENTATION_INDEX.md)"
    echo "  ‚Ä¢ Core documentation (doc/)"
    echo "  ‚Ä¢ Working documentation (tmp/)"
    echo "  ‚Ä¢ Cross-references between documents"
    echo ""
    echo "External links (http/https) are identified but not validated."
    echo "Anchor links (#section) are identified but not validated."
    echo ""
    exit 0
fi

# Execute if run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
