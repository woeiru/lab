#!/bin/bash

# Enable error handling
set -e

setup_source() {
    local dir="$1"
    local file="$2"
    local base="$3"

    printf "    Starting setup_source with dir=%s, file=%s\n" "$dir" "$file"
    echo "DEBUG: Before sourcing - PACKAGES_ALL: ${PACKAGES_ALL[@]}"

    # Calculate lab root by going up one directory from the script location
    local lab_root="$(dirname "$dir")"
    local fun_dir="$lab_root/fun"
    local env_dir="$lab_root/env"

    printf "      DEBUG: lab_root=%s\n" "$lab_root"
    printf "      DEBUG: fun_dir=%s\n" "$fun_dir"
    printf "      DEBUG: env_dir=%s\n" "$env_dir"

    printf "      Checking for sourced rc files\n"
    if [[ -z "$SOURCE_RC_SUCCESS" ]]; then
        # Source all files in env directory
        printf "      DEBUG: Checking env directory contents:\n"
        ls -l "$env_dir"/* 2>/dev/null || echo "No files found in $env_dir"
        for conf_file in "$env_dir"/*; do
            if [[ -f "$conf_file" ]]; then
                printf "        Sourcing %s\n" "$conf_file"
                source "$conf_file" || echo "Failed to source $conf_file"
            fi
        done

        # Source all files in fun directory
        printf "      DEBUG: Checking fun directory contents:\n"
        ls -l "$fun_dir"/* 2>/dev/null || echo "No files found in $fun_dir"
        for func_file in "$fun_dir"/*; do
            if [[ -f "$func_file" ]]; then
                printf "        Sourcing %s\n" "$func_file"
                source "$func_file" || echo "Failed to source $func_file"
            fi
        done

        export SOURCE_RC_SUCCESS=1
        printf "      Environment sourcing completed\n"
    else
        printf "      Environment already sourced, skipping...\n"
    fi
    echo "DEBUG: After sourcing $conf_file - PACKAGES_ALL: ${PACKAGES_ALL[@]}"
}


# Helper function to get section IDs from the calling script
get_section_ids() {
    local script_path="$1"
    local -n ids_array="$2"  # nameref to array for storing results

    # Clear the array
    ids_array=()

    # Read the script and find all *_xall functions
    while IFS= read -r line; do
        if [[ $line =~ ^([a-zA-Z_]+)_xall\(\) ]]; then
            ids_array+=("${BASH_REMATCH[1]}")
        fi
    done < "$script_path"

    # Sort the array
    IFS=$'\n' ids_array=($(sort <<<"${ids_array[*]}"))
    unset IFS

    printf "      Found sections: %s\n" "${ids_array[*]}"
}

# Helper function to get section descriptions
get_section_description() {
    local script_path="$1"
    local section_id="$2"

    # Look for the comment line before the function definition
    local description
    description=$(awk -v fname="${section_id}_xall" '
        /^#/ {
            desc = substr($0, 3)  # Remove "# " prefix
            next
        }
        $0 ~ "^"fname"\\(\\)" {
            if (desc != "") {
                print desc
            } else {
                print "Section " fname
            }
            exit
        }
    ' "$script_path")

    # If no description found or awk failed, provide a default
    if [[ -z "$description" ]]; then
        description="Section ${section_id}"
    fi

    echo "$description"
}

print_usage() {
    local base_indent="          "
    # Get directory name and base name dynamically
    local dir_name=$(dirname "$0")
    dir_name=$(basename "$dir_name")  # Get just the last directory name
    local base_name=$(basename "$0")
    base_name="${base_name%.*}"       # Remove extension
    local header="${dir_name}/${base_name} usage guide"

    # Get the calling script's path
    local calling_script
    if [[ -n "${BASH_SOURCE[1]}" ]]; then
        calling_script="${BASH_SOURCE[1]}"
    else
        calling_script="$0"
    fi

    # Get section IDs
    local -a section_ids
    get_section_ids "$calling_script" section_ids

    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    printf "%s┃ %s\n" "$base_indent" "$header"
    printf "%s┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" "$base_indent"
    printf "%s┃ COMMAND SYNTAX:\n" "$base_indent"
    printf "%s┃   ./%s MODE [ARGUMENT]\n" "$base_indent" "$(basename "$0")"
    printf "%s┃ \n" "$base_indent"
    printf "%s┃ AVAILABLE MODES:\n" "$base_indent"
    printf "%s┃   -i : Interactive Mode\n" "$base_indent"
    printf "%s┃        Provides a menu-driven interface for executing functions\n" "$base_indent"
    printf "%s┃        Optional: Add display mode (1-6) for different output formats\n" "$base_indent"
    printf "%s┃        Example: ./%s -i 2\n" "$base_indent" "$(basename "$0")"
    printf "%s┃ \n" "$base_indent"
    printf "%s┃   -x : Execution Mode\n" "$base_indent"
    printf "%s┃        Directly executes specified section(s)\n" "$base_indent"
    printf "%s┃        Required: Section name or '-all'\n" "$base_indent"
    printf "%s┃        Example: ./%s -x a\n" "$base_indent" "$(basename "$0")"
    printf "%s┃ \n" "$base_indent"
    printf "%s┃ SECTIONS:\n" "$base_indent"

    # Print each section with its description
    for section_id in "${section_ids[@]}"; do
        local description
        description=$(get_section_description "$calling_script" "$section_id")
        printf "%s┃   %-4s : %s\n" "$base_indent" "$section_id" "$description"
    done
    printf "%s┃   -all : Execute All Sections\n" "$base_indent"
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"
}


setup_main() {
    echo "DEBUG: Enter setup_main - PACKAGES_ALL: ${PACKAGES_ALL[@]}"
    printf "  Starting setup_main with arguments: %s\n" "$*"

    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Incorrect number of arguments."
        print_usage
        return 1
    fi

    local mode="$1"
    local argument="$2"

    case "$mode" in
        -i)
            printf "    Entering interactive mode\n"
            setup_interactive_mode "$argument"
            ;;
        -x)
            if [ -z "$argument" ]; then
                echo "Section argument is required for executing mode."
                print_usage
                return 1
            fi
            printf "    Entering executing mode\n"
            setup_executing_mode "$argument"
            ;;
        *)
            echo "Invalid mode. Use -i for interactive or -x for executing."
            print_usage
            return 1
            ;;
    esac
}

setup_interactive_mode() {
    local display_choice="$1"
    printf "    Setup interactive mode with display choice: %s\n" "$display_choice"

    local base_indent="          "
    local BOLD='\033[1m'
    local RESET='\033[0m'

    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    printf "%s┃ ${BOLD}Choose a display option:${RESET}\n" "$base_indent"
    printf "%s┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" "$base_indent"
    printf "%s┃ 1. Default display\n" "$base_indent"
    printf "%s┃ 2. Expand variables\n" "$base_indent"
    printf "%s┃ 3. Show function descriptions\n" "$base_indent"
    printf "%s┃ 4. Expand variables and show function descriptions\n" "$base_indent"
    printf "%s┃ 5. Show only function names and descriptions\n" "$base_indent"
    printf "%s┃ 6. Show only function descriptions\n" "$base_indent"
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"

    if [ -z "$display_choice" ]; then
        read -p "${base_indent}Enter your choice (1-6): " display_choice
    fi

    # Validate user input
    if ! [[ "$display_choice" =~ ^[1-6]$ ]]; then
        echo "Invalid choice. Using default display (1)."
        display_choice=1
    fi

    setup_display_menu "$DIR_SH" "$FILE_SH" "$display_choice" "-all"
    select_and_execute_sections
}

setup_executing_mode() {
    echo "DEBUG: Enter setup_executing_mode - PACKAGES_ALL: ${PACKAGES_ALL[@]}"
    local section="$1"
    printf "    Setup executing mode for section: %s\n" "$section"

    if [[ "$section" == "-all" ]]; then
        printf "      Executing all sections\n"
        for func in "${!MENU_OPTIONS[@]}"; do
            printf "        Executing section: %s\n" "$func"
            ${MENU_OPTIONS[$func]}
        done
    else
        if [[ -n "${MENU_OPTIONS[$section]}" ]]; then
            printf "      Executing section: %s\n" "$section"
            ${MENU_OPTIONS[$section]}
        else
            echo "Invalid section: $section"
            exit 1
        fi
    fi
}

select_and_execute_sections() {
    printf "    Entering select_and_execute_sections\n"
    local base_indent="          "
    local BOLD='\033[1m'
    local RESET='\033[0m'

    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    printf "%s┃ ${BOLD}Select sections to execute:${RESET}\n" "$base_indent"
    printf "%s┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" "$base_indent"
    printf "%s┃ Available sections: ${BOLD}%s${RESET}\n" "$base_indent" "${!MENU_OPTIONS[*]}"
    printf "%s┃ Type 'all' to select all sections\n" "$base_indent"
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"

    read -p "${base_indent}Enter section(s) separated by space, or 'all': " sections

    if [[ "$sections" == "all" ]]; then
        sections="${!MENU_OPTIONS[*]}"
        printf "      User selected all sections\n"
    else
        printf "      User selected sections: %s\n" "$sections"
    fi

    for section in $sections; do
        if [[ -n "${MENU_OPTIONS[$section]}" ]]; then
            printf "      Executing section: %s\n" "$section"
            setup_executing_mode "$section"
        else
            echo "Invalid section: $section. Skipping."
        fi
    done
}

# Function to expand variables
expand_variables() {
    local line="$1"
    local expanded_line="$line"

    local vars=$(echo "$line" | grep -o '\<[a-zA-Z_][a-zA-Z0-9_]*\>')

    for var in $vars; do
        if [[ -v $var ]]; then
            local value="${!var}"
            expanded_line="${expanded_line//$var/$var = $value}"
        fi
    done

    printf "        Expanded line: %s\n" "$expanded_line"
    echo "$expanded_line"
}

# Function to get function description
get_function_description() {
    local func_name="$1"
    local lib_name="${func_name%%-*}"
    local lib_file="/root/lab/lib/${lib_name}.bash"

    printf "      Getting description for function: %s from file: %s\n" "$func_name" "$lib_file"

    if [ ! -f "$lib_file" ]; then
        printf "      Library file not found: %s\n" "$lib_file"
        return
    fi

    local description=$(awk -v fn="$func_name" '
        $0 ~ "^"fn"\\(\\)" {
            if (NR > 2) print lines[NR-3];
            exit;
        }
        {
            lines[NR] = $0;
        }
    ' "$lib_file" | sed 's/^# *//')

    if [ -n "$description" ]; then
        printf "        Function description: %s\n" "$description"
        echo "--( $description )--"
    else
        printf "        No description found for function: %s\n" "$func_name"
    fi
}

setup_display_menu() {
    local dir="$1"
    local file="$2"
    local display_choice="$3"
    local section="$4"
    local base_indent="          "
    local content_indent="            "

    # ANSI escape codes for bold text and reset
    local BOLD='\033[1m'
    local RESET='\033[0m'

    printf "      Scanning file %s for *_xall functions\n" "$file"
    printf "\n"
    printf "%s┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n" "$base_indent"
    grep -E '^[a-zA-Z_]+_xall\(\)' "$dir/$file" | while IFS= read -r line; do
        func_name=$(echo "$line" | awk -F'(' '{print $1}')
        if [[ "$section" == "-all" || "${func_name%%_xall}" == "$section" ]]; then
            printf "%s┣━━━ ${BOLD}( %s )${RESET}\n" "$base_indent" "${func_name%%_xall}"
            in_function=false
            first_line=true
            while IFS= read -r inner_line; do
                if $first_line; then
                    first_line=false
                    in_function=true
                    continue
                fi
                if [[ "$inner_line" == "}" ]]; then
                    in_function=false
                    printf "%s┃\n" "$base_indent"
                elif $in_function; then
                    case "$display_choice" in
                        1)
                            printf "%s┃ %s\n" "$base_indent" "$inner_line"
                            ;;
                        2)
                            printf "%s┃ %s\n" "$base_indent" "$(expand_variables "$inner_line")"
                            ;;
                        3)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                printf "%s┃ %s %s\n" "$base_indent" "${inner_line#"${inner_line%%[![:space:]]*}"}" "$desc"
                            else
                                printf "%s┃ %s\n" "$base_indent" "${inner_line#"${inner_line%%[![:space:]]*}"}"
                            fi
                            ;;
                        4)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                printf "%s┃ %s %s\n" "$base_indent" "$(expand_variables "${inner_line#"${inner_line%%[![:space:]]*}"}")" "$desc"
                            else
                                printf "%s┃ %s\n" "$base_indent" "$(expand_variables "${inner_line#"${inner_line%%[![:space:]]*}"}")"
                            fi
                            ;;
                        5)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                if [ -n "$desc" ]; then
                                    printf "%s┃ %s: %s\n" "$base_indent" "$func" "$desc"
                                fi
                            fi
                            ;;
                        6)
                            if [[ "$inner_line" =~ ^[[:space:]]*([a-zA-Z_-]+) ]]; then
                                local func="${BASH_REMATCH[1]}"
                                local desc="$(get_function_description "$func")"
                                if [ -n "$desc" ]; then
                                    printf "%s┃ %s\n" "$base_indent" "$desc"
                                fi
                            fi
                            ;;
                    esac
                fi
            done < <(sed -n "/^${func_name}()/,/^}/p" "$dir/$file")
        fi
    done
    printf "%s┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n" "$base_indent"
    printf "\n"
}

# Main execution is not needed in .up file as it's sourced by gen.sh
