#!/bin/bash

# dyn - Dynamic bash module
# This file contains functions for generating dynamic aliases and arrays

generate_dynamic_aliases() {
    generate_top_level_aliases
    generate_dynamic_arrays
    generate_readme_aliases

    # Use the dynamically generated arrays
    echo "Generating aliases for dynamically created arrays"
    for array_name in lib_files var_files set_files; do
        echo "Processing array: $array_name"
        if [[ ${#array_name[@]} -gt 0 ]]; then
            generate_aliases "cat" "${!array_name[@]}"
            generate_aliases "vim" "${!array_name[@]}"
        fi
    done

    if [[ ${#set_files[@]} -gt 0 ]]; then
        echo "Generating bash aliases for set_files"
        generate_aliases "bash" "${set_files[@]}"
    fi

    # Source dynamically generated scripts
    if [[ ${#lib_files[@]} -gt 0 ]]; then
        echo "Sourcing scripts from lib_files"
        source_scripts "${lib_files[@]}"
    fi
}

generate_top_level_aliases() {
    echo "Generating top-level directory aliases"
    for dir in "$PARENT_DIR"/*; do
        if [[ -d "$dir" ]]; then
            base=$(basename "$dir")
            if [[ ${#base} -eq 3 ]]; then
                var_name="${base^^}_DIR"
                dir_path=$(realpath "$dir")
                declare -g "$var_name=$dir_path"
                alias "d.$base=cd $dir_path"
                echo "Created alias: d.$base -> cd $dir_path"
            fi
        fi
    done
}

generate_dynamic_arrays() {
    local generation_folders=(lib set var)

    for folder in "${generation_folders[@]}"; do
        local dir_path="$PARENT_DIR/$folder"
        echo "Processing folder: $folder, path: $dir_path"

        if [[ -d "$dir_path" ]]; then
            local array_name="${folder}_files"
            local files=()
            while IFS= read -r -d '' file; do
                base_name=$(basename "$file")
                name_without_ext="${base_name%.*}"
                files+=("$name_without_ext")
            done < <(find "$dir_path" -maxdepth 1 -type f \( -name "*.bash" -o -name "*.sh" -o -name "*.conf" \) -print0)

            # Remove duplicates and sort
            IFS=$'\n' sorted_unique=($(sort -u <<<"${files[*]}"))
            unset IFS

            # Create the array
            eval "$array_name=(${sorted_unique[*]})"
            echo "Created array $array_name with values: ${!array_name[*]}"
        else
            echo "Warning: Directory not found: $dir_path"
        fi
    done
}

generate_readme_aliases() {
    echo "Generating readme aliases"
    local FILEBASE_MD="readme.md"
    while IFS= read -r -d '' file; do
        dir=$(dirname "$file")
        alias_name=$(basename "$dir").md
        alias "c.$alias_name=cat $file"
        alias "v.$alias_name=vim $file"
        echo "Created aliases: c.$alias_name and v.$alias_name for $file"
    done < <(find "$PARENT_DIR" -type f -name "$FILEBASE_MD" -print0)
}

generate_aliases() {
    local alias_type=$1
    shift
    local files=("$@")
    echo "Generating aliases of type $alias_type for files: ${files[*]}"

    for file in "${files[@]}"; do
        case "$alias_type" in
            "bash")
                alias "b_${file}_sh=bash $SET_DIR/$file.sh"
                echo "Created alias: b_${file}_sh"
                ;;
            "cat")
                alias "c_${file}_bash=cat $LIB_DIR/$file.bash"
                alias "c_${file}_sh=cat $SET_DIR/$file.sh"
                alias "c_${file}_conf=cat $VAR_DIR/$file.conf"
                echo "Created aliases: c_${file}_bash, c_${file}_sh, c_${file}_conf"
                ;;
            "vim")
                alias "v_${file}_bash=vim $LIB_DIR/$file.bash"
                alias "v_${file}_sh=vim $SET_DIR/$file.sh"
                alias "v_${file}_conf=vim $VAR_DIR/$file.conf"
                echo "Created aliases: v_${file}_bash, v_${file}_sh, v_${file}_conf"
                ;;
        esac
    done
}

source_scripts() {
    local files=("$@")
    echo "Sourcing scripts: ${files[*]}"
    for file in "${files[@]}"; do
        local script_path="$LIB_DIR/$file.bash"
        echo "Attempting to source: $script_path"
        if [[ -f "$script_path" ]]; then
            source "$script_path"
        else
            echo "Warning: Script not found: $script_path"
        fi
    done
}
