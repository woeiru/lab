#!/bin/bash

# dyn - Dynamic bash module (Revised Version)
# This file contains functions for generating dynamic aliases and arrays

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    local level=$1
    local message=$2
    case $level in
        "DEBUG")
            echo -e "${RED}DEBUG: $message${NC}"
            ;;
        "HEADER")
            echo -e "${GREEN}HEADER: $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}INFO: $message${NC}"
            ;;
        *)
            echo "Unknown log level: $level"
            ;;
    esac
}

setup_dynamic_navigation() {
    log "DEBUG" "Starting setup_dynamic_navigation function"
    log "DEBUG" "PARENT_DIR is set to: $PARENT_DIR"

    generate_level_one_vars_and_aliases
    generate_level_two_arrays

    # Generate aliases for lib_files
    log "DEBUG" "Generating aliases for lib_files"
    generate_aliases "cat" "${lib_files[@]}"
    generate_aliases "vim" "${lib_files[@]}"

    # Generate aliases for set_files
    log "DEBUG" "Generating aliases for set_files"
    generate_aliases "cat" "${set_files[@]}"
    generate_aliases "vim" "${set_files[@]}"
    generate_aliases "bash" "${set_files[@]}"

    # Generate aliases for var_files
    log "DEBUG" "Generating aliases for var_files"
    generate_aliases "cat" "${var_files[@]}"
    generate_aliases "vim" "${var_files[@]}"

    # Source dynamically generated scripts
    log "DEBUG" "Sourcing scripts from lib_files"
    source_scripts "${lib_files[@]}"

    generate_readme_aliases
    display_generated_output
}

generate_level_one_vars_and_aliases() {
    log "DEBUG" "Generating top-level directory aliases"
    for dir in "$PARENT_DIR"/*; do
        if [[ -d "$dir" ]]; then
            base=$(basename "$dir")
            if [[ ${#base} -eq 3 ]]; then
                var_name="${base^^}_DIR"
                dir_path=$(realpath "$dir")
                declare -g "$var_name=$dir_path"
                alias "d-$base=cd $dir_path"
                log "DEBUG" "Created alias: d-$base -> cd $dir_path"
            fi
        fi
    done
}

generate_level_two_arrays() {
    local generation_folders=(lib set var)

    for folder in "${generation_folders[@]}"; do
        local dir_path="$PARENT_DIR/$folder"
        log "DEBUG" "Processing folder: $folder, path: $dir_path"

        if [[ -d "$dir_path" ]]; then
            local array_name="${folder}_files"
            local files=()

            while IFS= read -r -d '' file; do
                base_name=$(basename "$file")
                name_without_ext="${base_name%.*}"
                files+=("$name_without_ext")
                log "DEBUG" "Added file to $array_name: $name_without_ext"
            done < <(find "$dir_path" -maxdepth 1 -type f \( -name "*.bash" -o -name "*.sh" -o -name "*.conf" \) -print0)

            # Create the array using declare, joining all elements
            eval "declare -ga $array_name=(${files[*]})"
            log "DEBUG" "Created array $array_name with values: ${!array_name[*]}"
        else
            log "DEBUG" "Warning: Directory not found: $dir_path"
        fi
    done
}

generate_aliases() {
    local alias_type=$1
    shift
    local files=("$@")
    log "DEBUG" "Generating aliases of type $alias_type for files: ${files[*]}"

    local directories=("$LIB_DIR" "$SET_DIR" "$VAR_DIR")
    local extensions=("bash" "sh" "conf")

    for file in "${files[@]}"; do
        for dir in "${directories[@]}"; do
            for ext in "${extensions[@]}"; do
                local full_path="$dir/$file.$ext"
                if [[ -f "$full_path" ]]; then
                    local alias_prefix=""
                    case "$alias_type" in
                        "bash")
                            [[ "$ext" == "sh" ]] && alias_prefix="b-"
                            ;;
                        "cat") alias_prefix="c-" ;;
                        "vim") alias_prefix="v-" ;;
                    esac

                    if [[ -n "$alias_prefix" ]]; then
                        alias "${alias_prefix}${file}.${ext}=${alias_type} ${full_path}"
                        log "DEBUG" "Created alias: ${alias_prefix}${file}.${ext}"
                    fi
                    break 2  # Exit both inner loops once a file is found
                fi
            done
        done
    done
}

generate_readme_aliases() {
    log "HEADER" "Generating readme aliases"
    local FILEBASE_MD="readme.md"
    while IFS= read -r -d '' file; do
        dir=$(dirname "$file")
        dir_name=$(basename "$dir")
        parent_dir=$(basename "$(dirname "$dir")")
        if [[ "$parent_dir" != "lab" ]]; then
            alias_name="$parent_dir-$dir_name-md"
        else
            alias_name="$dir_name-md"
        fi
        alias "c-$alias_name=cat $file"
        alias "v-$alias_name=vim $file"
        log "INFO" "Created aliases: c-$alias_name and v-$alias_name for $file"
    done < <(find "$PARENT_DIR" -type f -name "$FILEBASE_MD" -print0)
}

source_scripts() {
    local files=("$@")
    log "DEBUG" "Sourcing scripts: ${files[*]}"
    for file in "${files[@]}"; do
        local script_path="$LIB_DIR/$file.bash"
        log "DEBUG" "Attempting to source: $script_path"
        if [[ -f "$script_path" ]]; then
            source "$script_path"
        else
            log "DEBUG" "Warning: Script not found: $script_path"
        fi
    done
}

display_generated_output() {
    log "HEADER" "Generated Variables and Aliases Showcase:"
    log "INFO" "Top-level directory variables:"
    for dir in "$PARENT_DIR"/*; do
        if [[ -d "$dir" ]]; then
            base=$(basename "$dir")
            if [[ ${#base} -eq 3 ]]; then
                var_name="${base^^}_DIR"
                log "INFO" "$var_name=${!var_name}"
            fi
        fi
    done

    log "INFO" "Top-level directory aliases:"
    alias | grep "^alias d-" | sed 's/^alias //' | while read -r line; do
        log "INFO" "$line"
    done

    log "HEADER" "Generated arrays:"
    for array_name in lib_files set_files var_files; do
        eval "local array_contents=(\"\${$array_name[@]}\")"
        log "INFO" "$array_name=(${array_contents[*]})"
    done

    log "HEADER" "Generated aliases for lib_files:"
    alias | grep "^\(alias c-\|alias v-\).*=" | grep "\.bash" | sed 's/^alias //' | while read -r line; do
        log "INFO" "$line"
    done

    log "HEADER" "Generated aliases for set_files:"
    alias | grep "^\(alias c-\|alias v-\|alias b-\).*=" | grep "\.sh" | sed 's/^alias //' | while read -r line; do
        log "INFO" "$line"
    done

    log "HEADER" "Generated aliases for var_files:"
    alias | grep "^\(alias c-\|alias v-\).*=" | grep "\.conf" | sed 's/^alias //' | while read -r line; do
        log "INFO" "$line"
    done

    log "HEADER" "Generated readme aliases:"
    alias | grep "^\(alias c-\|alias v-\).*-md=" | sed 's/^alias //' | while read -r line; do
        log "INFO" "$line"
    done
}

# The main function call is not included here as it's likely called from the rc module
