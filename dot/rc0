#!/bin/bash

LOG_TOGGLE=true
LOG_LEVELS=(1 1 0 0 0 0 0 0)

# Color codes
RED='\033[0;31m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
INDIGO='\033[0;35m'
VIOLET='\033[1;35m'
NC='\033[0m' # No Color

# Logging function
log() {
    if ! $LOG_TOGGLE; then
        return
    fi

    local level=$1
    local message=$2
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    local level_num=${level#lv}
    local indent=""
    local color=""

    # Set color based on level
    case $level in
        "lv1") color=$RED ;;
        "lv2") color=$ORANGE ;;
        "lv3") color=$YELLOW ;;
        "lv4") color=$GREEN ;;
        "lv5") color=$CYAN ;;
        "lv6") color=$BLUE ;;
        "lv7") color=$INDIGO ;;
        "lv8") color=$VIOLET ;;
        *) color=$NC ;;
    esac

    # Create indentation and colored indicator
    if [ $level_num -eq 1 ]; then
        indent="${color}└─${NC}"
    else
        indent="  ${color}└─${NC}"
        for i in $(seq 3 $level_num); do
            indent="  $indent"
        done
    fi

    # Output log message
    if [[ ${LOG_LEVELS[$((level_num-1))]} -eq 1 ]]; then
        if [ $level_num -eq 1 ]; then
            echo -e "${indent}$level: $message" >&2
        else
            echo -e "${indent}$level: $message"
        fi
    fi
}

# Function to set up logging
logset() {
    if ! $LOG_TOGGLE; then
        echo "Logging is disabled."
        return
    fi
    local range=$1
    local start end
    if [[ $range =~ ^([1-8])-([1-8])$ ]]; then
        start=${BASH_REMATCH[1]}
        end=${BASH_REMATCH[2]}
    else
        echo "└─Invalid range format. Please use 'start-end' (e.g., '1-3' or '2-5')."
        return 1
    fi

    # Reset all levels to 0
    for i in {0..7}; do
        LOG_LEVELS[$i]=0
    done
    # Set specified range to 1
    for ((i=start-1; i<=end-1; i++)); do
        LOG_LEVELS[$i]=1
    done

    # Update the rc0 file
    local rc0_file="${BASH_SOURCE[0]}"
    local new_levels=$(IFS=' '; echo "${LOG_LEVELS[*]}")
    echo "└─Debug: new_levels = $new_levels"
    echo "└─Debug: sed command = s/LOG_LEVELS=([0-9 ]*)/LOG_LEVELS=($new_levels)/"
    if sed -i "s/LOG_LEVELS=([0-9 ]*)/LOG_LEVELS=($new_levels)/" "$rc0_file"; then
        echo "└─Logging set up with levels: ${LOG_LEVELS[*]}"
        echo "└─rc0 file updated: $rc0_file"
    else
        echo "└─Failed to update rc0 file"
        echo "└─Debug: sed error code $?"
    fi
}

# Utility function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Utility function to source a file if it exists
source_if_exists() {
    if [ -f "$1" ]; then
        source "$1"
        log "lv3" "Sourced file: $1"
    else
        log "lv1" "File not found: $1"
    fi
}

# Export functions and variables
export -f log
export -f set_log
export -f command_exists
export -f source_if_exists
export LOG_LEVELS
export LOG_TOGGLE
