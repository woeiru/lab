#!/bin/bash
set -o pipefail

# Main configuration file
# This file sources the modular components and handles the main execution

# Define the directory of the script using a POSIX-compliant method
DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)"
PARENT_DIR="/root/lab"

# Log file for stderr
ERROR_LOG="/tmp/rc_error.log"

# Function to handle errors
error_handler() {
    local exit_code=$?
    local command="$BASH_COMMAND"
    local line_number="$1"
    local source_file="${BASH_SOURCE[1]}"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Error in $source_file on line $line_number: Command '$command' exited with status $exit_code" | tee -a "$ERROR_LOG" >&2
}

# Set up error handling
trap 'error_handler $LINENO' ERR

# Function to source a file safely
source_helper() {
    if [[ -f "$1" ]]; then
        source "$1"
        log "lvl-2" "$1"
    else
        log "lvl-2" "Warning: File $1 not found." | tee -a "$ERROR_LOG" >&2
    fi
}

# Main sourcing function
source_arrangement_rc() {
    echo ""
    echo -e "Starting \033[1m ${FUNCNAME[0]} () \033[0m"

    # Source rc modules
    local rc_modules=("rc2" "rc3" "rc4" "rc5")
    echo "└─ lvl-1 sourcing files $rc_var_name(${rc_modules[*]})"
    for module in "${rc_modules[@]}"; do
        source_helper "$DIR/$module"
    done

    # Define an array of secondary module names (same as folder names)
    secondary_modules=("env" "tst")

    # Loop through each secondary modules
    for module in "${secondary_modules[@]}"; do
        module_folder="$DIR/$module"

        # Check if the folder exists
        if [ -d "$module_folder" ]; then
            log "lvl-1" "Sourcing folder $module"

            # Find and source the file ending with '1' in the folder
            for file in "$module_folder"/*1*; do
                if [ -f "$file" ]; then
                    log "lvl-2" "Sourcing file: $file"
                    source "$file"
                fi
            done
        else
            log "lvl-1" "Folder $module_folder not found. Skipping."
        fi
    done

    # Source lib and var files
    local dirs=("lib" "var")
    local extensions=("bash" "conf")
    log "lvl-1" "sourcing folders$dirs_var_name (${dirs[*]}) with extensions $extensions_var_name(${extensions[*]})"
    for i in "${!dirs[@]}"; do
        log "lvl-2" "cycling dirs"
        local dir="$PARENT_DIR/${dirs[i]}"
        local ext="${extensions[i]}"
        if [[ ! -d "$dir" ]]; then
            log "lvl-3" "Warning: Directory $dir not found." | tee -a "$ERROR_LOG" >&2
            continue
        fi
        for file in "$dir"/*."$ext"; do
            if [[ -f "$file" ]]; then
                source_helper "$file"
            fi
        done
    done
    log "lvl-1" "All modules and files sourced successfully"
}

# Main execution setup
# Helper function to check and execute functions
execute_functions() {
    local func_array=("$@")
    for func in "${func_array[@]}"; do
        if type "$func" &>/dev/null; then
            log "lvl-2" "Executing $func"
            $func
        else
            log "lvl-2" "Warning: $func function not found." | tee -a "$ERROR_LOG" >&2
        fi
    done
}

# Execution arrangement for rc
execution_arrangement_rc() {
    echo ""
    log "lvl-1" "Starting \033[1m ${FUNCNAME[0]} () \033[0m"
    local set_functions=("set_dynamic" "set_static" "set_aliaswrap")
    execute_functions "${set_functions[@]}"
}

# Execution arrangement for modules
execution_arrangement_modules() {
    echo ""
    log "lvl-1" "tarting \033[1m ${FUNCNAME[0]} () \033[0m"
    local module_functions=("mod_env")
    execute_functions "${module_functions[@]}"
}

# Main execution
main() {
    source_arrangement_rc
    execution_arrangement_rc
    execution_arrangement_modules

    # Set environment variable to indicate successful setup
    export LABS_ENVIRONMENT_SOURCED=1

    # Final check
    if [[ -z "${LABS_ENVIRONMENT_SOURCED}" ]]; then
        echo "Error: Environment sourcing failed." | tee -a "$ERROR_LOG" >&2
        return 1
    else
        echo "Setup completed successfully."
        echo ""
    fi
}

# Execute main function
main
