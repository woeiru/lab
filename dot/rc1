#!/bin/bash

# Store log state and levels in persistent files
LOG_STATE_FILE="/tmp/rc_log_state"
LOG_LEVELS_FILE="/tmp/rc_log_levels"

# Initialize log state if file doesn't exist
if [[ ! -f "$LOG_STATE_FILE" ]]; then
    echo "true" > "$LOG_STATE_FILE"
fi

# Initialize log levels if file doesn't exist
if [[ ! -f "$LOG_LEVELS_FILE" ]]; then
    echo "1 1 1 1 1 1 1 1" > "$LOG_LEVELS_FILE"
fi

# Read the current log state and levels
LOG_TOGGLE=$(cat "$LOG_STATE_FILE")
read -r -a LOG_LEVELS <<< "$(cat "$LOG_LEVELS_FILE")"

# Color codes
RED='\033[0;31m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
INDIGO='\033[0;35m'
VIOLET='\033[1;35m'
NC='\033[0m' # No Color

# Logging function with state and level check
log() {
    # First check LOG_TOGGLE from the state file
    local current_state=$(cat "$LOG_STATE_FILE")
    [[ "${current_state}" != "true" ]] && return 0

    # Read current levels
    local -a current_levels
    read -r -a current_levels <<< "$(cat "$LOG_LEVELS_FILE")"

    local level=$1
    local message=$2
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    local level_num=${level#lvl-}
    local indent=""
    local color=""

    # Set color based on level
    case $level in
        "lvl-1") color=$RED ;;
        "lvl-2") color=$ORANGE ;;
        "lvl-3") color=$YELLOW ;;
        "lvl-4") color=$GREEN ;;
        "lvl-5") color=$CYAN ;;
        "lvl-6") color=$BLUE ;;
        "lvl-7") color=$INDIGO ;;
        "lvl-8") color=$VIOLET ;;
        *) color=$NC ;;
    esac

    # Create indentation and colored indicator
    if [ $level_num -eq 1 ]; then
        indent="${color}    └─${NC}"
    else
        indent="      ${color}└─${NC}"
        for i in $(seq 3 $level_num); do
            indent="  $indent"
        done
    fi

    # Output log message only if the level is enabled
    if [[ ${current_levels[$((level_num-1))]} -eq 1 ]]; then
        if [ $level_num -eq 1 ]; then
            echo -e "${indent}$level $message" >&2
        else
            echo -e "${indent}$level $message"
        fi
    fi
}

# Function to set up logging with persistent state and levels
setlog() {
    local arg=$1

    case "$arg" in
        "off")
            # Disable logging by updating the state file
            echo "false" > "$LOG_STATE_FILE"
            export LOG_TOGGLE="false"
            echo "─ Logging has been disabled"
            return 0
            ;;
        "on")
            # Enable logging by updating the state file
            echo "true" > "$LOG_STATE_FILE"
            export LOG_TOGGLE="true"

            # Reset all levels to enabled
            echo "1 1 1 1 1 1 1 1" > "$LOG_LEVELS_FILE"
            read -r -a LOG_LEVELS <<< "$(cat "$LOG_LEVELS_FILE")"
            export LOG_LEVELS

            echo "─ Logging has been enabled with all levels active"
            return 0
            ;;
        *)
            # Check if logging is enabled by reading the state file
            if [[ "$(cat "$LOG_STATE_FILE")" != "true" ]]; then
                echo "Logging is currently disabled. Use 'setlog on' to enable logging first."
                return 1
            fi

            local range=$arg
            local start end
            if [[ $range =~ ^([1-8])-([1-8])$ ]]; then
                start=${BASH_REMATCH[1]}
                end=${BASH_REMATCH[2]}

                # Validate range
                if [[ $start -gt $end ]]; then
                    echo "Invalid range: start ($start) cannot be greater than end ($end)"
                    return 1
                fi
            else
                echo "└─Invalid input. Usage:"
                echo "   setlog on|off            - Enable or disable logging"
                echo "   setlog <start>-<end>     - Set logging levels (e.g., '1-3' or '2-5')"
                return 1
            fi

            # Create new levels array
            local -a new_levels=(0 0 0 0 0 0 0 0)

            # Set specified range to 1
            for ((i=start-1; i<=end-1; i++)); do
                new_levels[$i]=1
            done

            # Save new levels to file
            echo "${new_levels[*]}" > "$LOG_LEVELS_FILE"

            # Update current session
            LOG_LEVELS=("${new_levels[@]}")
            export LOG_LEVELS

            echo "─ Logging levels updated to: ${new_levels[*]}"
            ;;
    esac
}

# Utility functions
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

source_if_exists() {
    if [ -f "$1" ]; then
        source "$1"
        log "lvl-3" "Sourced file: $1"
    else
        log "lvl-1" "File not found: $1"
    fi
}

# Export functions and variables
export -f log
export -f setlog
export -f command_exists
export -f source_if_exists
export LOG_LEVELS
export LOG_TOGGLE
