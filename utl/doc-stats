#!/bin/bash
#######################################################################
# Lab Environment System Metrics Generator
#######################################################################
# File: doc-stats
# Description: Generates real-time system metrics and updates the 
#              System Metrics section in README.md automatically
#
# Usage: ./doc-stats [--update|--markdown|--raw]
#   --update    Update the System Metrics section in README.md
#   --markdown  Output in markdown table format
#   --raw       Output raw numbers only
#   (default)   Output formatted statistics for terminal display
#######################################################################

set -euo pipefail

# Initialize lab environment - simple approach
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Set LAB_DIR if not already set
if [[ -z "${LAB_DIR:-}" ]]; then
    readonly LAB_DIR="$(dirname "$SCRIPT_DIR")"
fi

# Configuration using lab environment variables
readonly OUTPUT_FILE="$LAB_DIR/README.md"
readonly BACKUP_FILE="$LAB_DIR/README.md.backup"

# Color definitions (using lab infrastructure if available, fallback otherwise)
if [[ -n "${LOG_NC:-}" ]]; then
    # Use lab color infrastructure
    readonly RED="${LOG_COLORS[0]:-\033[0;31m}"
    readonly GREEN='\033[0;32m'
    readonly YELLOW='\033[1;33m'
    readonly BLUE='\033[0;34m'
    readonly NC="${LOG_NC}"
else
    # Fallback color definitions
    readonly RED='\033[0;31m'
    readonly GREEN='\033[0;32m'
    readonly YELLOW='\033[1;33m'
    readonly BLUE='\033[0;34m'
    readonly NC='\033[0m'
fi

# Enhanced logging functions
log() { 
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $*"
}

success() { 
    echo -e "${GREEN}✅${NC} $*"
}

warning() { 
    echo -e "${YELLOW}⚠️${NC} $*"
}

error() { 
    echo -e "${RED}❌${NC} $*"
}

# Gather all statistics
gather_stats() {
    # Count all regular files (excluding hidden/git files) to match tree output
    local total_files=$(find "$LAB_DIR" -type f ! -path '*/.*' | wc -l)
    local directories=$(find "$LAB_DIR" -type d ! -path '*/.*' | wc -l)
    local lib_functions=$(grep -r "() {" "$LAB_DIR/lib/ops/" 2>/dev/null | wc -l)
    local lib_files=$(find "$LAB_DIR/lib" -name "*" -type f | wc -l)
    
    local ops_lines=0
    if [ -d "$LAB_DIR/lib/ops" ]; then
        ops_lines=$(wc -l "$LAB_DIR/lib/ops"/* 2>/dev/null | tail -1 | awk '{print $1}')
    fi
    
    local util_lines=0
    if [ -d "$LAB_DIR/lib/utl" ]; then
        util_lines=$(wc -l "$LAB_DIR/lib/utl"/* 2>/dev/null | tail -1 | awk '{print $1}')
    fi
    
    local wrapper_functions=$(grep -r "\-w() {" "$LAB_DIR/src/mgt/" 2>/dev/null | wc -l)
    
    local doc_lines=0
    if [ -d "$LAB_DIR/doc" ]; then
        doc_lines=$(find "$LAB_DIR/doc" -name "*.md" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}')
    fi
    
    local doc_files=$(find "$LAB_DIR" -name "*.md" 2>/dev/null | wc -l)
    local config_files=$(find "$LAB_DIR/cfg" -name "*" -type f 2>/dev/null | wc -l)
    local deployment_scripts=$(find "$LAB_DIR/src" -name "*" -type f 2>/dev/null | wc -l)
    local container_vars=$(grep -r "CT_.*=" "$LAB_DIR/cfg/env/" 2>/dev/null | wc -l)
    
    local test_lines=0
    if [ -f "$LAB_DIR/tst/test_environment" ]; then
        test_lines=$(wc -l "$LAB_DIR/tst/test_environment" | awk '{print $1}')
    fi

    case "${1:-formatted}" in
        --raw)
            echo "$total_files $directories $lib_functions $lib_files $ops_lines $util_lines $wrapper_functions $doc_lines $doc_files $config_files $deployment_scripts $container_vars $test_lines"
            ;;
        --markdown)
            cat << EOF
| Metric | Value |
|--------|--------|
| Total Files | $total_files files across $directories directories |
| Library Functions | $lib_functions operational functions in $lib_files library modules |
| Operations Code | $ops_lines lines of infrastructure automation |
| Utility Libraries | $util_lines lines of reusable components |
| Wrapper Functions | $wrapper_functions environment-integration wrappers |
| Technical Documentation | $doc_lines lines across $doc_files markdown files |
| Configuration Files | $config_files environment and system config files |
| Deployment Scripts | $deployment_scripts service-specific deployment modules |
| Container Variables | $container_vars container configuration parameters |
| Test Framework | $test_lines lines of comprehensive validation logic |
EOF
            ;;
        --update)
            update_readme_metrics "$total_files" "$directories" "$lib_functions" "$lib_files" "$ops_lines" "$util_lines" "$wrapper_functions" "$doc_lines" "$doc_files" "$config_files" "$deployment_scripts" "$container_vars" "$test_lines"
            ;;
        *)
            cat << EOF
📊 Lab Environment Statistics
=============================

🏗️ Codebase Statistics:
  - Total Files: $total_files files across $directories directories
  - Library Functions: $lib_functions operational functions in $lib_files library modules
  - Operations Code: $ops_lines lines of infrastructure automation
  - Utility Libraries: $util_lines lines of reusable components
  - Wrapper Functions: $wrapper_functions environment-integration wrappers

📚 Documentation & Configuration:
  - Technical Documentation: $doc_lines lines across $doc_files markdown files
  - Configuration Files: $config_files environment and system config files
  - Deployment Scripts: $deployment_scripts service-specific deployment modules
  - Container Variables: $container_vars container configuration parameters

🧪 Quality Assurance:
  - Test Framework: $test_lines lines of comprehensive validation logic
  - Function Separation: Pure functions with management wrappers
  - Security Coverage: Zero hardcoded credentials with secure management
  - Environment Support: Multi-tier configuration hierarchy

Generated: $(date)
EOF
            ;;
    esac
}

# Function to update the System Metrics section in README.md
update_readme_metrics() {
    local total_files="$1"
    local directories="$2"
    local lib_functions="$3"
    local lib_files="$4"
    local ops_lines="$5"
    local util_lines="$6"
    local wrapper_functions="$7"
    local doc_lines="$8"
    local doc_files="$9"
    local config_files="${10}"
    local deployment_scripts="${11}"
    local container_vars="${12}"
    local test_lines="${13}"
    
    log "Updating System Metrics section in README.md..."
    
    # Create backup
    cp "$OUTPUT_FILE" "$BACKUP_FILE"
    
    # Generate new metrics section
    local temp_metrics_section="/tmp/metrics_section_$$"
    
    cat > "$temp_metrics_section" << EOF
## 📊 System Metrics

### 🏗️ Codebase Statistics
- **Total Files**: $total_files files across $directories directories
- **Library Functions**: $lib_functions operational functions in $lib_files library modules
- **Operations Code**: $ops_lines lines of infrastructure automation
- **Utility Libraries**: $util_lines lines of reusable components
- **Wrapper Functions**: $wrapper_functions environment-integration wrappers

### 📚 Documentation & Configuration
- **Technical Documentation**: $doc_lines lines across $doc_files markdown files
- **Configuration Files**: $config_files environment and system config files
- **Deployment Scripts**: $deployment_scripts service-specific deployment modules
- **Container Variables**: $container_vars container configuration parameters

### 🧪 Quality Assurance
- **Test Framework**: $test_lines lines of comprehensive validation logic
- **Function Separation**: Pure functions with management wrappers
- **Security Coverage**: Zero hardcoded credentials with secure management
- **Environment Support**: Multi-tier configuration hierarchy

> 💡 **Live Metrics**: These statistics are generated in real-time using \`./utl/doc-stats\`. Run it anytime to get current codebase metrics in formatted, markdown, or raw output.

EOF
    
    # Find the start and end of the System Metrics section
    local start_line end_line
    start_line=$(grep -n "^## 📊 System Metrics" "$OUTPUT_FILE" | head -1 | cut -d: -f1)
    end_line=$(grep -n "^## 📋 Project Index" "$OUTPUT_FILE" | head -1 | cut -d: -f1)
    
    if [[ -n "$start_line" && -n "$end_line" ]]; then
        # Replace the section between the two markers
        {
            head -n $((start_line - 1)) "$OUTPUT_FILE"
            cat "$temp_metrics_section"
            echo ""
            tail -n +$end_line "$OUTPUT_FILE"
        } > "${OUTPUT_FILE}.tmp"
        mv "${OUTPUT_FILE}.tmp" "$OUTPUT_FILE"
        
        success "System Metrics section updated in README.md"
        success "Backup created: $BACKUP_FILE"
        
        local total_lines
        total_lines=$(wc -l < "$OUTPUT_FILE")
        log "Updated README.md ($total_lines lines total)"
    else
        error "Could not find System Metrics section markers in README.md"
        error "Start marker (## 📊 System Metrics): ${start_line:-not found}"
        error "End marker (## 📋 Project Index): ${end_line:-not found}"
        return 1
    fi
    
    # Clean up
    rm -f "$temp_metrics_section"
}

# Main execution function
main() {
    local action="${1:-formatted}"
    
    case "$action" in
        --update)
            gather_stats --update
            ;;
        --markdown|--raw|*)
            gather_stats "$action"
            ;;
    esac
}

# Execute if run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
