#!/bin/bash
#######################################################################
# Lab Environment Variable Usage Documentation Generator (Fixed Version)
#######################################################################
# File: doc-var-fixed
# Description: Fixed version that bypasses aux-acu hanging issue
#
# Usage: ./doc-var-fixed
#   (default)   Updates the variable usage table in doc/dev/variables.md
#######################################################################

set -euo pipefail

# Initialize lab environment
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Set LAB_DIR if not already set
if [[ -z "${LAB_DIR:-}" ]]; then
    readonly LAB_DIR="$(dirname "$SCRIPT_DIR")"
fi

# Define target directories
CFG_ENV_DIR="$LAB_DIR/cfg/env"
LIB_OPS_DIR="$LAB_DIR/lib/ops"
SRC_SET_DIR="$LAB_DIR/src/set"

# Output file
DOC_FILE="$LAB_DIR/doc/dev/variables.md"

# Function to count variables from config files
count_total_variables() {
    local total=0
    for file in "$CFG_ENV_DIR"/*; do
        if [[ -f "$file" ]]; then
            local count=$(grep -cE '^[a-zA-Z0-9_]+=' "$file" 2>/dev/null || echo "0")
            total=$((total + count))
        fi
    done
    echo "$total"
}

# Function to extract variables from config files
extract_variables() {
    declare -A variables
    declare -a var_order
    
    for file in "$CFG_ENV_DIR"/*; do
        if [[ -f "$file" ]]; then
            while IFS= read -r line || [[ -n "$line" ]]; do
                if [[ "$line" =~ ^[[:space:]]*# || -z "$line" || "$line" =~ ^[[:space:]]*declare || ! "$line" =~ = ]]; then
                    continue
                fi
                local var_raw value_raw
                var_raw=$(echo "$line" | cut -d'=' -f1)
                value_raw=$(echo "$line" | cut -d'=' -f2-)
                var=$(echo "$var_raw" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                if [[ ! "$var" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    continue
                fi
                value=$(echo "$value_raw" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/^"\\(.*\\)"$/\\1/' -e "s/^'\\([^']*\)'$/\\1/")
                if [[ -n "$var" ]]; then
                    variables["$var"]="$value"
                    if ! printf '%s\n' "${var_order[@]}" 2>/dev/null | grep -qFx "$var"; then
                        var_order+=("$var")
                    fi
                fi
            done < "$file"
        fi
    done
    
    # Output variables in order
    for var in "${var_order[@]}"; do
        echo "$var=${variables[$var]}"
    done
}

# Function to count variable usage in a directory
count_var_usage() {
    local var_name="$1"
    local target_dir="$2"
    local total=0
    
    if [[ -d "$target_dir" ]]; then
        for file in "$target_dir"/*; do
            if [[ -f "$file" && -r "$file" ]]; then
                local count=$(grep -E -o "\\b${var_name}\\b" "$file" 2>/dev/null | wc -l)
                # Ensure count is a valid number
                if [[ "$count" =~ ^[0-9]+$ ]]; then
                    total=$((total + count))
                fi
            fi
        done
    fi
    echo "$total"
}

# Function to generate variable usage table
generate_variable_table() {
    local total_variables=$(count_total_variables)
    
    # Generate header with actual variable count
    cat << EOF
*Auto-updated variable usage documentation with real-time analysis*

> **Last Updated**: $(date '+%Y-%m-%d %H:%M:%S')  
> **Generated By**: \`utl/doc-var-fixed\`  
> **Total Variables**: $total_variables variables analyzed across all configuration files
> **Analysis Command**: Direct analysis of cfg/env, lib/ops, and src/set directories

This documentation provides a comprehensive overview of variable usage across the lab environment:

### **ðŸ“Š Variable Analysis Overview**

Variables are analyzed across three key directories:
- **Configuration Environment** (\`cfg/env/\`) - Environment-specific configuration files
- **Operations Libraries** (\`lib/ops/\`) - Infrastructure and operations function libraries  
- **Deployment Scripts** (\`src/set/\`) - Deployment and setup automation scripts

### **ðŸ“– Variable Usage Table**

| Variable | Value | Total Usage | lib/ops | src/set | cfg/env |
|----------|-------|-------------|---------|---------|---------|
EOF
    
    # Process variables
    extract_variables | while IFS='=' read -r var_name var_value; do
        if [[ -n "$var_name" ]]; then
            # Count usage in each directory
            local ops_usage=$(count_var_usage "$var_name" "$LIB_OPS_DIR")
            local set_usage=$(count_var_usage "$var_name" "$SRC_SET_DIR")
            local cfg_usage=1  # Variable is defined in config, so at least 1
            local total_usage=$((ops_usage + set_usage + cfg_usage))
            
            # Truncate long values for display
            local display_value="$var_value"
            if [[ ${#display_value} -gt 25 ]]; then
                display_value="${display_value:0:22}..."
            fi
            
            # Output the table row
            echo "| $var_name | $display_value | $total_usage | $ops_usage | $set_usage | $cfg_usage |"
        fi
    done
}

# Function to update the documentation file
update_documentation() {
    local temp_file=$(mktemp)
    local in_auto_section=false
    
    echo "Updating variable usage table in $DOC_FILE..."
    
    # Check if the file exists, create if not
    if [[ ! -f "$DOC_FILE" ]]; then
        cat > "$DOC_FILE" << 'EOF'
<!-- 
    This documentation provides comprehensive analysis of variable usage across the lab environment.
    Variables are analyzed from configuration files and their usage patterns across different modules.
    
    The analysis covers:
    - cfg/env/  : Environment-specific configuration files
    - lib/ops/  : Operations function libraries
    - src/set/  : Deployment and setup automation scripts
-->

# Variable Usage Documentation

Comprehensive analysis of environment variables and their usage patterns across the Lab Environment Management System.

## ðŸ“š Variable Categories

Variables in the lab environment are organized into several categories:

### Environment Configuration (`cfg/env/`)
- **Site Configuration**: Site-specific settings and parameters
- **Environment Overrides**: Development, testing, and production overrides
- **Node Configuration**: Node-specific infrastructure settings

### Operations Integration (`lib/ops/`)
- **Infrastructure Functions**: Variables used in infrastructure management
- **System Operations**: Variables for system-level operations
- **Service Management**: Variables for service configuration and management

### Deployment Scripts (`src/set/`)
- **Deployment Parameters**: Variables used in deployment automation
- **Setup Configuration**: Variables for environment setup and initialization
- **Runtime Constants**: Variables for runtime behavior control

<!-- AUTO-GENERATED SECTION: DO NOT EDIT MANUALLY -->

<!-- END AUTO-GENERATED SECTION -->

## ðŸ”§ Variable Analysis Tools

- **[`utl/doc-var`](../utl/doc-var)** - Updates this variable usage documentation automatically using `aux-acu`
- **[`lib/gen/aux` (aux-acu)](../lib/gen/aux)** - Variable usage analysis function with JSON output support
- **[`utl/doc-func`](../utl/doc-func)** - Function metadata table generator
- **[`utl/doc-index`](../utl/doc-index)** - Documentation index generator

```bash
# Update variable usage documentation
./utl/doc-var

# Analyze variable usage manually
aux-acu "" cfg/env lib/ops src/set

# Generate variable analysis as JSON
aux-acu -j "" cfg/env lib/ops src/set

# View specific variable usage patterns
aux-acu -a cfg/env lib/ops src/set  # Alphabetical order
```

## ðŸ“– Related Documentation

- **[Functions Reference](functions.md)** - Pure function documentation and metadata
- **[System Architecture](architecture.md)** - Complete system design and variable flow
- **[Configuration Guide](../adm/configuration.md)** - Configuration file formats and variable definitions
EOF
    fi
    
    # Read the original file and replace the auto-generated section
    while IFS= read -r line; do
        if [[ "$line" == *"<!-- AUTO-GENERATED SECTION: DO NOT EDIT MANUALLY -->"* ]]; then
            echo "$line" >> "$temp_file"
            echo "<!-- Command: Direct analysis bypassing aux-acu -->" >> "$temp_file"
            echo "" >> "$temp_file"
            
            # Generate variable table with real-time data
            generate_variable_table >> "$temp_file"
            
            echo "" >> "$temp_file"
            in_auto_section=true
        elif [[ "$line" == *"<!-- END AUTO-GENERATED SECTION -->"* ]]; then
            echo "$line" >> "$temp_file"
            in_auto_section=false
        elif [[ "$in_auto_section" == false ]]; then
            echo "$line" >> "$temp_file"
        fi
    done < "$DOC_FILE"
    
    # Replace the original file
    mv "$temp_file" "$DOC_FILE"
    echo "Variable usage documentation updated successfully."
}

# Main execution
main() {
    echo "Generating variable usage documentation (fixed version)..."
    echo "Analyzing directories: cfg/env, lib/ops, src/set"
    
    # Check if required directories exist
    for dir in "$CFG_ENV_DIR" "$LIB_OPS_DIR" "$SRC_SET_DIR"; do
        if [[ ! -d "$dir" ]]; then
            echo "Error: Directory $dir not found"
            exit 1
        fi
    done
    
    # Create documentation directory if it doesn't exist
    mkdir -p "$(dirname "$DOC_FILE")"
    
    # Update the documentation
    update_documentation
    
    echo "Variable usage documentation generation complete."
}

# Execute main function
main "$@"