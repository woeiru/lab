#!/bin/bash
#######################################################################
# Lab Environment System Metrics Generator
#######################################################################
# File: stats
# Description: Generates real-time system metrics and updates the 
#              System Metrics section in README.md automatically
#
# Usage: ./stats [--update|--markdown|--raw]
#   --update    Update the System Metrics section in README.md
#   --markdown  Output in markdown table format
#   --raw       Output raw numbers only
#   (default)   Output formatted statistics for terminal display
#######################################################################

set -e

# Initialize lab environment - simple approach
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Set LAB_DIR if not already set - PORTABLE for generators subfolder
if [[ -z "${LAB_DIR:-}" ]]; then
    # Script is now in utl/doc/generators, so LAB_DIR is three levels up
    readonly LAB_DIR="$(dirname "$(dirname "$(dirname "$SCRIPT_DIR")")")"
fi

# Load targets configuration
TARGETS_FILE="$(dirname "$SCRIPT_DIR")/config/targets"
if [[ -f "$TARGETS_FILE" ]]; then
    source "$TARGETS_FILE"
else
    echo "Warning: targets file not found at $TARGETS_FILE"
    # Fallback to default directories
    TARGET_DIRECTORIES=("lib" "src" "cfg" "doc")
fi

# Get output file from configuration
if [[ -n "${GENERATOR_OUTPUT_FILES[stats]:-}" ]]; then
    readonly OUTPUT_FILE="$LAB_DIR/${GENERATOR_OUTPUT_FILES[stats]}"
else
    # Fallback to default
    readonly OUTPUT_FILE="$LAB_DIR/README.md"
fi
readonly BACKUP_FILE="$OUTPUT_FILE.backup"

# Generate statistics from target directories
generate_stats() {
    local total_files=0
    local total_dirs=0
    local total_size=0
    
    echo "# System Metrics"
    echo ""
    echo "*Auto-updated system metrics with real-time analysis*"
    echo ""
    echo "> **Last Updated**: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "> **Generated By**: \`utl/doc/generators/stats\`"
    echo ""
    echo "| Directory | Files | Subdirs | Size (KB) |"
    echo "|-----------|-------|---------|-----------|"    
    
    # Process each target directory
    for target_dir in "${TARGET_DIRECTORIES[@]}"; do
        local full_path="$LAB_DIR/$target_dir"
        if [[ -d "$full_path" ]]; then
            local files=$(find "$full_path" -type f 2>/dev/null | wc -l)
            local dirs=$(find "$full_path" -type d 2>/dev/null | wc -l)
            local size=$(du -sk "$full_path" 2>/dev/null | cut -f1)
            
            echo "| $target_dir | $files | $dirs | $size |"
            
            total_files=$((total_files + files))
            total_dirs=$((total_dirs + dirs))
            total_size=$((total_size + size))
        fi
    done
    
    echo "|-----------|-------|---------|-----------|"    
    echo "| **TOTAL** | **$total_files** | **$total_dirs** | **$total_size** |"
}

# Main function
main() {
    echo "Stats Generator - Using targets configuration"
    echo "LAB_DIR detected as: $LAB_DIR"
    echo "Target directories: ${TARGET_DIRECTORIES[*]}"
    
    # Generate stats table
    generate_stats
    
    echo ""
    echo "System metrics generation complete."
}

# Execute if run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi